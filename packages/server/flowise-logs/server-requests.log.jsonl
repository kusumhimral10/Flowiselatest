{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/tools","package":"server","request":{"body":{"color":"linear-gradient(rgb(121,4,60), rgb(191,14,99))","description":"This tool is for testing api","func":"","iconSrc":"","name":"Test tool","schema":"[]"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"159","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/tools","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/tools"},"timestamp":"2024-02-19 11:36:09"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/tools","package":"server","request":{"body":{"color":"linear-gradient(rgb(31,148,94), rgb(201,94,246))","description":"This tool is for testing api","func":"eg","iconSrc":"https://github.com/FlowiseAI/Flowise/assets/26460777/517fdab2-8a6e-4781-b3c8-fb92cc78aa0b","name":"Test tool","schema":"[{\"id\":1,\"property\":\"testing\",\"description\":\"This is for testing.\",\"type\":\"boolean\",\"required\":false}]"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"368","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/tools","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/tools"},"timestamp":"2024-02-19 11:40:52"}
{"level":"info","message":"‚ùå DELETE /api/v1/tools/994ee6ae-6fab-4b58-85dc-94e1b22d3f28","package":"server","request":{"body":{},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/tools","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"DELETE","params":{},"query":{},"url":"/api/v1/tools/994ee6ae-6fab-4b58-85dc-94e1b22d3f28"},"timestamp":"2024-02-19 12:00:32"}
{"level":"info","message":"üñä PUT /api/v1/tools/237faa5f-a6ff-48cb-be3e-f406905a7381","package":"server","request":{"body":{"description":"Add new contact to Hubspot","func":"const fetch = require('node-fetch');\nconst url = 'https://api.hubapi.com/crm/v3/objects/contacts'\nconst token = 'YOUR-TOKEN';\n\nconst body = {\n\t\"properties\": {\n\t        \"email\": $email\n\t}\n};\n\nif ($firstname) body.properties.firstname = $firstname;\nif ($lastname) body.properties.lastname = $lastname;\n\nconst options = {\n\tmethod: 'POST',\n\theaders: {\n\t        'Authorization': `Bearer ${token}`,\n\t\t'Content-Type': 'application/json'\n\t},\n\tbody: JSON.stringify(body)\n};\n\ntry {\n\tconst response = await fetch(url, options);\n\tconst text = await response.text();\n\treturn text;\n} catch (error) {\n\tconsole.error(error);\n\treturn '';\n}","iconSrc":"https://cdn.worldvectorlogo.com/logos/hubspot-1.svg","name":"add_contact_hubspot","schema":"[{\"id\":0,\"property\":\"email\",\"description\":\"email address of contact\",\"type\":\"string\",\"required\":true},{\"id\":1,\"property\":\"firstname\",\"description\":\"first name of contact\",\"type\":\"string\",\"required\":false},{\"id\":2,\"property\":\"lastname\",\"description\":\"last name of contact\",\"type\":\"string\",\"required\":false}]"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"1183","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/tools","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/tools/237faa5f-a6ff-48cb-be3e-f406905a7381"},"timestamp":"2024-02-19 12:22:34"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/tools","package":"server","request":{"body":{"color":"linear-gradient(rgb(7,181,163), rgb(119,248,202))","description":"testing","func":"","iconSrc":"https://github.com/FlowiseAI/Flowise/assets/26460777/517fdab2-8a6e-4781-b3c8-fb92cc78aa0b","name":"test","schema":"[]"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"225","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/tools","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/tools"},"timestamp":"2024-02-19 12:43:00"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/tools","package":"server","request":{"body":{"color":"linear-gradient(rgb(63,249,181), rgb(202,239,178))","description":"testing","func":"","iconSrc":"https://github.com/FlowiseAI/Flowise/assets/26460777/517fdab2-8a6e-4781-b3c8-fb92cc78aa0b","name":"test","schema":"[]"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"226","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/tools","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/tools"},"timestamp":"2024-02-19 12:46:19"}
{"level":"info","message":"‚ùå DELETE /api/v1/tools/0d3e1727-4bd7-45ea-8919-115f5f9359cc","package":"server","request":{"body":{},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/tools","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"DELETE","params":{},"query":{},"url":"/api/v1/tools/0d3e1727-4bd7-45ea-8919-115f5f9359cc"},"timestamp":"2024-02-19 12:49:41"}
{"level":"info","message":"‚ùå DELETE /api/v1/tools/6c10fea8-52ef-403d-86c3-781946c70d4b","package":"server","request":{"body":{},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/tools","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"DELETE","params":{},"query":{},"url":"/api/v1/tools/6c10fea8-52ef-403d-86c3-781946c70d4b"},"timestamp":"2024-02-19 12:49:46"}
{"level":"info","message":"‚ùå DELETE /api/v1/tools/0fea0168-7b0b-4729-9331-90380aa05b9b","package":"server","request":{"body":{},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/tools","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"DELETE","params":{},"query":{},"url":"/api/v1/tools/0fea0168-7b0b-4729-9331-90380aa05b9b"},"timestamp":"2024-02-19 12:49:51"}
{"level":"info","message":"üñä PUT /api/v1/assistants/37cab857-c7ca-4938-88e6-c0f29789f339","package":"server","request":{"body":{"credential":"023966ed-0c4f-4b0d-af8f-bbc26f2c4545","details":"{\"name\":\"Vision Relief\",\"description\":\"Vision Relief\",\"model\":\"gpt-3.5-turbo-1106\",\"instructions\":\"Please respond to the user's questions and answers using the text document included, if the information is not available and you can't answer any questions please respond with \\\"I can't answer that question seems like you need to talk to a real human. Please contact Rakesh David for more information, here is his email: rakesh@maslow.ai\\\"\",\"tools\":[\"retrieval\"],\"files\":[{\"object\":\"file\",\"id\":\"file-QDFPiNzlTUP4pKdy714BTeFK\",\"purpose\":\"assistants\",\"filename\":\"Vision Relief U.txt\",\"bytes\":893653,\"created_at\":1706140745,\"status\":\"processed\",\"status_details\":null}],\"uploadFiles\":\"\"}","iconSrc":"https://api.dicebear.com/7.x/bottts/svg?seed=b1eae452-9cdf-462d-bec7-8a97d1863dd4"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"898","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/assistants","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/assistants/37cab857-c7ca-4938-88e6-c0f29789f339"},"timestamp":"2024-02-19 13:47:28"}
{"level":"info","message":"üñä PUT /api/v1/assistants/37cab857-c7ca-4938-88e6-c0f29789f339","package":"server","request":{"body":{"credential":"023966ed-0c4f-4b0d-af8f-bbc26f2c4545","details":"{\"name\":\"Vision Relief\",\"description\":\"Vision Relief\",\"model\":\"gpt-3.5-turbo-1106\",\"instructions\":\"Please respond to the user's questions and answers using the text document included, if the information is not available and you can't answer any questions please respond with \\\"I can't answer that question seems like you need to talk to a real human. Please contact Rakesh David for more information, here is his email: rakesh@maslow.ai\\\"\",\"tools\":[\"retrieval\"],\"files\":[{\"object\":\"file\",\"id\":\"file-QDFPiNzlTUP4pKdy714BTeFK\",\"purpose\":\"assistants\",\"filename\":\"Vision Relief U.txt\",\"bytes\":893653,\"created_at\":1706140745,\"status\":\"processed\",\"status_details\":null}],\"uploadFiles\":\"\"}","iconSrc":"https://api.dicebear.com/7.x/bottts/svg?seed=b1eae452-9cdf-462d-bec7-8a97d1863dd4"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"898","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/assistants","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/assistants/37cab857-c7ca-4938-88e6-c0f29789f339"},"timestamp":"2024-02-19 15:15:25"}
{"level":"info","message":"üñä PUT /api/v1/tools/237faa5f-a6ff-48cb-be3e-f406905a7381","package":"server","request":{"body":{"description":"Add new contact to Hubspot","func":"const fetch = require('node-fetch');\nconst url = 'https://api.hubapi.com/crm/v3/objects/contacts'\nconst token = 'YOUR-TOKEN';\n\nconst body = {\n\t\"properties\": {\n\t        \"email\": $email\n\t}\n};\n\nif ($firstname) body.properties.firstname = $firstname;\nif ($lastname) body.properties.lastname = $lastname;\n\nconst options = {\n\tmethod: 'POST',\n\theaders: {\n\t        'Authorization': `Bearer ${token}`,\n\t\t'Content-Type': 'application/json'\n\t},\n\tbody: JSON.stringify(body)\n};\n\ntry {\n\tconst response = await fetch(url, options);\n\tconst text = await response.text();\n\treturn text;\n} catch (error) {\n\tconsole.error(error);\n\treturn '';\n}","iconSrc":"https://cdn.worldvectorlogo.com/logos/hubspot-1.svg","name":"add_contact_hubspot_test","schema":"[{\"id\":0,\"property\":\"email\",\"description\":\"email address of contact\",\"type\":\"string\",\"required\":true},{\"id\":1,\"property\":\"firstname\",\"description\":\"first name of contact\",\"type\":\"string\",\"required\":false},{\"id\":2,\"property\":\"lastname\",\"description\":\"last name of contact\",\"type\":\"string\",\"required\":false}]"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"1188","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/tools","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/tools/237faa5f-a6ff-48cb-be3e-f406905a7381"},"timestamp":"2024-02-19 15:18:54"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/tools","package":"server","request":{"body":{"color":"linear-gradient(rgb(220,59,186), rgb(22,175,177))","description":"testing","func":"","iconSrc":"","name":"test_tool","schema":"[]"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"141","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/tools","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/tools"},"timestamp":"2024-02-19 15:21:13"}
{"level":"info","message":"üñä PUT /api/v1/assistants/37cab857-c7ca-4938-88e6-c0f29789f339","package":"server","request":{"body":{"credential":"023966ed-0c4f-4b0d-af8f-bbc26f2c4545","details":"{\"name\":\"Vision Relief\",\"description\":\"Vision Relief\",\"model\":\"gpt-3.5-turbo-1106\",\"instructions\":\"Please respond to the user's questions and answers using the text document included, if the information is not available and you can't answer any questions please respond with \\\"I can't answer that question seems like you need to talk to a real human. Please contact Rakesh David for more information, here is his email: rakesh@maslow.ai\\\"\",\"tools\":[\"retrieval\"],\"files\":[{\"object\":\"file\",\"id\":\"file-QDFPiNzlTUP4pKdy714BTeFK\",\"purpose\":\"assistants\",\"filename\":\"Vision Relief U.txt\",\"bytes\":893653,\"created_at\":1706140745,\"status\":\"processed\",\"status_details\":null}],\"uploadFiles\":\"\"}","iconSrc":"https://api.dicebear.com/7.x/bottts/svg?seed=b1eae452-9cdf-462d-bec7-8a97d1863dd4"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"898","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/assistants","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/assistants/37cab857-c7ca-4938-88e6-c0f29789f339"},"timestamp":"2024-02-19 15:38:46"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/assistants","package":"server","request":{"body":{"credential":"7c194259-34c9-4d9f-8cd8-2234ac8d4863","details":"{\"id\":\"\",\"name\":\"test\",\"description\":\"testing\",\"model\":\"gpt-4\",\"instructions\":\"abc\",\"tools\":[\"code_interpreter\",\"retrieval\"],\"files\":[],\"uploadFiles\":\"\"}","iconSrc":"https://api.dicebear.com/7.x/bottts/svg?seed=5c3ec434-6343-4aa0-b07b-e156ba994d35"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"345","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/assistants","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/assistants"},"timestamp":"2024-02-19 16:56:32"}
{"level":"info","message":"üñä PUT /api/v1/assistants/37cab857-c7ca-4938-88e6-c0f29789f339","package":"server","request":{"body":{"credential":"023966ed-0c4f-4b0d-af8f-bbc26f2c4545","details":"{\"name\":\"Vision Relief\",\"description\":\"Vision Relief\",\"model\":\"gpt-3.5-turbo-1106\",\"instructions\":\"Please respond to the user's questions and answers using the text document included, if the information is not available and you can't answer any questions please respond with \\\"I can't answer that question seems like you need to talk to a real human. Please contact Rakesh David for more information, here is his email: rakesh@maslow.ai\\\"\",\"tools\":[\"retrieval\"],\"files\":[{\"object\":\"file\",\"id\":\"file-QDFPiNzlTUP4pKdy714BTeFK\",\"purpose\":\"assistants\",\"filename\":\"Vision Relief U.txt\",\"bytes\":893653,\"created_at\":1706140745,\"status\":\"processed\",\"status_details\":null}],\"uploadFiles\":\"\"}","iconSrc":"https://api.dicebear.com/7.x/bottts/svg?seed=b1eae452-9cdf-462d-bec7-8a97d1863dd4"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"898","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/assistants","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/assistants/37cab857-c7ca-4938-88e6-c0f29789f339"},"timestamp":"2024-02-19 17:08:49"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/assistants","package":"server","request":{"body":{},"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","connection":"keep-alive","content-length":"0","host":"localhost:3000","postman-token":"8e7a8a78-4214-4dd1-bdbc-8a4424b484cc","user-agent":"PostmanRuntime/7.36.3"},"method":"POST","params":{},"query":{},"url":"/api/v1/assistants"},"timestamp":"2024-02-19 17:12:14"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/assistants","package":"server","request":{"body":{"credential":"f7a2dca6-6a05-452d-8f8f-aea1f8d149f9","details":"{\"id\":\"\",\"name\":\"test\",\"description\":\"test\",\"model\":\"gpt-3.5-turbo-16k\",\"instructions\":\"\",\"tools\":[\"code_interpreter\",\"retrieval\"],\"files\":[],\"uploadFiles\":\"\"}","iconSrc":"https://api.dicebear.com/7.x/bottts/svg?seed=1346eddb-5743-4c6d-86d9-083aa8dfbd85"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"351","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/assistants","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/assistants"},"timestamp":"2024-02-19 17:17:04"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/assistants","package":"server","request":{"body":{"credential":"f7a2dca6-6a05-452d-8f8f-aea1f8d149f9","details":"{\"id\":\"\",\"name\":\"test\",\"description\":\"test\",\"model\":\"gpt-3.5-turbo-16k\",\"instructions\":\"\",\"tools\":[\"code_interpreter\",\"retrieval\"],\"files\":[],\"uploadFiles\":\"\"}","iconSrc":"https://api.dicebear.com/7.x/bottts/svg?seed=1346eddb-5743-4c6d-86d9-083aa8dfbd85"},"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","connection":"keep-alive","content-length":"374","content-type":"application/json","host":"localhost:3000","postman-token":"e855fe0a-d9ba-4494-a57e-72f95f116a3f","user-agent":"PostmanRuntime/7.36.3"},"method":"POST","params":{},"query":{},"url":"/api/v1/assistants"},"timestamp":"2024-02-19 17:17:16"}
{"level":"info","message":"üñä PUT /api/v1/assistants/37cab857-c7ca-4938-88e6-c0f29789f339","package":"server","request":{"body":{"credential":"023966ed-0c4f-4b0d-af8f-bbc26f2c4545","details":"{\"name\":\"Vision Relief\",\"description\":\"Vision Relief\",\"model\":\"gpt-3.5-turbo-1106\",\"instructions\":\"Please respond to the user's questions and answers using the text document included, if the information is not available and you can't answer any questions please respond with \\\"I can't answer that question seems like you need to talk to a real human. Please contact Rakesh David for more information, here is his email: rakesh@maslow.ai\\\"\",\"tools\":[\"retrieval\"],\"files\":[{\"object\":\"file\",\"id\":\"file-QDFPiNzlTUP4pKdy714BTeFK\",\"purpose\":\"assistants\",\"filename\":\"Vision Relief U.txt\",\"bytes\":893653,\"created_at\":1706140745,\"status\":\"processed\",\"status_details\":null}],\"uploadFiles\":\"\"}","iconSrc":"https://api.dicebear.com/7.x/bottts/svg?seed=b1eae452-9cdf-462d-bec7-8a97d1863dd4"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"898","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/assistants","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/assistants/37cab857-c7ca-4938-88e6-c0f29789f339"},"timestamp":"2024-02-19 17:19:21"}
{"level":"info","message":"üñä PUT /api/v1/tools/c0c7c0e0-af3e-41de-8da1-9ef379d6a100","package":"server","request":{"body":{"description":"Add column1, column2 to Airtable","func":"const fetch = require('node-fetch');\nconst baseId = 'YOUR-BASE-ID';\nconst tableId = 'YOUR-TABLE-ID';\nconst token = 'YOUR-TOKEN';\n\nconst body = {\n\t\"records\": [\n\t\t{\n\t\t\t\"fields\": {\n\t\t\t\t\"column1\": $column1,\n\t\t\t\t\"column2\": $column2,\n\t\t\t}\n\t\t}\n\t]\n};\n\nconst options = {\n\tmethod: 'POST',\n\theaders: {\n\t\t'Authorization': `Bearer ${token}`,\n\t\t'Content-Type': 'application/json'\n\t},\n\tbody: JSON.stringify(body)\n};\n\nconst url = `https://api.airtable.com/v0/${baseId}/${tableId}`\n\ntry {\n\tconst response = await fetch(url, options);\n\tconst text = await response.text();\n\treturn text;\n} catch (error) {\n\tconsole.error(error);\n\treturn '';\n}","iconSrc":"https://raw.githubusercontent.com/gilbarbara/logos/main/logos/airtable.svg","name":"add_airtable","schema":"[{\"id\":0,\"property\":\"column1\",\"description\":\"this is column1\",\"type\":\"string\",\"required\":true},{\"id\":1,\"property\":\"column2\",\"description\":\"this is column2\",\"type\":\"string\",\"required\":true}]"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"1099","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/tools","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/tools/c0c7c0e0-af3e-41de-8da1-9ef379d6a100"},"timestamp":"2024-02-19 17:22:49"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/tools","package":"server","request":{"body":[{"color":"linear-gradient(rgb(204,226,242), rgb(28,208,129))","createdDate":"2024-01-27T22:28:33.302Z","description":"Useful when you need to send message to Discord","func":"/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Output Schema as variables. Ex: Property = userid, Variable = $userid\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst webhookUrl = 'https://hook.eu1.make.com/abcdefg';\nconst body = {\n\t\"message\": $message\n};\nconst options = {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n};\ntry {\n    const response = await fetch(webhookUrl, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}","iconSrc":"https://github.com/FlowiseAI/Flowise/assets/26460777/517fdab2-8a6e-4781-b3c8-fb92cc78aa0b","id":"0edb6e94-9ff5-4061-b71b-c9b7fb1c9216","name":"make_webhook","schema":"[{\"id\":0,\"property\":\"message\",\"description\":\"Message to send\",\"type\":\"string\",\"required\":true}]","updatedDate":"2024-01-27T22:28:33.302Z"},{"color":"linear-gradient(rgb(187,40,46), rgb(190,15,202))","createdDate":"2024-01-27T22:28:56.689Z","description":"Add column1, column2 to Airtable","func":"const fetch = require('node-fetch');\nconst baseId = 'YOUR-BASE-ID';\nconst tableId = 'YOUR-TABLE-ID';\nconst token = 'YOUR-TOKEN';\n\nconst body = {\n\t\"records\": [\n\t\t{\n\t\t\t\"fields\": {\n\t\t\t\t\"column1\": $column1,\n\t\t\t\t\"column2\": $column2,\n\t\t\t}\n\t\t}\n\t]\n};\n\nconst options = {\n\tmethod: 'POST',\n\theaders: {\n\t\t'Authorization': `Bearer ${token}`,\n\t\t'Content-Type': 'application/json'\n\t},\n\tbody: JSON.stringify(body)\n};\n\nconst url = `https://api.airtable.com/v0/${baseId}/${tableId}`\n\ntry {\n\tconst response = await fetch(url, options);\n\tconst text = await response.text();\n\treturn text;\n} catch (error) {\n\tconsole.error(error);\n\treturn '';\n}","iconSrc":"https://raw.githubusercontent.com/gilbarbara/logos/main/logos/airtable.svg","id":"c0c7c0e0-af3e-41de-8da1-9ef379d6a100","name":"add_airtable","schema":"[{\"id\":0,\"property\":\"column1\",\"description\":\"this is column1\",\"type\":\"string\",\"required\":true},{\"id\":1,\"property\":\"column2\",\"description\":\"this is column2\",\"type\":\"string\",\"required\":true}]","updatedDate":"2024-01-27T22:28:56.689Z"},{"color":"linear-gradient(rgb(50,7,163), rgb(251,0,179))","createdDate":"2024-01-27T22:28:43.637Z","description":"Add new contact to Hubspot","func":"const fetch = require('node-fetch');\nconst url = 'https://api.hubapi.com/crm/v3/objects/contacts'\nconst token = 'YOUR-TOKEN';\n\nconst body = {\n\t\"properties\": {\n\t        \"email\": $email\n\t}\n};\n\nif ($firstname) body.properties.firstname = $firstname;\nif ($lastname) body.properties.lastname = $lastname;\n\nconst options = {\n\tmethod: 'POST',\n\theaders: {\n\t        'Authorization': `Bearer ${token}`,\n\t\t'Content-Type': 'application/json'\n\t},\n\tbody: JSON.stringify(body)\n};\n\ntry {\n\tconst response = await fetch(url, options);\n\tconst text = await response.text();\n\treturn text;\n} catch (error) {\n\tconsole.error(error);\n\treturn '';\n}","iconSrc":"https://cdn.worldvectorlogo.com/logos/hubspot-1.svg","id":"237faa5f-a6ff-48cb-be3e-f406905a7381","name":"add_contact_hubspot_test","schema":"[{\"id\":0,\"property\":\"email\",\"description\":\"email address of contact\",\"type\":\"string\",\"required\":true},{\"id\":1,\"property\":\"firstname\",\"description\":\"first name of contact\",\"type\":\"string\",\"required\":false},{\"id\":2,\"property\":\"lastname\",\"description\":\"last name of contact\",\"type\":\"string\",\"required\":false}]","updatedDate":"2024-02-19T09:48:53.996Z"},{"color":"linear-gradient(rgb(220,59,186), rgb(22,175,177))","createdDate":"2024-02-19T09:51:13.456Z","description":"testing","func":"","iconSrc":"","id":"d1b0338f-7728-44e5-afa5-3e6db95021f9","name":"test_tool","schema":"[]","updatedDate":"2024-02-19T09:51:13.456Z"}],"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","connection":"keep-alive","content-length":"4572","content-type":"application/json","host":"localhost:3000","postman-token":"cadc01d1-535e-41b2-b705-12f3b9db14b0","user-agent":"PostmanRuntime/7.36.3"},"method":"POST","params":{},"query":{},"url":"/api/v1/tools"},"timestamp":"2024-02-19 17:24:46"}
{"level":"info","message":"üñä PUT /api/v1/tools/d1b0338f-7728-44e5-afa5-3e6db95021f9","package":"server","request":{"body":{"description":"testing","func":"","iconSrc":"","name":"test_tool1","schema":"[]"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"82","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/tools","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/tools/d1b0338f-7728-44e5-afa5-3e6db95021f9"},"timestamp":"2024-02-19 18:06:55"}
{"level":"info","message":"üñä PUT /api/v1/tools/d1b0338f-7728-44e5-afa5-3e6db95021f9","package":"server","request":{"body":{"description":"testing","func":"","iconSrc":"","name":"test_tool1","schema":"[]"},"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","connection":"keep-alive","content-length":"119","content-type":"application/json","host":"localhost:3000","postman-token":"3eeefcd6-5bbd-4583-8e87-8a7bd905437c","user-agent":"PostmanRuntime/7.36.3"},"method":"PUT","params":{},"query":{},"url":"/api/v1/tools/d1b0338f-7728-44e5-afa5-3e6db95021f9"},"timestamp":"2024-02-19 18:07:49"}
{"level":"info","message":"‚ùå DELETE /api/v1/tools/d1b0338f-7728-44e5-afa5-3e6db95021f9","package":"server","request":{"body":{},"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","connection":"keep-alive","host":"localhost:3000","postman-token":"0abe4914-a4fd-4e17-b56f-b1a47b18c80f","user-agent":"PostmanRuntime/7.36.3"},"method":"DELETE","params":{},"query":{},"url":"/api/v1/tools/d1b0338f-7728-44e5-afa5-3e6db95021f9"},"timestamp":"2024-02-19 18:08:38"}
{"level":"info","message":"üñä PUT /api/v1/assistants/37cab857-c7ca-4938-88e6-c0f29789f339","package":"server","request":{"body":{"credential":"023966ed-0c4f-4b0d-af8f-bbc26f2c4545","details":"{\"name\":\"Vision Relief1\",\"description\":\"Vision Relief\",\"model\":\"gpt-3.5-turbo-1106\",\"instructions\":\"Please respond to the user's questions and answers using the text document included, if the information is not available and you can't answer any questions please respond with \\\"I can't answer that question seems like you need to talk to a real human. Please contact Rakesh David for more information, here is his email: rakesh@maslow.ai\\\"\",\"tools\":[\"retrieval\"],\"files\":[{\"object\":\"file\",\"id\":\"file-QDFPiNzlTUP4pKdy714BTeFK\",\"purpose\":\"assistants\",\"filename\":\"Vision Relief U.txt\",\"bytes\":893653,\"created_at\":1706140745,\"status\":\"processed\",\"status_details\":null}],\"uploadFiles\":\"\"}","iconSrc":"https://api.dicebear.com/7.x/bottts/svg?seed=b1eae452-9cdf-462d-bec7-8a97d1863dd4"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"899","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/assistants","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/assistants/37cab857-c7ca-4938-88e6-c0f29789f339"},"timestamp":"2024-02-19 18:09:42"}
{"level":"info","message":"üñä PUT /api/v1/assistants/37cab857-c7ca-4938-88e6-c0f29789f339","package":"server","request":{"body":{"credential":"023966ed-0c4f-4b0d-af8f-bbc26f2c4545","details":"{\"name\":\"Vision Relief1\",\"description\":\"Vision Relief\",\"model\":\"gpt-3.5-turbo-1106\",\"instructions\":\"Please respond to the user's questions and answers using the text document included, if the information is not available and you can't answer any questions please respond with \\\"I can't answer that question seems like you need to talk to a real human. Please contact Rakesh David for more information, here is his email: rakesh@maslow.ai\\\"\",\"tools\":[\"retrieval\"],\"files\":[{\"object\":\"file\",\"id\":\"file-QDFPiNzlTUP4pKdy714BTeFK\",\"purpose\":\"assistants\",\"filename\":\"Vision Relief U.txt\",\"bytes\":893653,\"created_at\":1706140745,\"status\":\"processed\",\"status_details\":null}],\"uploadFiles\":\"\"}","iconSrc":"https://api.dicebear.com/7.x/bottts/svg?seed=b1eae452-9cdf-462d-bec7-8a97d1863dd4"},"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","connection":"keep-alive","content-length":"922","content-type":"application/json","host":"localhost:3000","postman-token":"e02afdad-ad49-43ce-97ed-fdf9fdff5939","user-agent":"PostmanRuntime/7.36.3"},"method":"PUT","params":{},"query":{},"url":"/api/v1/assistants/37cab857-c7ca-4938-88e6-c0f29789f339"},"timestamp":"2024-02-19 18:10:17"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/assistants","package":"server","request":{"body":{"credential":"f7a2dca6-6a05-452d-8f8f-aea1f8d149f9","details":"{\"id\":\"\",\"name\":\"test_assistant\",\"description\":\"testing\",\"model\":\"gpt-4\",\"instructions\":\"\",\"tools\":[\"code_interpreter\",\"retrieval\"],\"files\":[],\"uploadFiles\":\"\"}","iconSrc":"https://api.dicebear.com/7.x/bottts/svg?seed=c870bb49-17d6-4d94-83dd-f96240aa2122"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"352","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/assistants","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/assistants"},"timestamp":"2024-02-19 18:11:16"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-config","package":"server","request":{"body":{"baseClasses":["ConversationalRetrievalQAChain","BaseChain","Runnable"],"category":"Chains","description":"Document QA - built on RetrievalQAChain to provide a chat history component","filePath":"/usr/src/packages/node_modules/flowise-components/dist/nodes/chains/ConversationalRetrievalQAChain/ConversationalRetrievalQAChain.js","icon":"/usr/src/packages/node_modules/flowise-components/dist/nodes/chains/ConversationalRetrievalQAChain/qa.svg","id":"conversationalRetrievalQAChain_0","inputAnchors":[{"id":"conversationalRetrievalQAChain_0-input-model-BaseLanguageModel","label":"Language Model","name":"model","type":"BaseLanguageModel"},{"id":"conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever","label":"Vector Store Retriever","name":"vectorStoreRetriever","type":"BaseRetriever"},{"description":"If left empty, a default BufferMemory will be used","id":"conversationalRetrievalQAChain_0-input-memory-BaseMemory","label":"Memory","name":"memory","optional":true,"type":"BaseMemory"}],"inputParams":[{"id":"conversationalRetrievalQAChain_0-input-returnSourceDocuments-boolean","label":"Return Source Documents","name":"returnSourceDocuments","optional":true,"type":"boolean"},{"additionalParams":true,"id":"conversationalRetrievalQAChain_0-input-systemMessagePrompt-string","label":"System Message","name":"systemMessagePrompt","optional":true,"placeholder":"I want you to act as a document that I am having a conversation with. Your name is \"AI Assistant\". You will provide me with answers from the given info. If the answer is not included, say exactly \"Hmm, I am not sure.\" and stop after that. Refuse to answer any question not about the info. Never break character.","rows":4,"type":"string"},{"additionalParams":true,"id":"conversationalRetrievalQAChain_0-input-chainOption-options","label":"Chain Option","name":"chainOption","optional":true,"options":[{"description":"Suitable for QA tasks over larger documents and can run the preprocessing step in parallel, reducing the running time","label":"MapReduceDocumentsChain","name":"map_reduce"},{"description":"Suitable for QA tasks over a large number of documents.","label":"RefineDocumentsChain","name":"refine"},{"description":"Suitable for QA tasks over a small number of documents.","label":"StuffDocumentsChain","name":"stuff"}],"type":"options"}],"inputs":{"chainOption":"","memory":"","model":"{{chatOpenAI_0.data.instance}}","returnSourceDocuments":"","systemMessagePrompt":"","vectorStoreRetriever":"{{memoryVectorStore_0.data.instance}}"},"label":"Conversational Retrieval QA Chain","name":"conversationalRetrievalQAChain","outputAnchors":[{"id":"conversationalRetrievalQAChain_0-output-conversationalRetrievalQAChain-ConversationalRetrievalQAChain|BaseChain|Runnable","label":"ConversationalRetrievalQAChain","name":"conversationalRetrievalQAChain","type":"ConversationalRetrievalQAChain | BaseChain | Runnable"}],"outputs":{},"selected":true,"type":"ConversationalRetrievalQAChain","version":1},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"2995","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/37714ead-e1ad-4045-8a9d-f375cdf713dc","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-config"},"timestamp":"2024-02-26 15:16:09"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-config","package":"server","request":{"body":{"baseClasses":["ConversationalRetrievalQAChain","BaseChain","Runnable"],"category":"Chains","description":"Document QA - built on RetrievalQAChain to provide a chat history component","filePath":"/usr/src/packages/node_modules/flowise-components/dist/nodes/chains/ConversationalRetrievalQAChain/ConversationalRetrievalQAChain.js","icon":"/usr/src/packages/node_modules/flowise-components/dist/nodes/chains/ConversationalRetrievalQAChain/qa.svg","id":"conversationalRetrievalQAChain_0","inputAnchors":[{"id":"conversationalRetrievalQAChain_0-input-model-BaseLanguageModel","label":"Language Model","name":"model","type":"BaseLanguageModel"},{"id":"conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever","label":"Vector Store Retriever","name":"vectorStoreRetriever","type":"BaseRetriever"},{"description":"If left empty, a default BufferMemory will be used","id":"conversationalRetrievalQAChain_0-input-memory-BaseMemory","label":"Memory","name":"memory","optional":true,"type":"BaseMemory"}],"inputParams":[{"id":"conversationalRetrievalQAChain_0-input-returnSourceDocuments-boolean","label":"Return Source Documents","name":"returnSourceDocuments","optional":true,"type":"boolean"},{"additionalParams":true,"id":"conversationalRetrievalQAChain_0-input-systemMessagePrompt-string","label":"System Message","name":"systemMessagePrompt","optional":true,"placeholder":"I want you to act as a document that I am having a conversation with. Your name is \"AI Assistant\". You will provide me with answers from the given info. If the answer is not included, say exactly \"Hmm, I am not sure.\" and stop after that. Refuse to answer any question not about the info. Never break character.","rows":4,"type":"string"},{"additionalParams":true,"id":"conversationalRetrievalQAChain_0-input-chainOption-options","label":"Chain Option","name":"chainOption","optional":true,"options":[{"description":"Suitable for QA tasks over larger documents and can run the preprocessing step in parallel, reducing the running time","label":"MapReduceDocumentsChain","name":"map_reduce"},{"description":"Suitable for QA tasks over a large number of documents.","label":"RefineDocumentsChain","name":"refine"},{"description":"Suitable for QA tasks over a small number of documents.","label":"StuffDocumentsChain","name":"stuff"}],"type":"options"}],"inputs":{"chainOption":"","memory":"","model":"{{chatOpenAI_0.data.instance}}","returnSourceDocuments":"","systemMessagePrompt":"","vectorStoreRetriever":"{{memoryVectorStore_0.data.instance}}"},"label":"Conversational Retrieval QA Chain","name":"conversationalRetrievalQAChain","outputAnchors":[{"id":"conversationalRetrievalQAChain_0-output-conversationalRetrievalQAChain-ConversationalRetrievalQAChain|BaseChain|Runnable","label":"ConversationalRetrievalQAChain","name":"conversationalRetrievalQAChain","type":"ConversationalRetrievalQAChain | BaseChain | Runnable"}],"outputs":{},"selected":true,"type":"ConversationalRetrievalQAChain","version":1},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"2995","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/37714ead-e1ad-4045-8a9d-f375cdf713dc","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-config"},"timestamp":"2024-02-26 15:21:58"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-config","package":"server","request":{"body":{"baseClasses":["ConversationalRetrievalQAChain","BaseChain","Runnable"],"category":"Chains","description":"Document QA - built on RetrievalQAChain to provide a chat history component","filePath":"/usr/src/packages/node_modules/flowise-components/dist/nodes/chains/ConversationalRetrievalQAChain/ConversationalRetrievalQAChain.js","icon":"/usr/src/packages/node_modules/flowise-components/dist/nodes/chains/ConversationalRetrievalQAChain/qa.svg","id":"conversationalRetrievalQAChain_0","inputAnchors":[{"id":"conversationalRetrievalQAChain_0-input-model-BaseLanguageModel","label":"Language Model","name":"model","type":"BaseLanguageModel"},{"id":"conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever","label":"Vector Store Retriever","name":"vectorStoreRetriever","type":"BaseRetriever"},{"description":"If left empty, a default BufferMemory will be used","id":"conversationalRetrievalQAChain_0-input-memory-BaseMemory","label":"Memory","name":"memory","optional":true,"type":"BaseMemory"}],"inputParams":[{"id":"conversationalRetrievalQAChain_0-input-returnSourceDocuments-boolean","label":"Return Source Documents","name":"returnSourceDocuments","optional":true,"type":"boolean"},{"additionalParams":true,"id":"conversationalRetrievalQAChain_0-input-systemMessagePrompt-string","label":"System Message","name":"systemMessagePrompt","optional":true,"placeholder":"I want you to act as a document that I am having a conversation with. Your name is \"AI Assistant\". You will provide me with answers from the given info. If the answer is not included, say exactly \"Hmm, I am not sure.\" and stop after that. Refuse to answer any question not about the info. Never break character.","rows":4,"type":"string"},{"additionalParams":true,"id":"conversationalRetrievalQAChain_0-input-chainOption-options","label":"Chain Option","name":"chainOption","optional":true,"options":[{"description":"Suitable for QA tasks over larger documents and can run the preprocessing step in parallel, reducing the running time","label":"MapReduceDocumentsChain","name":"map_reduce"},{"description":"Suitable for QA tasks over a large number of documents.","label":"RefineDocumentsChain","name":"refine"},{"description":"Suitable for QA tasks over a small number of documents.","label":"StuffDocumentsChain","name":"stuff"}],"type":"options"}],"inputs":{"chainOption":"","memory":"","model":"{{chatOpenAI_0.data.instance}}","returnSourceDocuments":"","systemMessagePrompt":"","vectorStoreRetriever":"{{memoryVectorStore_0.data.instance}}"},"label":"Conversational Retrieval QA Chain","name":"conversationalRetrievalQAChain","outputAnchors":[{"id":"conversationalRetrievalQAChain_0-output-conversationalRetrievalQAChain-ConversationalRetrievalQAChain|BaseChain|Runnable","label":"ConversationalRetrievalQAChain","name":"conversationalRetrievalQAChain","type":"ConversationalRetrievalQAChain | BaseChain | Runnable"}],"outputs":{},"selected":false,"type":"ConversationalRetrievalQAChain","version":1},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"2996","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/37714ead-e1ad-4045-8a9d-f375cdf713dc","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-config"},"timestamp":"2024-02-26 15:27:37"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/37714ead-e1ad-4045-8a9d-f375cdf713dc","package":"server","request":{"body":{"history":[],"question":"hi","socketIOClientId":"7jiNPaKOFdgjdKCdAAAP"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"72","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/37714ead-e1ad-4045-8a9d-f375cdf713dc","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/37714ead-e1ad-4045-8a9d-f375cdf713dc"},"timestamp":"2024-02-26 15:27:52"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/37714ead-e1ad-4045-8a9d-f375cdf713dc","package":"server","request":{"body":{"history":[],"question":"hi","socketIOClientId":"T_RsoyWqOvWq4OwcAAAR"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"72","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/37714ead-e1ad-4045-8a9d-f375cdf713dc","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/37714ead-e1ad-4045-8a9d-f375cdf713dc"},"timestamp":"2024-02-26 15:28:16"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/37714ead-e1ad-4045-8a9d-f375cdf713dc","package":"server","request":{"body":{"history":[{"message":"hi","type":"userMessage"},{"message":"Error: OpenAI or Azure OpenAI API key not found","type":"apiMessage"}],"question":"k[p","socketIOClientId":"T_RsoyWqOvWq4OwcAAAR"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"192","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/37714ead-e1ad-4045-8a9d-f375cdf713dc","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/37714ead-e1ad-4045-8a9d-f375cdf713dc"},"timestamp":"2024-02-26 15:28:20"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-config","package":"server","request":{"body":{"baseClasses":["ConversationalRetrievalQAChain","BaseChain","Runnable"],"category":"Chains","description":"Document QA - built on RetrievalQAChain to provide a chat history component","filePath":"/usr/src/packages/node_modules/flowise-components/dist/nodes/chains/ConversationalRetrievalQAChain/ConversationalRetrievalQAChain.js","icon":"/usr/src/packages/node_modules/flowise-components/dist/nodes/chains/ConversationalRetrievalQAChain/qa.svg","id":"conversationalRetrievalQAChain_0","inputAnchors":[{"id":"conversationalRetrievalQAChain_0-input-model-BaseLanguageModel","label":"Language Model","name":"model","type":"BaseLanguageModel"},{"id":"conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever","label":"Vector Store Retriever","name":"vectorStoreRetriever","type":"BaseRetriever"},{"description":"If left empty, a default BufferMemory will be used","id":"conversationalRetrievalQAChain_0-input-memory-BaseMemory","label":"Memory","name":"memory","optional":true,"type":"BaseMemory"}],"inputParams":[{"id":"conversationalRetrievalQAChain_0-input-returnSourceDocuments-boolean","label":"Return Source Documents","name":"returnSourceDocuments","optional":true,"type":"boolean"},{"additionalParams":true,"id":"conversationalRetrievalQAChain_0-input-systemMessagePrompt-string","label":"System Message","name":"systemMessagePrompt","optional":true,"placeholder":"I want you to act as a document that I am having a conversation with. Your name is \"AI Assistant\". You will provide me with answers from the given info. If the answer is not included, say exactly \"Hmm, I am not sure.\" and stop after that. Refuse to answer any question not about the info. Never break character.","rows":4,"type":"string"},{"additionalParams":true,"id":"conversationalRetrievalQAChain_0-input-chainOption-options","label":"Chain Option","name":"chainOption","optional":true,"options":[{"description":"Suitable for QA tasks over larger documents and can run the preprocessing step in parallel, reducing the running time","label":"MapReduceDocumentsChain","name":"map_reduce"},{"description":"Suitable for QA tasks over a large number of documents.","label":"RefineDocumentsChain","name":"refine"},{"description":"Suitable for QA tasks over a small number of documents.","label":"StuffDocumentsChain","name":"stuff"}],"type":"options"}],"inputs":{"chainOption":"","memory":"","model":"{{chatOpenAI_0.data.instance}}","returnSourceDocuments":"","systemMessagePrompt":"","vectorStoreRetriever":"{{pinecone_0.data.instance}}"},"label":"Conversational Retrieval QA Chain","name":"conversationalRetrievalQAChain","outputAnchors":[{"id":"conversationalRetrievalQAChain_0-output-conversationalRetrievalQAChain-ConversationalRetrievalQAChain|BaseChain|Runnable","label":"ConversationalRetrievalQAChain","name":"conversationalRetrievalQAChain","type":"ConversationalRetrievalQAChain | BaseChain | Runnable"}],"outputs":{},"selected":false,"type":"ConversationalRetrievalQAChain","version":1},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"2987","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-config"},"timestamp":"2024-02-26 17:49:12"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/vector/internal-upsert/6e707773-c5b0-4278-acd2-3478f031cf69","package":"server","request":{"body":{"stopNodeId":"pinecone_0"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"27","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/6e707773-c5b0-4278-acd2-3478f031cf69","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/vector/internal-upsert/6e707773-c5b0-4278-acd2-3478f031cf69"},"timestamp":"2024-02-29 17:45:01"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/vector/internal-upsert/6e707773-c5b0-4278-acd2-3478f031cf69","package":"server","request":{"body":{"stopNodeId":"pinecone_0"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"27","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/6e707773-c5b0-4278-acd2-3478f031cf69","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/vector/internal-upsert/6e707773-c5b0-4278-acd2-3478f031cf69"},"timestamp":"2024-02-29 17:45:45"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/vector/internal-upsert/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"stopNodeId":"pinecone_0"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"27","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/vector/internal-upsert/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 11:14:43"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/vector/internal-upsert/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"stopNodeId":"pinecone_0"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"27","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/vector/internal-upsert/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 12:21:30"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[],"question":"hi","socketIOClientId":"lMFQULY1d7T8-LvAAAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"72","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 12:27:52"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[{"message":"hi","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"}],"question":"Hi tell me about java","socketIOClientId":"lMFQULY1d7T8-LvAAAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"212","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 12:28:23"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[{"message":"hi","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"Hi tell me about java","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"}],"question":"Hi tell me about java","socketIOClientId":"lMFQULY1d7T8-LvAAAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"353","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 12:28:40"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[],"question":"hi","socketIOClientId":"kZbA4Szd0PTsS4vyAAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"72","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 12:38:27"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[],"question":"sdjkfghsfukd","socketIOClientId":"80_1wcuyasbnjh4AAAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"82","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 12:41:11"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[],"question":"hi, tell me about java","socketIOClientId":"ue_q0_fG8wlD7whQAAAF"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"92","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 12:42:22"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[{"message":"hi, tell me about java","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"}],"question":"sdfklaghfkjal","socketIOClientId":"ue_q0_fG8wlD7whQAAAF"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"224","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 12:42:25"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[],"question":"fdjsxdtxrf","socketIOClientId":"cw4puzVCHkGV9zF9AAAH"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"80","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 12:42:43"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[{"message":"fdjsxdtxrf","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"}],"question":"fgdhtsgag","socketIOClientId":"cw4puzVCHkGV9zF9AAAH"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"208","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 12:42:46"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[],"question":"dfgsfgafdzgjdfds","socketIOClientId":"qONTpZB8vtG63_rRAAAJ"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"86","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 12:43:12"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[{"message":"dfgsfgafdzgjdfds","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"}],"question":"fda;gjkfgsdz;vfadbgvjkbfdavjkbfkdhkngklsnfjka","socketIOClientId":"qONTpZB8vtG63_rRAAAJ"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"250","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 12:43:16"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/6e707773-c5b0-4278-acd2-3478f031cf69","package":"server","request":{"body":{"history":[],"question":"hi tell me something about chatgpt","socketIOClientId":"j_FIvQwmXhkB7fxQAAAL"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"104","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/6e707773-c5b0-4278-acd2-3478f031cf69","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/6e707773-c5b0-4278-acd2-3478f031cf69"},"timestamp":"2024-03-01 12:43:43"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[],"question":"what are your hours of operation","socketIOClientId":"eiOAU5Wi4aQf5yfmAAAN"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"102","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 12:59:16"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-load-method/openAIAssistant","package":"server","request":{"body":{"baseClasses":["OpenAIAssistant"],"category":"Agents","description":"An agent that uses OpenAI Assistant API to pick the tool and args to call","filePath":"/usr/src/packages/node_modules/flowise-components/dist/nodes/agents/OpenAIAssistant/OpenAIAssistant.js","icon":"/usr/src/packages/node_modules/flowise-components/dist/nodes/agents/OpenAIAssistant/assistant.svg","id":"openAIAssistant_0","inputAnchors":[{"id":"openAIAssistant_0-input-tools-Tool","label":"Allowed Tools","list":true,"name":"tools","type":"Tool"},{"description":"Detect text that could generate harmful output and prevent it from being sent to the language model","id":"openAIAssistant_0-input-inputModeration-Moderation","label":"Input Moderation","list":true,"name":"inputModeration","optional":true,"type":"Moderation"}],"inputParams":[{"id":"openAIAssistant_0-input-selectedAssistant-asyncOptions","label":"Select Assistant","loadMethod":"listAssistants","name":"selectedAssistant","type":"asyncOptions"},{"additionalParams":true,"description":"Messages can contain text, images, or files. In some cases, you may want to prevent others from downloading the files. Learn more from OpenAI File Annotation <a target=\"_blank\" href=\"https://platform.openai.com/docs/assistants/how-it-works/managing-threads-and-messages\">docs</a>","id":"openAIAssistant_0-input-disableFileDownload-boolean","label":"Disable File Download","name":"disableFileDownload","optional":true,"type":"boolean"}],"inputs":{"disableFileDownload":true,"inputModeration":"","selectedAssistant":"37cab857-c7ca-4938-88e6-c0f29789f339","tools":["{{calculator_0.data.instance}}"]},"label":"OpenAI Assistant","loadMethod":"listAssistants","loadMethods":{},"memoryMethods":{},"name":"openAIAssistant","outputAnchors":[{"id":"openAIAssistant_0-output-openAIAssistant-OpenAIAssistant","label":"OpenAIAssistant","name":"openAIAssistant","type":"OpenAIAssistant"}],"outputs":{},"selected":false,"type":"OpenAIAssistant","version":3},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"1966","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/0ebb62bb-24f2-46aa-a808-d96bf0d06903","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-load-method/openAIAssistant"},"timestamp":"2024-03-01 12:59:24"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/0ebb62bb-24f2-46aa-a808-d96bf0d06903","package":"server","request":{"body":{"history":[],"question":"2=@?"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"32","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/0ebb62bb-24f2-46aa-a808-d96bf0d06903","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/0ebb62bb-24f2-46aa-a808-d96bf0d06903"},"timestamp":"2024-03-01 12:59:28"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/0ebb62bb-24f2-46aa-a808-d96bf0d06903","package":"server","request":{"body":{"history":[{"message":"2=@?","type":"userMessage"},{"message":"OpenAI ApiKey not found","type":"apiMessage"}],"question":"2+2?"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"129","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/0ebb62bb-24f2-46aa-a808-d96bf0d06903","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/0ebb62bb-24f2-46aa-a808-d96bf0d06903"},"timestamp":"2024-03-01 12:59:31"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"chatId":"4f84ba1d-da96-4fc5-8244-d190f1cd71bd","history":[{"message":"What Is AMD?","type":"userMessage"},{"message":"Can you look retrieve the text file?","type":"userMessage"},{"message":"Please fetch Vision Relief U.txt","type":"userMessage"},{"message":"Can you tell if the text file is saved in Pinecone vector database?","type":"userMessage"},{"message":"AMD, or Advanced Micro Devices, is a semiconductor company that specializes in the design and manufacture of computer processors, graphics cards, and other technology products.","type":"apiMessage"},{"message":"Yes, I can retrieve the text file for you.","type":"apiMessage"},{"message":"Yes, I can fetch the text file named \"Vision Relief U.txt\" if it exists and I have access to it.","type":"apiMessage"},{"message":"I don't know.","type":"apiMessage"}],"question":"hi","socketIOClientId":"W5erIb0zB45qdrPNAAAR"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"879","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-01 12:59:42"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"chatId":"4f84ba1d-da96-4fc5-8244-d190f1cd71bd","history":[{"message":"What Is AMD?","type":"userMessage"},{"message":"Can you look retrieve the text file?","type":"userMessage"},{"message":"Please fetch Vision Relief U.txt","type":"userMessage"},{"message":"Can you tell if the text file is saved in Pinecone vector database?","type":"userMessage"},{"message":"AMD, or Advanced Micro Devices, is a semiconductor company that specializes in the design and manufacture of computer processors, graphics cards, and other technology products.","type":"apiMessage"},{"message":"Yes, I can retrieve the text file for you.","type":"apiMessage"},{"message":"Yes, I can fetch the text file named \"Vision Relief U.txt\" if it exists and I have access to it.","type":"apiMessage"},{"message":"I don't know.","type":"apiMessage"},{"message":"hi","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"}],"question":"2+2=?","socketIOClientId":"W5erIb0zB45qdrPNAAAR"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"1004","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-01 12:59:47"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/vector/internal-upsert/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"stopNodeId":"pinecone_0"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"27","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/vector/internal-upsert/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-01 14:11:33"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/vector/internal-upsert/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"stopNodeId":"pinecone_0"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"27","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/vector/internal-upsert/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-01 14:11:36"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/vector/internal-upsert/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"stopNodeId":"pinecone_0"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"27","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/vector/internal-upsert/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-01 14:11:37"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/vector/internal-upsert/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"stopNodeId":"pinecone_0"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"27","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/vector/internal-upsert/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-01 14:11:38"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/vector/internal-upsert/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"stopNodeId":"pinecone_0"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"27","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/vector/internal-upsert/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-01 16:12:53"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"chatId":"4f84ba1d-da96-4fc5-8244-d190f1cd71bd","history":[{"message":"What Is AMD?","type":"userMessage"},{"message":"Can you look retrieve the text file?","type":"userMessage"},{"message":"Please fetch Vision Relief U.txt","type":"userMessage"},{"message":"Can you tell if the text file is saved in Pinecone vector database?","type":"userMessage"},{"message":"AMD, or Advanced Micro Devices, is a semiconductor company that specializes in the design and manufacture of computer processors, graphics cards, and other technology products.","type":"apiMessage"},{"message":"Yes, I can retrieve the text file for you.","type":"apiMessage"},{"message":"Yes, I can fetch the text file named \"Vision Relief U.txt\" if it exists and I have access to it.","type":"apiMessage"},{"message":"I don't know.","type":"apiMessage"}],"question":"5etyxsy","socketIOClientId":"smmxLhrN6LYQ4FMUAAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"884","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-01 16:17:43"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"chatId":"4f84ba1d-da96-4fc5-8244-d190f1cd71bd","history":[{"message":"What Is AMD?","type":"userMessage"},{"message":"Can you look retrieve the text file?","type":"userMessage"},{"message":"Please fetch Vision Relief U.txt","type":"userMessage"},{"message":"Can you tell if the text file is saved in Pinecone vector database?","type":"userMessage"},{"message":"AMD, or Advanced Micro Devices, is a semiconductor company that specializes in the design and manufacture of computer processors, graphics cards, and other technology products.","type":"apiMessage"},{"message":"Yes, I can retrieve the text file for you.","type":"apiMessage"},{"message":"Yes, I can fetch the text file named \"Vision Relief U.txt\" if it exists and I have access to it.","type":"apiMessage"},{"message":"I don't know.","type":"apiMessage"}],"question":"hkgk","socketIOClientId":"eDcWOsJLrWR-9TqkAAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"881","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-01 16:30:25"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"chatId":"4f84ba1d-da96-4fc5-8244-d190f1cd71bd","history":[{"message":"What Is AMD?","type":"userMessage"},{"message":"Can you look retrieve the text file?","type":"userMessage"},{"message":"Please fetch Vision Relief U.txt","type":"userMessage"},{"message":"Can you tell if the text file is saved in Pinecone vector database?","type":"userMessage"},{"message":"AMD, or Advanced Micro Devices, is a semiconductor company that specializes in the design and manufacture of computer processors, graphics cards, and other technology products.","type":"apiMessage"},{"message":"Yes, I can retrieve the text file for you.","type":"apiMessage"},{"message":"Yes, I can fetch the text file named \"Vision Relief U.txt\" if it exists and I have access to it.","type":"apiMessage"},{"message":"I don't know.","type":"apiMessage"},{"message":"hkgk","type":"userMessage"},{"message":"connect EHOSTUNREACH 192.168.75.171:5432","type":"apiMessage"}],"question":"fdg","socketIOClientId":"eDcWOsJLrWR-9TqkAAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"995","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-01 16:30:27"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"chatId":"4f84ba1d-da96-4fc5-8244-d190f1cd71bd","history":[{"message":"What Is AMD?","type":"userMessage"},{"message":"Can you look retrieve the text file?","type":"userMessage"},{"message":"Please fetch Vision Relief U.txt","type":"userMessage"},{"message":"Can you tell if the text file is saved in Pinecone vector database?","type":"userMessage"},{"message":"AMD, or Advanced Micro Devices, is a semiconductor company that specializes in the design and manufacture of computer processors, graphics cards, and other technology products.","type":"apiMessage"},{"message":"Yes, I can retrieve the text file for you.","type":"apiMessage"},{"message":"Yes, I can fetch the text file named \"Vision Relief U.txt\" if it exists and I have access to it.","type":"apiMessage"},{"message":"I don't know.","type":"apiMessage"}],"question":"lglhh","socketIOClientId":"Z5k5SI89YH1rKVdYAAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"882","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-01 16:34:40"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"chatId":"4f84ba1d-da96-4fc5-8244-d190f1cd71bd","history":[{"message":"What Is AMD?","type":"userMessage"},{"message":"Can you look retrieve the text file?","type":"userMessage"},{"message":"Please fetch Vision Relief U.txt","type":"userMessage"},{"message":"Can you tell if the text file is saved in Pinecone vector database?","type":"userMessage"},{"message":"AMD, or Advanced Micro Devices, is a semiconductor company that specializes in the design and manufacture of computer processors, graphics cards, and other technology products.","type":"apiMessage"},{"message":"Yes, I can retrieve the text file for you.","type":"apiMessage"},{"message":"Yes, I can fetch the text file named \"Vision Relief U.txt\" if it exists and I have access to it.","type":"apiMessage"},{"message":"I don't know.","type":"apiMessage"}],"question":"sdmvavsbd vmndzc","socketIOClientId":"XGYrieJLUlT-1AQIAAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"893","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-01 16:39:33"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"chatId":"4f84ba1d-da96-4fc5-8244-d190f1cd71bd","history":[{"message":"What Is AMD?","type":"userMessage"},{"message":"Can you look retrieve the text file?","type":"userMessage"},{"message":"Please fetch Vision Relief U.txt","type":"userMessage"},{"message":"Can you tell if the text file is saved in Pinecone vector database?","type":"userMessage"},{"message":"AMD, or Advanced Micro Devices, is a semiconductor company that specializes in the design and manufacture of computer processors, graphics cards, and other technology products.","type":"apiMessage"},{"message":"Yes, I can retrieve the text file for you.","type":"apiMessage"},{"message":"Yes, I can fetch the text file named \"Vision Relief U.txt\" if it exists and I have access to it.","type":"apiMessage"},{"message":"I don't know.","type":"apiMessage"}],"question":"ojihjghpk[l","socketIOClientId":"hArInSz68N7xmmnSAAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"888","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-01 16:44:14"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[],"question":"aklsdfj;klvcfdj","socketIOClientId":"hfC6VfIR4JpI2datAAAF"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"85","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 16:45:29"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[{"message":"aklsdfj;klvcfdj","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"}],"question":"dffhsdfjhgddj","socketIOClientId":"hfC6VfIR4JpI2datAAAF"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"217","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 16:45:32"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[{"message":"aklsdfj;klvcfdj","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"dffhsdfjhgddj","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"}],"question":"hioui","socketIOClientId":"hfC6VfIR4JpI2datAAAF"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"342","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 16:45:34"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[{"message":"aklsdfj;klvcfdj","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"dffhsdfjhgddj","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"hioui","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"}],"question":",/l","socketIOClientId":"hfC6VfIR4JpI2datAAAF"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"465","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 17:12:24"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[{"message":"aklsdfj;klvcfdj","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"dffhsdfjhgddj","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"hioui","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":",/l","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"}],"question":"fgj","socketIOClientId":"xV8vluLEVsRE5EvjAAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"588","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 17:12:33"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[{"message":"aklsdfj;klvcfdj","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"dffhsdfjhgddj","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"hioui","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":",/l","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"fgj","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"}],"question":"t","socketIOClientId":"xV8vluLEVsRE5EvjAAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"709","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 17:12:36"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[{"message":"aklsdfj;klvcfdj","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"dffhsdfjhgddj","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"hioui","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":",/l","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"fgj","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"t","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"}],"question":"i","socketIOClientId":"xV8vluLEVsRE5EvjAAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"830","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 17:12:38"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[{"message":"aklsdfj;klvcfdj","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"dffhsdfjhgddj","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"hioui","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":",/l","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"fgj","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"t","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"},{"message":"i","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"}],"question":"juiohuiofguifgyusxsrtwarewerygrtfgj","socketIOClientId":"xV8vluLEVsRE5EvjAAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"985","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-01 17:12:43"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"regsrdfhgszfgh","socketIOClientId":"4enRplRL3T4kj5DlAAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"84","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-01 17:13:10"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"srtushxrtc","socketIOClientId":"pnfe5dYcGPbOvxWiAAAF"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"80","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-01 17:21:08"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"tjsdfghghjghkjkaa","socketIOClientId":"rX6HIpgoNpyW5PWfAAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"87","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-01 17:42:06"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"sefgdhjkfgdsadfghjkhgf","socketIOClientId":"U-97wLkFlTQWzWC7AAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"92","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-01 17:47:06"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":";lkjghfdxxchbjnklm;jhk","socketIOClientId":"W8fJPTcC1v16-eL9AAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"92","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-01 17:53:09"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"sdgfdhgsfrghs","socketIOClientId":"RESP9AK6lp5u3Sp4AAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"83","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-01 19:22:47"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"hi","socketIOClientId":"O2jzxk9uXJnT9HQYAAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"72","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-01 19:23:10"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/vector/internal-upsert/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"stopNodeId":"pinecone_0"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"27","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/vector/internal-upsert/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-04 11:26:13"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[],"question":"dxfghcbjnklm;kj","socketIOClientId":"MLfRhgMYna63XRl6AAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"85","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-04 11:26:20"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"chatId":"4f84ba1d-da96-4fc5-8244-d190f1cd71bd","history":[{"message":"What Is AMD?","type":"userMessage"},{"message":"Can you look retrieve the text file?","type":"userMessage"},{"message":"Please fetch Vision Relief U.txt","type":"userMessage"},{"message":"Can you tell if the text file is saved in Pinecone vector database?","type":"userMessage"},{"message":"AMD, or Advanced Micro Devices, is a semiconductor company that specializes in the design and manufacture of computer processors, graphics cards, and other technology products.","type":"apiMessage"},{"message":"Yes, I can retrieve the text file for you.","type":"apiMessage"},{"message":"Yes, I can fetch the text file named \"Vision Relief U.txt\" if it exists and I have access to it.","type":"apiMessage"},{"message":"I don't know.","type":"apiMessage"}],"question":"[ojihgfhjk","socketIOClientId":"eg4ZFRsbCdBe79ymAAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"887","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-04 11:26:34"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/6e707773-c5b0-4278-acd2-3478f031cf69","package":"server","request":{"body":{"history":[],"question":"[poiuytfghjkl;","socketIOClientId":"XRyaGDrs0mDa5UU2AAAF"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"84","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/6e707773-c5b0-4278-acd2-3478f031cf69","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/6e707773-c5b0-4278-acd2-3478f031cf69"},"timestamp":"2024-03-04 13:29:49"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/6e707773-c5b0-4278-acd2-3478f031cf69","package":"server","request":{"body":{"history":[{"message":"[poiuytfghjkl;","type":"userMessage"},{"message":"Error: OpenAI or Azure OpenAI API key not found","type":"apiMessage"}],"question":"[poiujokl","socketIOClientId":"XRyaGDrs0mDa5UU2AAAF"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"210","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/6e707773-c5b0-4278-acd2-3478f031cf69","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/6e707773-c5b0-4278-acd2-3478f031cf69"},"timestamp":"2024-03-04 13:29:51"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/6e707773-c5b0-4278-acd2-3478f031cf69","package":"server","request":{"body":{"history":[{"message":"[poiuytfghjkl;","type":"userMessage"},{"message":"Error: OpenAI or Azure OpenAI API key not found","type":"apiMessage"},{"message":"[poiujokl","type":"userMessage"},{"message":"Error: OpenAI or Azure OpenAI API key not found","type":"apiMessage"}],"question":"fh","socketIOClientId":"XRyaGDrs0mDa5UU2AAAF"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"330","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/6e707773-c5b0-4278-acd2-3478f031cf69","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/6e707773-c5b0-4278-acd2-3478f031cf69"},"timestamp":"2024-03-04 13:29:58"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/6e707773-c5b0-4278-acd2-3478f031cf69","package":"server","request":{"body":{"history":[],"question":"jgh","socketIOClientId":"Sg1gduj5srLAP3EOAAAH"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/6e707773-c5b0-4278-acd2-3478f031cf69","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/6e707773-c5b0-4278-acd2-3478f031cf69"},"timestamp":"2024-03-04 13:36:19"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/e9c96cc5-9904-413d-a14d-8119ccf71764","package":"server","request":{"body":{"history":[],"question":"wertfgyhfd"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"38","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/e9c96cc5-9904-413d-a14d-8119ccf71764","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/e9c96cc5-9904-413d-a14d-8119ccf71764"},"timestamp":"2024-03-04 13:56:32"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-load-method/openAIAssistant","package":"server","request":{"body":{"baseClasses":["OpenAIAssistant"],"category":"Agents","description":"An agent that uses OpenAI Assistant API to pick the tool and args to call","filePath":"/usr/src/packages/node_modules/flowise-components/dist/nodes/agents/OpenAIAssistant/OpenAIAssistant.js","icon":"/usr/src/packages/node_modules/flowise-components/dist/nodes/agents/OpenAIAssistant/assistant.svg","id":"openAIAssistant_0","inputAnchors":[{"id":"openAIAssistant_0-input-tools-Tool","label":"Allowed Tools","list":true,"name":"tools","type":"Tool"},{"description":"Detect text that could generate harmful output and prevent it from being sent to the language model","id":"openAIAssistant_0-input-inputModeration-Moderation","label":"Input Moderation","list":true,"name":"inputModeration","optional":true,"type":"Moderation"}],"inputParams":[{"id":"openAIAssistant_0-input-selectedAssistant-asyncOptions","label":"Select Assistant","loadMethod":"listAssistants","name":"selectedAssistant","type":"asyncOptions"},{"additionalParams":true,"description":"Messages can contain text, images, or files. In some cases, you may want to prevent others from downloading the files. Learn more from OpenAI File Annotation <a target=\"_blank\" href=\"https://platform.openai.com/docs/assistants/how-it-works/managing-threads-and-messages\">docs</a>","id":"openAIAssistant_0-input-disableFileDownload-boolean","label":"Disable File Download","name":"disableFileDownload","optional":true,"type":"boolean"}],"inputs":{"disableFileDownload":true,"inputModeration":"","selectedAssistant":"37cab857-c7ca-4938-88e6-c0f29789f339","tools":["{{calculator_0.data.instance}}"]},"label":"OpenAI Assistant","loadMethod":"listAssistants","loadMethods":{},"memoryMethods":{},"name":"openAIAssistant","outputAnchors":[{"id":"openAIAssistant_0-output-openAIAssistant-OpenAIAssistant","label":"OpenAIAssistant","name":"openAIAssistant","type":"OpenAIAssistant"}],"outputs":{},"selected":false,"type":"OpenAIAssistant","version":3},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"1966","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/0ebb62bb-24f2-46aa-a808-d96bf0d06903","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-load-method/openAIAssistant"},"timestamp":"2024-03-04 13:56:37"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/0ebb62bb-24f2-46aa-a808-d96bf0d06903","package":"server","request":{"body":{"history":[],"question":"hjkjdjtazewdsafgfdjhkxxru655th"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"58","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/0ebb62bb-24f2-46aa-a808-d96bf0d06903","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/0ebb62bb-24f2-46aa-a808-d96bf0d06903"},"timestamp":"2024-03-04 13:56:43"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/f3b073ad-67ef-46be-9efc-d8b79121544f","package":"server","request":{"body":{"history":[],"question":"Where are we located?","socketIOClientId":"bMmXmvYXFoJhNoTuAAAN"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"91","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/f3b073ad-67ef-46be-9efc-d8b79121544f","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/f3b073ad-67ef-46be-9efc-d8b79121544f"},"timestamp":"2024-03-04 13:57:00"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/f3b073ad-67ef-46be-9efc-d8b79121544f","package":"server","request":{"body":{"history":[],"question":"What do we do?","socketIOClientId":"bvgivIAoX9gWxONyAAAP"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"84","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/f3b073ad-67ef-46be-9efc-d8b79121544f","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/f3b073ad-67ef-46be-9efc-d8b79121544f"},"timestamp":"2024-03-04 13:57:18"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/vector/internal-upsert/f3b073ad-67ef-46be-9efc-d8b79121544f","package":"server","request":{"body":{"stopNodeId":"pinecone_0"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"27","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/f3b073ad-67ef-46be-9efc-d8b79121544f","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/vector/internal-upsert/f3b073ad-67ef-46be-9efc-d8b79121544f"},"timestamp":"2024-03-04 15:08:22"}
{"level":"info","message":"üñä PUT /api/v1/chatflows/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"chatflow":{"analytic":"{}","apiConfig":null,"apikeyid":"97a503249cb8e0d53a112d68c5ecee87","category":null,"chatbotConfig":"{\"starterPrompts\":{\"0\":{\"prompt\":\"new\"}}}","createdDate":"2024-01-27T17:47:33.024Z","deployed":false,"flowData":"{\"nodes\":[{\"width\":300,\"height\":330,\"id\":\"openAIEmbeddings_0\",\"position\":{\"x\":795.6162477805387,\"y\":603.260214150876},\"type\":\"customNode\",\"data\":{\"id\":\"openAIEmbeddings_0\",\"label\":\"OpenAI Embeddings\",\"version\":1,\"name\":\"openAIEmbeddings\",\"type\":\"OpenAIEmbeddings\",\"baseClasses\":[\"OpenAIEmbeddings\",\"Embeddings\"],\"category\":\"Embeddings\",\"description\":\"OpenAI API to generate embeddings for a given text\",\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"openAIEmbeddings_0-input-credential-credential\"},{\"label\":\"Strip New Lines\",\"name\":\"stripNewLines\",\"type\":\"boolean\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAIEmbeddings_0-input-stripNewLines-boolean\"},{\"label\":\"Batch Size\",\"name\":\"batchSize\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAIEmbeddings_0-input-batchSize-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAIEmbeddings_0-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAIEmbeddings_0-input-basepath-string\"}],\"inputAnchors\":[],\"inputs\":{\"stripNewLines\":\"\",\"batchSize\":\"\",\"timeout\":\"\",\"basepath\":\"\"},\"outputAnchors\":[{\"id\":\"openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings\",\"name\":\"openAIEmbeddings\",\"label\":\"OpenAIEmbeddings\",\"type\":\"OpenAIEmbeddings | Embeddings\"}],\"outputs\":{},\"selected\":false,\"credential\":\"7c194259-34c9-4d9f-8cd8-2234ac8d4863\"},\"selected\":false,\"positionAbsolute\":{\"x\":795.6162477805387,\"y\":603.260214150876},\"dragging\":false},{\"width\":300,\"height\":430,\"id\":\"recursiveCharacterTextSplitter_0\",\"position\":{\"x\":406.08456707531263,\"y\":197.66460328693972},\"type\":\"customNode\",\"data\":{\"id\":\"recursiveCharacterTextSplitter_0\",\"label\":\"Recursive Character Text Splitter\",\"version\":2,\"name\":\"recursiveCharacterTextSplitter\",\"type\":\"RecursiveCharacterTextSplitter\",\"baseClasses\":[\"RecursiveCharacterTextSplitter\",\"TextSplitter\"],\"category\":\"Text Splitters\",\"description\":\"Split documents recursively by different characters - starting with \\\"\\\\n\\\\n\\\", then \\\"\\\\n\\\", then \\\" \\\"\",\"inputParams\":[{\"label\":\"Chunk Size\",\"name\":\"chunkSize\",\"type\":\"number\",\"default\":1000,\"optional\":true,\"id\":\"recursiveCharacterTextSplitter_0-input-chunkSize-number\"},{\"label\":\"Chunk Overlap\",\"name\":\"chunkOverlap\",\"type\":\"number\",\"optional\":true,\"id\":\"recursiveCharacterTextSplitter_0-input-chunkOverlap-number\"},{\"label\":\"Custom Separators\",\"name\":\"separators\",\"type\":\"string\",\"rows\":4,\"description\":\"Array of custom separators to determine when to split the text, will override the default separators\",\"placeholder\":\"[\\\"|\\\", \\\"##\\\", \\\">\\\", \\\"-\\\"]\",\"additionalParams\":true,\"optional\":true,\"id\":\"recursiveCharacterTextSplitter_0-input-separators-string\"}],\"inputAnchors\":[],\"inputs\":{\"chunkSize\":\"512\",\"chunkOverlap\":\"20\"},\"outputAnchors\":[{\"id\":\"recursiveCharacterTextSplitter_0-output-recursiveCharacterTextSplitter-RecursiveCharacterTextSplitter|TextSplitter\",\"name\":\"recursiveCharacterTextSplitter\",\"label\":\"RecursiveCharacterTextSplitter\",\"type\":\"RecursiveCharacterTextSplitter | TextSplitter\"}],\"outputs\":{},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":406.08456707531263,\"y\":197.66460328693972},\"dragging\":false},{\"width\":300,\"height\":439,\"id\":\"textFile_0\",\"position\":{\"x\":786.5497697231324,\"y\":140.09563157584407},\"type\":\"customNode\",\"data\":{\"id\":\"textFile_0\",\"label\":\"Text File\",\"version\":3,\"name\":\"textFile\",\"type\":\"Document\",\"baseClasses\":[\"Document\"],\"category\":\"Document Loaders\",\"description\":\"Load data from text files\",\"inputParams\":[{\"label\":\"Txt File\",\"name\":\"txtFile\",\"type\":\"file\",\"fileType\":\".txt, .html, .aspx, .asp, .cpp, .c, .cs, .css, .go, .h, .java, .js, .less, .ts, .php, .proto, .python, .py, .rst, .ruby, .rb, .rs, .scala, .sc, .scss, .sol, .sql, .swift, .markdown, .md, .tex, .ltx, .vb, .xml\",\"id\":\"textFile_0-input-txtFile-file\"},{\"label\":\"Metadata\",\"name\":\"metadata\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"textFile_0-input-metadata-json\"}],\"inputAnchors\":[{\"label\":\"Text Splitter\",\"name\":\"textSplitter\",\"type\":\"TextSplitter\",\"optional\":true,\"id\":\"textFile_0-input-textSplitter-TextSplitter\"}],\"inputs\":{\"textSplitter\":\"{{recursiveCharacterTextSplitter_0.data.instance}}\",\"metadata\":\"\",\"txtFile\":\"data:text/plain;base64,,filename:Vision Relief U.txt\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"textFile_0-output-document-Document\",\"name\":\"document\",\"label\":\"Document\",\"type\":\"Document\"},{\"id\":\"textFile_0-output-text-string|json\",\"name\":\"text\",\"label\":\"Text\",\"type\":\"string | json\"}],\"default\":\"document\"}],\"outputs\":{\"output\":\"document\"},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":786.5497697231324,\"y\":140.09563157584407},\"dragging\":false},{\"width\":300,\"height\":481,\"id\":\"conversationalRetrievalQAChain_0\",\"position\":{\"x\":1558.6564094656787,\"y\":386.60217819991124},\"type\":\"customNode\",\"data\":{\"id\":\"conversationalRetrievalQAChain_0\",\"label\":\"Conversational Retrieval QA Chain\",\"version\":1,\"name\":\"conversationalRetrievalQAChain\",\"type\":\"ConversationalRetrievalQAChain\",\"baseClasses\":[\"ConversationalRetrievalQAChain\",\"BaseChain\"],\"category\":\"Chains\",\"description\":\"Document QA - built on RetrievalQAChain to provide a chat history component\",\"inputParams\":[{\"label\":\"Return Source Documents\",\"name\":\"returnSourceDocuments\",\"type\":\"boolean\",\"optional\":true,\"id\":\"conversationalRetrievalQAChain_0-input-returnSourceDocuments-boolean\"},{\"label\":\"System Message\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"additionalParams\":true,\"optional\":true,\"placeholder\":\"I want you to act as a document that I am having a conversation with. Your name is \\\"AI Assistant\\\". You will provide me with answers from the given info. If the answer is not included, say exactly \\\"Hmm, I am not sure.\\\" and stop after that. Refuse to answer any question not about the info. Never break character.\",\"id\":\"conversationalRetrievalQAChain_0-input-systemMessagePrompt-string\"},{\"label\":\"Chain Option\",\"name\":\"chainOption\",\"type\":\"options\",\"options\":[{\"label\":\"MapReduceDocumentsChain\",\"name\":\"map_reduce\",\"description\":\"Suitable for QA tasks over larger documents and can run the preprocessing step in parallel, reducing the running time\"},{\"label\":\"RefineDocumentsChain\",\"name\":\"refine\",\"description\":\"Suitable for QA tasks over a large number of documents.\"},{\"label\":\"StuffDocumentsChain\",\"name\":\"stuff\",\"description\":\"Suitable for QA tasks over a small number of documents.\"}],\"additionalParams\":true,\"optional\":true,\"id\":\"conversationalRetrievalQAChain_0-input-chainOption-options\"}],\"inputAnchors\":[{\"label\":\"Language Model\",\"name\":\"model\",\"type\":\"BaseLanguageModel\",\"id\":\"conversationalRetrievalQAChain_0-input-model-BaseLanguageModel\"},{\"label\":\"Vector Store Retriever\",\"name\":\"vectorStoreRetriever\",\"type\":\"BaseRetriever\",\"id\":\"conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever\"},{\"label\":\"Memory\",\"name\":\"memory\",\"type\":\"BaseMemory\",\"optional\":true,\"description\":\"If left empty, a default BufferMemory will be used\",\"id\":\"conversationalRetrievalQAChain_0-input-memory-BaseMemory\"}],\"inputs\":{\"model\":\"{{chatOpenAI_0.data.instance}}\",\"vectorStoreRetriever\":\"{{pinecone_0.data.instance}}\",\"memory\":\"\",\"returnSourceDocuments\":\"\",\"systemMessagePrompt\":\"\",\"chainOption\":\"\"},\"outputAnchors\":[{\"id\":\"conversationalRetrievalQAChain_0-output-conversationalRetrievalQAChain-ConversationalRetrievalQAChain|BaseChain\",\"name\":\"conversationalRetrievalQAChain\",\"label\":\"ConversationalRetrievalQAChain\",\"type\":\"ConversationalRetrievalQAChain | BaseChain\"}],\"outputs\":{},\"selected\":false},\"positionAbsolute\":{\"x\":1558.6564094656787,\"y\":386.60217819991124},\"selected\":false},{\"width\":300,\"height\":576,\"id\":\"chatOpenAI_0\",\"position\":{\"x\":1196.6533207203554,\"y\":-46.74877201166788},\"type\":\"customNode\",\"data\":{\"id\":\"chatOpenAI_0\",\"label\":\"ChatOpenAI\",\"version\":2,\"name\":\"chatOpenAI\",\"type\":\"ChatOpenAI\",\"baseClasses\":[\"ChatOpenAI\",\"BaseChatModel\",\"BaseLanguageModel\",\"Runnable\"],\"category\":\"Chat Models\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"chatOpenAI_0-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"options\",\"options\":[{\"label\":\"gpt-4\",\"name\":\"gpt-4\"},{\"label\":\"gpt-4-1106-preview\",\"name\":\"gpt-4-1106-preview\"},{\"label\":\"gpt-4-vision-preview\",\"name\":\"gpt-4-vision-preview\"},{\"label\":\"gpt-4-0613\",\"name\":\"gpt-4-0613\"},{\"label\":\"gpt-4-32k\",\"name\":\"gpt-4-32k\"},{\"label\":\"gpt-4-32k-0613\",\"name\":\"gpt-4-32k-0613\"},{\"label\":\"gpt-3.5-turbo\",\"name\":\"gpt-3.5-turbo\"},{\"label\":\"gpt-3.5-turbo-1106\",\"name\":\"gpt-3.5-turbo-1106\"},{\"label\":\"gpt-3.5-turbo-0613\",\"name\":\"gpt-3.5-turbo-0613\"},{\"label\":\"gpt-3.5-turbo-16k\",\"name\":\"gpt-3.5-turbo-16k\"},{\"label\":\"gpt-3.5-turbo-16k-0613\",\"name\":\"gpt-3.5-turbo-16k-0613\"}],\"default\":\"gpt-3.5-turbo\",\"optional\":true,\"id\":\"chatOpenAI_0-input-modelName-options\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"step\":0.1,\"default\":0.9,\"optional\":true,\"id\":\"chatOpenAI_0-input-temperature-number\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-topP-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-presencePenalty-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-basepath-string\"},{\"label\":\"BaseOptions\",\"name\":\"baseOptions\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-baseOptions-json\"}],\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"chatOpenAI_0-input-cache-BaseCache\"}],\"inputs\":{\"cache\":\"\",\"modelName\":\"gpt-3.5-turbo-1106\",\"temperature\":0.9,\"maxTokens\":\"\",\"topP\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"timeout\":\"\",\"basepath\":\"\",\"baseOptions\":\"\"},\"outputAnchors\":[{\"id\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"name\":\"chatOpenAI\",\"label\":\"ChatOpenAI\",\"type\":\"ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable\"}],\"outputs\":{},\"selected\":false,\"credential\":\"7c194259-34c9-4d9f-8cd8-2234ac8d4863\"},\"selected\":false,\"positionAbsolute\":{\"x\":1196.6533207203554,\"y\":-46.74877201166788},\"dragging\":false},{\"width\":300,\"height\":557,\"id\":\"pinecone_0\",\"position\":{\"x\":1192.4771449209463,\"y\":552.43946147251},\"type\":\"customNode\",\"data\":{\"id\":\"pinecone_0\",\"label\":\"Pinecone\",\"version\":1,\"name\":\"pinecone\",\"type\":\"Pinecone\",\"baseClasses\":[\"Pinecone\",\"VectorStoreRetriever\",\"BaseRetriever\"],\"category\":\"Vector Stores\",\"description\":\"Upsert embedded data and perform similarity search upon query using Pinecone, a leading fully managed hosted vector database\",\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"pineconeApi\"],\"id\":\"pinecone_0-input-credential-credential\"},{\"label\":\"Pinecone Index\",\"name\":\"pineconeIndex\",\"type\":\"string\",\"id\":\"pinecone_0-input-pineconeIndex-string\"},{\"label\":\"Pinecone Namespace\",\"name\":\"pineconeNamespace\",\"type\":\"string\",\"placeholder\":\"my-first-namespace\",\"additionalParams\":true,\"optional\":true,\"id\":\"pinecone_0-input-pineconeNamespace-string\"},{\"label\":\"Pinecone Metadata Filter\",\"name\":\"pineconeMetadataFilter\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"pinecone_0-input-pineconeMetadataFilter-json\"},{\"label\":\"Top K\",\"name\":\"topK\",\"description\":\"Number of top results to fetch. Default to 4\",\"placeholder\":\"4\",\"type\":\"number\",\"additionalParams\":true,\"optional\":true,\"id\":\"pinecone_0-input-topK-number\"}],\"inputAnchors\":[{\"label\":\"Document\",\"name\":\"document\",\"type\":\"Document\",\"list\":true,\"optional\":true,\"id\":\"pinecone_0-input-document-Document\"},{\"label\":\"Embeddings\",\"name\":\"embeddings\",\"type\":\"Embeddings\",\"id\":\"pinecone_0-input-embeddings-Embeddings\"}],\"inputs\":{\"document\":[\"{{textFile_0.data.instance}}\"],\"embeddings\":\"{{openAIEmbeddings_0.data.instance}}\",\"pineconeIndex\":\"demo\",\"pineconeNamespace\":\"\",\"pineconeMetadataFilter\":\"\",\"topK\":\"\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"pinecone_0-output-retriever-Pinecone|VectorStoreRetriever|BaseRetriever\",\"name\":\"retriever\",\"label\":\"Pinecone Retriever\",\"type\":\"Pinecone | VectorStoreRetriever | BaseRetriever\"},{\"id\":\"pinecone_0-output-vectorStore-Pinecone|VectorStore\",\"name\":\"vectorStore\",\"label\":\"Pinecone Vector Store\",\"type\":\"Pinecone | VectorStore\"}],\"default\":\"retriever\"}],\"outputs\":{\"output\":\"retriever\"},\"selected\":false,\"credential\":\"411dc7fd-0acc-4617-bd54-2aa6a224d277\"},\"selected\":false,\"positionAbsolute\":{\"x\":1192.4771449209463,\"y\":552.43946147251},\"dragging\":false}],\"edges\":[{\"source\":\"recursiveCharacterTextSplitter_0\",\"sourceHandle\":\"recursiveCharacterTextSplitter_0-output-recursiveCharacterTextSplitter-RecursiveCharacterTextSplitter|TextSplitter\",\"target\":\"textFile_0\",\"targetHandle\":\"textFile_0-input-textSplitter-TextSplitter\",\"type\":\"buttonedge\",\"id\":\"recursiveCharacterTextSplitter_0-recursiveCharacterTextSplitter_0-output-recursiveCharacterTextSplitter-RecursiveCharacterTextSplitter|TextSplitter-textFile_0-textFile_0-input-textSplitter-TextSplitter\",\"data\":{\"label\":\"\"}},{\"source\":\"textFile_0\",\"sourceHandle\":\"textFile_0-output-document-Document\",\"target\":\"pinecone_0\",\"targetHandle\":\"pinecone_0-input-document-Document\",\"type\":\"buttonedge\",\"id\":\"textFile_0-textFile_0-output-document-Document-pinecone_0-pinecone_0-input-document-Document\",\"data\":{\"label\":\"\"}},{\"source\":\"openAIEmbeddings_0\",\"sourceHandle\":\"openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings\",\"target\":\"pinecone_0\",\"targetHandle\":\"pinecone_0-input-embeddings-Embeddings\",\"type\":\"buttonedge\",\"id\":\"openAIEmbeddings_0-openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings-pinecone_0-pinecone_0-input-embeddings-Embeddings\",\"data\":{\"label\":\"\"}},{\"source\":\"pinecone_0\",\"sourceHandle\":\"pinecone_0-output-retriever-Pinecone|VectorStoreRetriever|BaseRetriever\",\"target\":\"conversationalRetrievalQAChain_0\",\"targetHandle\":\"conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever\",\"type\":\"buttonedge\",\"id\":\"pinecone_0-pinecone_0-output-retriever-Pinecone|VectorStoreRetriever|BaseRetriever-conversationalRetrievalQAChain_0-conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever\",\"data\":{\"label\":\"\"}},{\"source\":\"chatOpenAI_0\",\"sourceHandle\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"target\":\"conversationalRetrievalQAChain_0\",\"targetHandle\":\"conversationalRetrievalQAChain_0-input-model-BaseLanguageModel\",\"type\":\"buttonedge\",\"id\":\"chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-conversationalRetrievalQAChain_0-conversationalRetrievalQAChain_0-input-model-BaseLanguageModel\",\"data\":{\"label\":\"\"}}],\"viewport\":{\"x\":211.99774767176808,\"y\":43.49030686115253,\"zoom\":0.41594359549903864}}","id":"d940915c-37d9-44d1-8a6d-5556adbd096b","isPublic":false,"name":"Conversational Q&A chatbot","updatedDate":"2024-02-26T07:24:36.580Z"},"name":" "},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"1209395","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/chatflows/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-04 15:09:48"}
{"level":"info","message":"üñä PUT /api/v1/chatflows/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"chatflow":{"analytic":"{}","apiConfig":null,"apikeyid":"97a503249cb8e0d53a112d68c5ecee87","category":null,"chatbotConfig":"{\"starterPrompts\":{\"0\":{\"prompt\":\"new\"}}}","createdDate":"2024-01-27T17:47:33.024Z","deployed":false,"flowData":"{\"nodes\":[{\"width\":300,\"height\":330,\"id\":\"openAIEmbeddings_0\",\"position\":{\"x\":795.6162477805387,\"y\":603.260214150876},\"type\":\"customNode\",\"data\":{\"id\":\"openAIEmbeddings_0\",\"label\":\"OpenAI Embeddings\",\"version\":1,\"name\":\"openAIEmbeddings\",\"type\":\"OpenAIEmbeddings\",\"baseClasses\":[\"OpenAIEmbeddings\",\"Embeddings\"],\"category\":\"Embeddings\",\"description\":\"OpenAI API to generate embeddings for a given text\",\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"openAIEmbeddings_0-input-credential-credential\"},{\"label\":\"Strip New Lines\",\"name\":\"stripNewLines\",\"type\":\"boolean\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAIEmbeddings_0-input-stripNewLines-boolean\"},{\"label\":\"Batch Size\",\"name\":\"batchSize\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAIEmbeddings_0-input-batchSize-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAIEmbeddings_0-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAIEmbeddings_0-input-basepath-string\"}],\"inputAnchors\":[],\"inputs\":{\"stripNewLines\":\"\",\"batchSize\":\"\",\"timeout\":\"\",\"basepath\":\"\"},\"outputAnchors\":[{\"id\":\"openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings\",\"name\":\"openAIEmbeddings\",\"label\":\"OpenAIEmbeddings\",\"type\":\"OpenAIEmbeddings | Embeddings\"}],\"outputs\":{},\"selected\":false,\"credential\":\"7c194259-34c9-4d9f-8cd8-2234ac8d4863\"},\"selected\":false,\"positionAbsolute\":{\"x\":795.6162477805387,\"y\":603.260214150876},\"dragging\":false},{\"width\":300,\"height\":430,\"id\":\"recursiveCharacterTextSplitter_0\",\"position\":{\"x\":406.08456707531263,\"y\":197.66460328693972},\"type\":\"customNode\",\"data\":{\"id\":\"recursiveCharacterTextSplitter_0\",\"label\":\"Recursive Character Text Splitter\",\"version\":2,\"name\":\"recursiveCharacterTextSplitter\",\"type\":\"RecursiveCharacterTextSplitter\",\"baseClasses\":[\"RecursiveCharacterTextSplitter\",\"TextSplitter\"],\"category\":\"Text Splitters\",\"description\":\"Split documents recursively by different characters - starting with \\\"\\\\n\\\\n\\\", then \\\"\\\\n\\\", then \\\" \\\"\",\"inputParams\":[{\"label\":\"Chunk Size\",\"name\":\"chunkSize\",\"type\":\"number\",\"default\":1000,\"optional\":true,\"id\":\"recursiveCharacterTextSplitter_0-input-chunkSize-number\"},{\"label\":\"Chunk Overlap\",\"name\":\"chunkOverlap\",\"type\":\"number\",\"optional\":true,\"id\":\"recursiveCharacterTextSplitter_0-input-chunkOverlap-number\"},{\"label\":\"Custom Separators\",\"name\":\"separators\",\"type\":\"string\",\"rows\":4,\"description\":\"Array of custom separators to determine when to split the text, will override the default separators\",\"placeholder\":\"[\\\"|\\\", \\\"##\\\", \\\">\\\", \\\"-\\\"]\",\"additionalParams\":true,\"optional\":true,\"id\":\"recursiveCharacterTextSplitter_0-input-separators-string\"}],\"inputAnchors\":[],\"inputs\":{\"chunkSize\":\"512\",\"chunkOverlap\":\"20\"},\"outputAnchors\":[{\"id\":\"recursiveCharacterTextSplitter_0-output-recursiveCharacterTextSplitter-RecursiveCharacterTextSplitter|TextSplitter\",\"name\":\"recursiveCharacterTextSplitter\",\"label\":\"RecursiveCharacterTextSplitter\",\"type\":\"RecursiveCharacterTextSplitter | TextSplitter\"}],\"outputs\":{},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":406.08456707531263,\"y\":197.66460328693972},\"dragging\":false},{\"width\":300,\"height\":439,\"id\":\"textFile_0\",\"position\":{\"x\":786.5497697231324,\"y\":140.09563157584407},\"type\":\"customNode\",\"data\":{\"id\":\"textFile_0\",\"label\":\"Text File\",\"version\":3,\"name\":\"textFile\",\"type\":\"Document\",\"baseClasses\":[\"Document\"],\"category\":\"Document Loaders\",\"description\":\"Load data from text files\",\"inputParams\":[{\"label\":\"Txt File\",\"name\":\"txtFile\",\"type\":\"file\",\"fileType\":\".txt, .html, .aspx, .asp, .cpp, .c, .cs, .css, .go, .h, .java, .js, .less, .ts, .php, .proto, .python, .py, .rst, .ruby, .rb, .rs, .scala, .sc, .scss, .sol, .sql, .swift, .markdown, .md, .tex, .ltx, .vb, .xml\",\"id\":\"textFile_0-input-txtFile-file\"},{\"label\":\"Metadata\",\"name\":\"metadata\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"textFile_0-input-metadata-json\"}],\"inputAnchors\":[{\"label\":\"Text Splitter\",\"name\":\"textSplitter\",\"type\":\"TextSplitter\",\"optional\":true,\"id\":\"textFile_0-input-textSplitter-TextSplitter\"}],\"inputs\":{\"textSplitter\":\"{{recursiveCharacterTextSplitter_0.data.instance}}\",\"metadata\":\"\",\"txtFile\":\"data:text/plain;base64,,filename:Vision Relief U.txt\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"textFile_0-output-document-Document\",\"name\":\"document\",\"label\":\"Document\",\"type\":\"Document\"},{\"id\":\"textFile_0-output-text-string|json\",\"name\":\"text\",\"label\":\"Text\",\"type\":\"string | json\"}],\"default\":\"document\"}],\"outputs\":{\"output\":\"document\"},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":786.5497697231324,\"y\":140.09563157584407},\"dragging\":false},{\"width\":300,\"height\":481,\"id\":\"conversationalRetrievalQAChain_0\",\"position\":{\"x\":1558.6564094656787,\"y\":386.60217819991124},\"type\":\"customNode\",\"data\":{\"id\":\"conversationalRetrievalQAChain_0\",\"label\":\"Conversational Retrieval QA Chain\",\"version\":1,\"name\":\"conversationalRetrievalQAChain\",\"type\":\"ConversationalRetrievalQAChain\",\"baseClasses\":[\"ConversationalRetrievalQAChain\",\"BaseChain\"],\"category\":\"Chains\",\"description\":\"Document QA - built on RetrievalQAChain to provide a chat history component\",\"inputParams\":[{\"label\":\"Return Source Documents\",\"name\":\"returnSourceDocuments\",\"type\":\"boolean\",\"optional\":true,\"id\":\"conversationalRetrievalQAChain_0-input-returnSourceDocuments-boolean\"},{\"label\":\"System Message\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"additionalParams\":true,\"optional\":true,\"placeholder\":\"I want you to act as a document that I am having a conversation with. Your name is \\\"AI Assistant\\\". You will provide me with answers from the given info. If the answer is not included, say exactly \\\"Hmm, I am not sure.\\\" and stop after that. Refuse to answer any question not about the info. Never break character.\",\"id\":\"conversationalRetrievalQAChain_0-input-systemMessagePrompt-string\"},{\"label\":\"Chain Option\",\"name\":\"chainOption\",\"type\":\"options\",\"options\":[{\"label\":\"MapReduceDocumentsChain\",\"name\":\"map_reduce\",\"description\":\"Suitable for QA tasks over larger documents and can run the preprocessing step in parallel, reducing the running time\"},{\"label\":\"RefineDocumentsChain\",\"name\":\"refine\",\"description\":\"Suitable for QA tasks over a large number of documents.\"},{\"label\":\"StuffDocumentsChain\",\"name\":\"stuff\",\"description\":\"Suitable for QA tasks over a small number of documents.\"}],\"additionalParams\":true,\"optional\":true,\"id\":\"conversationalRetrievalQAChain_0-input-chainOption-options\"}],\"inputAnchors\":[{\"label\":\"Language Model\",\"name\":\"model\",\"type\":\"BaseLanguageModel\",\"id\":\"conversationalRetrievalQAChain_0-input-model-BaseLanguageModel\"},{\"label\":\"Vector Store Retriever\",\"name\":\"vectorStoreRetriever\",\"type\":\"BaseRetriever\",\"id\":\"conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever\"},{\"label\":\"Memory\",\"name\":\"memory\",\"type\":\"BaseMemory\",\"optional\":true,\"description\":\"If left empty, a default BufferMemory will be used\",\"id\":\"conversationalRetrievalQAChain_0-input-memory-BaseMemory\"}],\"inputs\":{\"model\":\"{{chatOpenAI_0.data.instance}}\",\"vectorStoreRetriever\":\"{{pinecone_0.data.instance}}\",\"memory\":\"\",\"returnSourceDocuments\":\"\",\"systemMessagePrompt\":\"\",\"chainOption\":\"\"},\"outputAnchors\":[{\"id\":\"conversationalRetrievalQAChain_0-output-conversationalRetrievalQAChain-ConversationalRetrievalQAChain|BaseChain\",\"name\":\"conversationalRetrievalQAChain\",\"label\":\"ConversationalRetrievalQAChain\",\"type\":\"ConversationalRetrievalQAChain | BaseChain\"}],\"outputs\":{},\"selected\":false},\"positionAbsolute\":{\"x\":1558.6564094656787,\"y\":386.60217819991124},\"selected\":false},{\"width\":300,\"height\":576,\"id\":\"chatOpenAI_0\",\"position\":{\"x\":1196.6533207203554,\"y\":-46.74877201166788},\"type\":\"customNode\",\"data\":{\"id\":\"chatOpenAI_0\",\"label\":\"ChatOpenAI\",\"version\":2,\"name\":\"chatOpenAI\",\"type\":\"ChatOpenAI\",\"baseClasses\":[\"ChatOpenAI\",\"BaseChatModel\",\"BaseLanguageModel\",\"Runnable\"],\"category\":\"Chat Models\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"chatOpenAI_0-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"options\",\"options\":[{\"label\":\"gpt-4\",\"name\":\"gpt-4\"},{\"label\":\"gpt-4-1106-preview\",\"name\":\"gpt-4-1106-preview\"},{\"label\":\"gpt-4-vision-preview\",\"name\":\"gpt-4-vision-preview\"},{\"label\":\"gpt-4-0613\",\"name\":\"gpt-4-0613\"},{\"label\":\"gpt-4-32k\",\"name\":\"gpt-4-32k\"},{\"label\":\"gpt-4-32k-0613\",\"name\":\"gpt-4-32k-0613\"},{\"label\":\"gpt-3.5-turbo\",\"name\":\"gpt-3.5-turbo\"},{\"label\":\"gpt-3.5-turbo-1106\",\"name\":\"gpt-3.5-turbo-1106\"},{\"label\":\"gpt-3.5-turbo-0613\",\"name\":\"gpt-3.5-turbo-0613\"},{\"label\":\"gpt-3.5-turbo-16k\",\"name\":\"gpt-3.5-turbo-16k\"},{\"label\":\"gpt-3.5-turbo-16k-0613\",\"name\":\"gpt-3.5-turbo-16k-0613\"}],\"default\":\"gpt-3.5-turbo\",\"optional\":true,\"id\":\"chatOpenAI_0-input-modelName-options\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"step\":0.1,\"default\":0.9,\"optional\":true,\"id\":\"chatOpenAI_0-input-temperature-number\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-topP-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-presencePenalty-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-basepath-string\"},{\"label\":\"BaseOptions\",\"name\":\"baseOptions\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-baseOptions-json\"}],\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"chatOpenAI_0-input-cache-BaseCache\"}],\"inputs\":{\"cache\":\"\",\"modelName\":\"gpt-3.5-turbo-1106\",\"temperature\":0.9,\"maxTokens\":\"\",\"topP\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"timeout\":\"\",\"basepath\":\"\",\"baseOptions\":\"\"},\"outputAnchors\":[{\"id\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"name\":\"chatOpenAI\",\"label\":\"ChatOpenAI\",\"type\":\"ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable\"}],\"outputs\":{},\"selected\":false,\"credential\":\"7c194259-34c9-4d9f-8cd8-2234ac8d4863\"},\"selected\":false,\"positionAbsolute\":{\"x\":1196.6533207203554,\"y\":-46.74877201166788},\"dragging\":false},{\"width\":300,\"height\":557,\"id\":\"pinecone_0\",\"position\":{\"x\":1192.4771449209463,\"y\":552.43946147251},\"type\":\"customNode\",\"data\":{\"id\":\"pinecone_0\",\"label\":\"Pinecone\",\"version\":1,\"name\":\"pinecone\",\"type\":\"Pinecone\",\"baseClasses\":[\"Pinecone\",\"VectorStoreRetriever\",\"BaseRetriever\"],\"category\":\"Vector Stores\",\"description\":\"Upsert embedded data and perform similarity search upon query using Pinecone, a leading fully managed hosted vector database\",\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"pineconeApi\"],\"id\":\"pinecone_0-input-credential-credential\"},{\"label\":\"Pinecone Index\",\"name\":\"pineconeIndex\",\"type\":\"string\",\"id\":\"pinecone_0-input-pineconeIndex-string\"},{\"label\":\"Pinecone Namespace\",\"name\":\"pineconeNamespace\",\"type\":\"string\",\"placeholder\":\"my-first-namespace\",\"additionalParams\":true,\"optional\":true,\"id\":\"pinecone_0-input-pineconeNamespace-string\"},{\"label\":\"Pinecone Metadata Filter\",\"name\":\"pineconeMetadataFilter\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"pinecone_0-input-pineconeMetadataFilter-json\"},{\"label\":\"Top K\",\"name\":\"topK\",\"description\":\"Number of top results to fetch. Default to 4\",\"placeholder\":\"4\",\"type\":\"number\",\"additionalParams\":true,\"optional\":true,\"id\":\"pinecone_0-input-topK-number\"}],\"inputAnchors\":[{\"label\":\"Document\",\"name\":\"document\",\"type\":\"Document\",\"list\":true,\"optional\":true,\"id\":\"pinecone_0-input-document-Document\"},{\"label\":\"Embeddings\",\"name\":\"embeddings\",\"type\":\"Embeddings\",\"id\":\"pinecone_0-input-embeddings-Embeddings\"}],\"inputs\":{\"document\":[\"{{textFile_0.data.instance}}\"],\"embeddings\":\"{{openAIEmbeddings_0.data.instance}}\",\"pineconeIndex\":\"demo\",\"pineconeNamespace\":\"\",\"pineconeMetadataFilter\":\"\",\"topK\":\"\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"pinecone_0-output-retriever-Pinecone|VectorStoreRetriever|BaseRetriever\",\"name\":\"retriever\",\"label\":\"Pinecone Retriever\",\"type\":\"Pinecone | VectorStoreRetriever | BaseRetriever\"},{\"id\":\"pinecone_0-output-vectorStore-Pinecone|VectorStore\",\"name\":\"vectorStore\",\"label\":\"Pinecone Vector Store\",\"type\":\"Pinecone | VectorStore\"}],\"default\":\"retriever\"}],\"outputs\":{\"output\":\"retriever\"},\"selected\":false,\"credential\":\"411dc7fd-0acc-4617-bd54-2aa6a224d277\"},\"selected\":false,\"positionAbsolute\":{\"x\":1192.4771449209463,\"y\":552.43946147251},\"dragging\":false}],\"edges\":[{\"source\":\"recursiveCharacterTextSplitter_0\",\"sourceHandle\":\"recursiveCharacterTextSplitter_0-output-recursiveCharacterTextSplitter-RecursiveCharacterTextSplitter|TextSplitter\",\"target\":\"textFile_0\",\"targetHandle\":\"textFile_0-input-textSplitter-TextSplitter\",\"type\":\"buttonedge\",\"id\":\"recursiveCharacterTextSplitter_0-recursiveCharacterTextSplitter_0-output-recursiveCharacterTextSplitter-RecursiveCharacterTextSplitter|TextSplitter-textFile_0-textFile_0-input-textSplitter-TextSplitter\",\"data\":{\"label\":\"\"}},{\"source\":\"textFile_0\",\"sourceHandle\":\"textFile_0-output-document-Document\",\"target\":\"pinecone_0\",\"targetHandle\":\"pinecone_0-input-document-Document\",\"type\":\"buttonedge\",\"id\":\"textFile_0-textFile_0-output-document-Document-pinecone_0-pinecone_0-input-document-Document\",\"data\":{\"label\":\"\"}},{\"source\":\"openAIEmbeddings_0\",\"sourceHandle\":\"openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings\",\"target\":\"pinecone_0\",\"targetHandle\":\"pinecone_0-input-embeddings-Embeddings\",\"type\":\"buttonedge\",\"id\":\"openAIEmbeddings_0-openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings-pinecone_0-pinecone_0-input-embeddings-Embeddings\",\"data\":{\"label\":\"\"}},{\"source\":\"pinecone_0\",\"sourceHandle\":\"pinecone_0-output-retriever-Pinecone|VectorStoreRetriever|BaseRetriever\",\"target\":\"conversationalRetrievalQAChain_0\",\"targetHandle\":\"conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever\",\"type\":\"buttonedge\",\"id\":\"pinecone_0-pinecone_0-output-retriever-Pinecone|VectorStoreRetriever|BaseRetriever-conversationalRetrievalQAChain_0-conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever\",\"data\":{\"label\":\"\"}},{\"source\":\"chatOpenAI_0\",\"sourceHandle\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"target\":\"conversationalRetrievalQAChain_0\",\"targetHandle\":\"conversationalRetrievalQAChain_0-input-model-BaseLanguageModel\",\"type\":\"buttonedge\",\"id\":\"chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-conversationalRetrievalQAChain_0-conversationalRetrievalQAChain_0-input-model-BaseLanguageModel\",\"data\":{\"label\":\"\"}}],\"viewport\":{\"x\":211.99774767176808,\"y\":43.49030686115253,\"zoom\":0.41594359549903864}}","id":"d940915c-37d9-44d1-8a6d-5556adbd096b","isPublic":false,"name":" ","updatedDate":"2024-03-04T09:39:47.856Z"},"name":"My New Chatflow"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"1209384","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/chatflows/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-04 15:10:06"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/apikey","package":"server","request":{"body":{"keyName":""},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"14","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/apikey","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/apikey"},"timestamp":"2024-03-04 16:08:31"}
{"level":"info","message":"‚ùå DELETE /api/v1/apikey/104cb5eb5ea396b015a5b6f07f90daea","package":"server","request":{"body":{},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/apikey","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"DELETE","params":{},"query":{},"url":"/api/v1/apikey/104cb5eb5ea396b015a5b6f07f90daea"},"timestamp":"2024-03-04 16:08:36"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"';vcvbnjm","socketIOClientId":"B656zN1maRLQRBsYAAAR"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"79","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-04 16:45:01"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/apikey","package":"server","request":{"body":{"keyName":""},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"14","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/apikey","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/apikey"},"timestamp":"2024-03-04 18:09:50"}
{"level":"info","message":"‚ùå DELETE /api/v1/apikey/625f38caced10f6e2e03556509434445","package":"server","request":{"body":{},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/apikey","sec-ch-ua":"\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"},"method":"DELETE","params":{},"query":{},"url":"/api/v1/apikey/625f38caced10f6e2e03556509434445"},"timestamp":"2024-03-04 18:09:54"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/marketplace/16","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 11:19:56"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/marketplace/16","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 11:20:20"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"return false;"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"38","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/marketplace/16","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 11:20:23"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"return false;"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"38","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/marketplace/16","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 11:20:24"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"return false;"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"38","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/marketplace/16","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 11:20:25"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"return false;"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"38","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/marketplace/16","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 11:20:25"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"return false;"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"38","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/marketplace/16","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 11:20:26"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"return false;"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"38","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/marketplace/16","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 11:20:27"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/chatflows","package":"server","request":{"body":{"deployed":false,"flowData":"{\"nodes\":[{\"width\":300,\"height\":513,\"id\":\"promptTemplate_0\",\"position\":{\"x\":792.9464838535649,\"y\":527.1718536712464},\"type\":\"customNode\",\"data\":{\"id\":\"promptTemplate_0\",\"label\":\"Prompt Template\",\"version\":1,\"name\":\"promptTemplate\",\"type\":\"PromptTemplate\",\"baseClasses\":[\"PromptTemplate\",\"BaseStringPromptTemplate\",\"BasePromptTemplate\"],\"category\":\"Prompts\",\"description\":\"Schema to represent a basic prompt for an LLM\",\"inputParams\":[{\"label\":\"Template\",\"name\":\"template\",\"type\":\"string\",\"rows\":4,\"placeholder\":\"What is a good name for a company that makes {product}?\",\"id\":\"promptTemplate_0-input-template-string\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"promptTemplate_0-input-promptValues-json\"}],\"inputAnchors\":[],\"inputs\":{\"template\":\"You are an AI who performs one task based on the following objective: {objective}.\\nRespond with how you would complete this task:\",\"promptValues\":\"{\\\"objective\\\":\\\"{{question}}\\\"}\"},\"outputAnchors\":[{\"id\":\"promptTemplate_0-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate\",\"name\":\"promptTemplate\",\"label\":\"PromptTemplate\",\"type\":\"PromptTemplate | BaseStringPromptTemplate | BasePromptTemplate\"}],\"outputs\":{},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":792.9464838535649,\"y\":527.1718536712464},\"dragging\":false},{\"width\":300,\"height\":513,\"id\":\"promptTemplate_1\",\"position\":{\"x\":1995.1328578238122,\"y\":-14.648035759690174},\"type\":\"customNode\",\"data\":{\"id\":\"promptTemplate_1\",\"label\":\"Prompt Template\",\"version\":1,\"name\":\"promptTemplate\",\"type\":\"PromptTemplate\",\"baseClasses\":[\"PromptTemplate\",\"BaseStringPromptTemplate\",\"BasePromptTemplate\"],\"category\":\"Prompts\",\"description\":\"Schema to represent a basic prompt for an LLM\",\"inputParams\":[{\"label\":\"Template\",\"name\":\"template\",\"type\":\"string\",\"rows\":4,\"placeholder\":\"What is a good name for a company that makes {product}?\",\"id\":\"promptTemplate_1-input-template-string\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"promptTemplate_1-input-promptValues-json\"}],\"inputAnchors\":[],\"inputs\":{\"template\":\"You are a task creation AI that uses the result of an execution agent to create new tasks with the following objective: {objective}.\\nThe last completed task has the result: {result}.\\nBased on the result, create new tasks to be completed by the AI system that do not overlap with result.\\nReturn the tasks as an array.\",\"promptValues\":\"{\\\"objective\\\":\\\"{{question}}\\\",\\\"result\\\":\\\"{{ifElseFunction_0.data.instance}}\\\"}\"},\"outputAnchors\":[{\"id\":\"promptTemplate_1-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate\",\"name\":\"promptTemplate\",\"label\":\"PromptTemplate\",\"type\":\"PromptTemplate | BaseStringPromptTemplate | BasePromptTemplate\"}],\"outputs\":{},\"selected\":false},\"positionAbsolute\":{\"x\":1995.1328578238122,\"y\":-14.648035759690174},\"selected\":false,\"dragging\":false},{\"width\":300,\"height\":576,\"id\":\"openAI_1\",\"position\":{\"x\":791.6102007244282,\"y\":-83.71386876566092},\"type\":\"customNode\",\"data\":{\"id\":\"openAI_1\",\"label\":\"OpenAI\",\"version\":3,\"name\":\"openAI\",\"type\":\"OpenAI\",\"baseClasses\":[\"OpenAI\",\"BaseLLM\",\"BaseLanguageModel\"],\"category\":\"LLMs\",\"description\":\"Wrapper around OpenAI large language models\",\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"openAI_1-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"options\",\"options\":[{\"label\":\"gpt-3.5-turbo-instruct\",\"name\":\"gpt-3.5-turbo-instruct\"},{\"label\":\"babbage-002\",\"name\":\"babbage-002\"},{\"label\":\"davinci-002\",\"name\":\"davinci-002\"}],\"default\":\"gpt-3.5-turbo-instruct\",\"optional\":true,\"id\":\"openAI_1-input-modelName-options\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"default\":0.7,\"optional\":true,\"id\":\"openAI_1-input-temperature-number\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_1-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_1-input-topP-number\"},{\"label\":\"Best Of\",\"name\":\"bestOf\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_1-input-bestOf-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_1-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_1-input-presencePenalty-number\"},{\"label\":\"Batch Size\",\"name\":\"batchSize\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_1-input-batchSize-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_1-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_1-input-basepath-string\"}],\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"openAI_1-input-cache-BaseCache\"}],\"inputs\":{\"modelName\":\"gpt-3.5-turbo-instruct\",\"temperature\":0.7,\"maxTokens\":\"\",\"topP\":\"\",\"bestOf\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"batchSize\":\"\",\"timeout\":\"\",\"basepath\":\"\"},\"outputAnchors\":[{\"id\":\"openAI_1-output-openAI-OpenAI|BaseLLM|BaseLanguageModel\",\"name\":\"openAI\",\"label\":\"OpenAI\",\"type\":\"OpenAI | BaseLLM | BaseLanguageModel\"}],\"outputs\":{},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":791.6102007244282,\"y\":-83.71386876566092},\"dragging\":false},{\"width\":300,\"height\":576,\"id\":\"openAI_2\",\"position\":{\"x\":2340.5995455075863,\"y\":-310.7609446553905},\"type\":\"customNode\",\"data\":{\"id\":\"openAI_2\",\"label\":\"OpenAI\",\"version\":3,\"name\":\"openAI\",\"type\":\"OpenAI\",\"baseClasses\":[\"OpenAI\",\"BaseLLM\",\"BaseLanguageModel\"],\"category\":\"LLMs\",\"description\":\"Wrapper around OpenAI large language models\",\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"openAI_2-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"options\",\"options\":[{\"label\":\"gpt-3.5-turbo-instruct\",\"name\":\"gpt-3.5-turbo-instruct\"},{\"label\":\"babbage-002\",\"name\":\"babbage-002\"},{\"label\":\"davinci-002\",\"name\":\"davinci-002\"}],\"default\":\"gpt-3.5-turbo-instruct\",\"optional\":true,\"id\":\"openAI_2-input-modelName-options\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"default\":0.7,\"optional\":true,\"id\":\"openAI_2-input-temperature-number\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_2-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_2-input-topP-number\"},{\"label\":\"Best Of\",\"name\":\"bestOf\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_2-input-bestOf-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_2-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_2-input-presencePenalty-number\"},{\"label\":\"Batch Size\",\"name\":\"batchSize\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_2-input-batchSize-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_2-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_2-input-basepath-string\"}],\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"openAI_2-input-cache-BaseCache\"}],\"inputs\":{\"modelName\":\"gpt-3.5-turbo-instruct\",\"temperature\":0.7,\"maxTokens\":\"\",\"topP\":\"\",\"bestOf\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"batchSize\":\"\",\"timeout\":\"\",\"basepath\":\"\"},\"outputAnchors\":[{\"id\":\"openAI_2-output-openAI-OpenAI|BaseLLM|BaseLanguageModel\",\"name\":\"openAI\",\"label\":\"OpenAI\",\"type\":\"OpenAI | BaseLLM | BaseLanguageModel\"}],\"outputs\":{},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":2340.5995455075863,\"y\":-310.7609446553905},\"dragging\":false},{\"width\":300,\"height\":508,\"id\":\"llmChain_0\",\"position\":{\"x\":1183.0899727188096,\"y\":385.0159960992951},\"type\":\"customNode\",\"data\":{\"id\":\"llmChain_0\",\"label\":\"LLM Chain\",\"version\":3,\"name\":\"llmChain\",\"type\":\"LLMChain\",\"baseClasses\":[\"LLMChain\",\"BaseChain\",\"Runnable\"],\"category\":\"Chains\",\"description\":\"Chain to run queries against LLMs\",\"inputParams\":[{\"label\":\"Chain Name\",\"name\":\"chainName\",\"type\":\"string\",\"placeholder\":\"Name Your Chain\",\"optional\":true,\"id\":\"llmChain_0-input-chainName-string\"}],\"inputAnchors\":[{\"label\":\"Language Model\",\"name\":\"model\",\"type\":\"BaseLanguageModel\",\"id\":\"llmChain_0-input-model-BaseLanguageModel\"},{\"label\":\"Prompt\",\"name\":\"prompt\",\"type\":\"BasePromptTemplate\",\"id\":\"llmChain_0-input-prompt-BasePromptTemplate\"},{\"label\":\"Output Parser\",\"name\":\"outputParser\",\"type\":\"BaseLLMOutputParser\",\"optional\":true,\"id\":\"llmChain_0-input-outputParser-BaseLLMOutputParser\"},{\"label\":\"Input Moderation\",\"description\":\"Detect text that could generate harmful output and prevent it from being sent to the language model\",\"name\":\"inputModeration\",\"type\":\"Moderation\",\"optional\":true,\"list\":true,\"id\":\"llmChain_0-input-inputModeration-Moderation\"}],\"inputs\":{\"model\":\"{{openAI_1.data.instance}}\",\"prompt\":\"{{promptTemplate_0.data.instance}}\",\"outputParser\":\"\",\"chainName\":\"FirstChain\",\"inputModeration\":\"\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"llmChain_0-output-llmChain-LLMChain|BaseChain|Runnable\",\"name\":\"llmChain\",\"label\":\"LLM Chain\",\"type\":\"LLMChain | BaseChain | Runnable\"},{\"id\":\"llmChain_0-output-outputPrediction-string|json\",\"name\":\"outputPrediction\",\"label\":\"Output Prediction\",\"type\":\"string | json\"}],\"default\":\"llmChain\"}],\"outputs\":{\"output\":\"outputPrediction\"},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":1183.0899727188096,\"y\":385.0159960992951},\"dragging\":false},{\"width\":300,\"height\":508,\"id\":\"llmChain_1\",\"position\":{\"x\":2773.675809586143,\"y\":114.39482869328754},\"type\":\"customNode\",\"data\":{\"id\":\"llmChain_1\",\"label\":\"LLM Chain\",\"version\":3,\"name\":\"llmChain\",\"type\":\"LLMChain\",\"baseClasses\":[\"LLMChain\",\"BaseChain\",\"Runnable\"],\"category\":\"Chains\",\"description\":\"Chain to run queries against LLMs\",\"inputParams\":[{\"label\":\"Chain Name\",\"name\":\"chainName\",\"type\":\"string\",\"placeholder\":\"Name Your Chain\",\"optional\":true,\"id\":\"llmChain_1-input-chainName-string\"}],\"inputAnchors\":[{\"label\":\"Language Model\",\"name\":\"model\",\"type\":\"BaseLanguageModel\",\"id\":\"llmChain_1-input-model-BaseLanguageModel\"},{\"label\":\"Prompt\",\"name\":\"prompt\",\"type\":\"BasePromptTemplate\",\"id\":\"llmChain_1-input-prompt-BasePromptTemplate\"},{\"label\":\"Output Parser\",\"name\":\"outputParser\",\"type\":\"BaseLLMOutputParser\",\"optional\":true,\"id\":\"llmChain_1-input-outputParser-BaseLLMOutputParser\"},{\"label\":\"Input Moderation\",\"description\":\"Detect text that could generate harmful output and prevent it from being sent to the language model\",\"name\":\"inputModeration\",\"type\":\"Moderation\",\"optional\":true,\"list\":true,\"id\":\"llmChain_1-input-inputModeration-Moderation\"}],\"inputs\":{\"model\":\"{{openAI_2.data.instance}}\",\"prompt\":\"{{promptTemplate_1.data.instance}}\",\"outputParser\":\"\",\"chainName\":\"LastChain\",\"inputModeration\":\"\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"llmChain_1-output-llmChain-LLMChain|BaseChain|Runnable\",\"name\":\"llmChain\",\"label\":\"LLM Chain\",\"type\":\"LLMChain | BaseChain | Runnable\"},{\"id\":\"llmChain_1-output-outputPrediction-string|json\",\"name\":\"outputPrediction\",\"label\":\"Output Prediction\",\"type\":\"string | json\"}],\"default\":\"llmChain\"}],\"outputs\":{\"output\":\"llmChain\"},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":2773.675809586143,\"y\":114.39482869328754},\"dragging\":false},{\"width\":300,\"height\":513,\"id\":\"promptTemplate_2\",\"position\":{\"x\":1992.5456174373144,\"y\":675.5277193898106},\"type\":\"customNode\",\"data\":{\"id\":\"promptTemplate_2\",\"label\":\"Prompt Template\",\"version\":1,\"name\":\"promptTemplate\",\"type\":\"PromptTemplate\",\"baseClasses\":[\"PromptTemplate\",\"BaseStringPromptTemplate\",\"BasePromptTemplate\"],\"category\":\"Prompts\",\"description\":\"Schema to represent a basic prompt for an LLM\",\"inputParams\":[{\"label\":\"Template\",\"name\":\"template\",\"type\":\"string\",\"rows\":4,\"placeholder\":\"What is a good name for a company that makes {product}?\",\"id\":\"promptTemplate_2-input-template-string\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"promptTemplate_2-input-promptValues-json\"}],\"inputAnchors\":[],\"inputs\":{\"template\":\"Politely say \\\"I'm not able to answer the query\\\"\",\"promptValues\":\"{\\\"objective\\\":\\\"{{question}}\\\",\\\"result\\\":\\\"\\\"}\"},\"outputAnchors\":[{\"id\":\"promptTemplate_2-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate\",\"name\":\"promptTemplate\",\"label\":\"PromptTemplate\",\"type\":\"PromptTemplate | BaseStringPromptTemplate | BasePromptTemplate\"}],\"outputs\":{},\"selected\":false},\"positionAbsolute\":{\"x\":1992.5456174373144,\"y\":675.5277193898106},\"selected\":false,\"dragging\":false},{\"width\":300,\"height\":508,\"id\":\"llmChain_2\",\"position\":{\"x\":2830.477603228176,\"y\":907.9116984679802},\"type\":\"customNode\",\"data\":{\"id\":\"llmChain_2\",\"label\":\"LLM Chain\",\"version\":3,\"name\":\"llmChain\",\"type\":\"LLMChain\",\"baseClasses\":[\"LLMChain\",\"BaseChain\",\"Runnable\"],\"category\":\"Chains\",\"description\":\"Chain to run queries against LLMs\",\"inputParams\":[{\"label\":\"Chain Name\",\"name\":\"chainName\",\"type\":\"string\",\"placeholder\":\"Name Your Chain\",\"optional\":true,\"id\":\"llmChain_2-input-chainName-string\"}],\"inputAnchors\":[{\"label\":\"Language Model\",\"name\":\"model\",\"type\":\"BaseLanguageModel\",\"id\":\"llmChain_2-input-model-BaseLanguageModel\"},{\"label\":\"Prompt\",\"name\":\"prompt\",\"type\":\"BasePromptTemplate\",\"id\":\"llmChain_2-input-prompt-BasePromptTemplate\"},{\"label\":\"Output Parser\",\"name\":\"outputParser\",\"type\":\"BaseLLMOutputParser\",\"optional\":true,\"id\":\"llmChain_2-input-outputParser-BaseLLMOutputParser\"},{\"label\":\"Input Moderation\",\"description\":\"Detect text that could generate harmful output and prevent it from being sent to the language model\",\"name\":\"inputModeration\",\"type\":\"Moderation\",\"optional\":true,\"list\":true,\"id\":\"llmChain_2-input-inputModeration-Moderation\"}],\"inputs\":{\"model\":\"{{chatOpenAI_0.data.instance}}\",\"prompt\":\"{{promptTemplate_2.data.instance}}\",\"outputParser\":\"\",\"chainName\":\"FallbackChain\",\"inputModeration\":\"\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"llmChain_2-output-llmChain-LLMChain|BaseChain|Runnable\",\"name\":\"llmChain\",\"label\":\"LLM Chain\",\"type\":\"LLMChain | BaseChain | Runnable\"},{\"id\":\"llmChain_2-output-outputPrediction-string|json\",\"name\":\"outputPrediction\",\"label\":\"Output Prediction\",\"type\":\"string | json\"}],\"default\":\"llmChain\"}],\"outputs\":{\"output\":\"llmChain\"},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":2830.477603228176,\"y\":907.9116984679802},\"dragging\":false},{\"width\":300,\"height\":757,\"id\":\"ifElseFunction_0\",\"position\":{\"x\":1590.6560099561739,\"y\":265.36655719326177},\"type\":\"customNode\",\"data\":{\"id\":\"ifElseFunction_0\",\"label\":\"IfElse Function\",\"version\":1,\"name\":\"ifElseFunction\",\"type\":\"IfElseFunction\",\"baseClasses\":[\"IfElseFunction\",\"Utilities\"],\"category\":\"Utilities\",\"description\":\"Split flows based on If Else javascript functions\",\"inputParams\":[{\"label\":\"Input Variables\",\"name\":\"functionInputVariables\",\"description\":\"Input variables can be used in the function with prefix $. For example: $var\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"ifElseFunction_0-input-functionInputVariables-json\"},{\"label\":\"IfElse Name\",\"name\":\"functionName\",\"type\":\"string\",\"optional\":true,\"placeholder\":\"If Condition Match\",\"id\":\"ifElseFunction_0-input-functionName-string\"},{\"label\":\"If Function\",\"name\":\"ifFunction\",\"description\":\"Function must return a value\",\"type\":\"code\",\"rows\":2,\"default\":\"if (\\\"hello\\\" == \\\"hello\\\") {\\n    return true;\\n}\",\"id\":\"ifElseFunction_0-input-ifFunction-code\"},{\"label\":\"Else Function\",\"name\":\"elseFunction\",\"description\":\"Function must return a value\",\"type\":\"code\",\"rows\":2,\"default\":\"return false;\",\"id\":\"ifElseFunction_0-input-elseFunction-code\"}],\"inputAnchors\":[],\"inputs\":{\"functionInputVariables\":\"{\\\"task\\\":\\\"{{llmChain_0.data.instance}}\\\"}\",\"functionName\":\"If Condition Match\",\"ifFunction\":\"if (\\\"hello\\\" == \\\"21\\\") {\\n    return $task;\\n}\",\"elseFunction\":\"return false;\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"ifElseFunction_0-output-returnTrue-string|number|boolean|json|array\",\"name\":\"returnTrue\",\"label\":\"True\",\"type\":\"string | number | boolean | json | array\"},{\"id\":\"ifElseFunction_0-output-returnFalse-string|number|boolean|json|array\",\"name\":\"returnFalse\",\"label\":\"False\",\"type\":\"string | number | boolean | json | array\"}],\"default\":\"returnTrue\"}],\"outputs\":{\"output\":\"returnTrue\"},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":1590.6560099561739,\"y\":265.36655719326177},\"dragging\":false},{\"width\":300,\"height\":576,\"id\":\"chatOpenAI_0\",\"position\":{\"x\":2373.5711587130127,\"y\":487.8533802540226},\"type\":\"customNode\",\"data\":{\"id\":\"chatOpenAI_0\",\"label\":\"ChatOpenAI\",\"version\":3,\"name\":\"chatOpenAI\",\"type\":\"ChatOpenAI\",\"baseClasses\":[\"ChatOpenAI\",\"BaseChatModel\",\"BaseLanguageModel\",\"Runnable\"],\"category\":\"Chat Models\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"chatOpenAI_0-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"options\",\"options\":[{\"label\":\"gpt-4\",\"name\":\"gpt-4\"},{\"label\":\"gpt-4-turbo-preview\",\"name\":\"gpt-4-turbo-preview\"},{\"label\":\"gpt-4-0125-preview\",\"name\":\"gpt-4-0125-preview\"},{\"label\":\"gpt-4-1106-preview\",\"name\":\"gpt-4-1106-preview\"},{\"label\":\"gpt-4-vision-preview\",\"name\":\"gpt-4-vision-preview\"},{\"label\":\"gpt-4-0613\",\"name\":\"gpt-4-0613\"},{\"label\":\"gpt-4-32k\",\"name\":\"gpt-4-32k\"},{\"label\":\"gpt-4-32k-0613\",\"name\":\"gpt-4-32k-0613\"},{\"label\":\"gpt-3.5-turbo\",\"name\":\"gpt-3.5-turbo\"},{\"label\":\"gpt-3.5-turbo-1106\",\"name\":\"gpt-3.5-turbo-1106\"},{\"label\":\"gpt-3.5-turbo-0613\",\"name\":\"gpt-3.5-turbo-0613\"},{\"label\":\"gpt-3.5-turbo-16k\",\"name\":\"gpt-3.5-turbo-16k\"},{\"label\":\"gpt-3.5-turbo-16k-0613\",\"name\":\"gpt-3.5-turbo-16k-0613\"}],\"default\":\"gpt-3.5-turbo\",\"optional\":true,\"id\":\"chatOpenAI_0-input-modelName-options\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"step\":0.1,\"default\":0.9,\"optional\":true,\"id\":\"chatOpenAI_0-input-temperature-number\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-topP-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-presencePenalty-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-basepath-string\"},{\"label\":\"BaseOptions\",\"name\":\"baseOptions\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-baseOptions-json\"}],\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"chatOpenAI_0-input-cache-BaseCache\"}],\"inputs\":{\"cache\":\"\",\"modelName\":\"gpt-3.5-turbo\",\"temperature\":0.9,\"maxTokens\":\"\",\"topP\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"timeout\":\"\",\"basepath\":\"\",\"baseOptions\":\"\"},\"outputAnchors\":[{\"id\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"name\":\"chatOpenAI\",\"label\":\"ChatOpenAI\",\"type\":\"ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable\"}],\"outputs\":{},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":2373.5711587130127,\"y\":487.8533802540226},\"dragging\":false}],\"edges\":[{\"source\":\"openAI_1\",\"sourceHandle\":\"openAI_1-output-openAI-OpenAI|BaseLLM|BaseLanguageModel\",\"target\":\"llmChain_0\",\"targetHandle\":\"llmChain_0-input-model-BaseLanguageModel\",\"type\":\"buttonedge\",\"id\":\"openAI_1-openAI_1-output-openAI-OpenAI|BaseLLM|BaseLanguageModel-llmChain_0-llmChain_0-input-model-BaseLanguageModel\",\"data\":{\"label\":\"\"}},{\"source\":\"promptTemplate_0\",\"sourceHandle\":\"promptTemplate_0-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate\",\"target\":\"llmChain_0\",\"targetHandle\":\"llmChain_0-input-prompt-BasePromptTemplate\",\"type\":\"buttonedge\",\"id\":\"promptTemplate_0-promptTemplate_0-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate-llmChain_0-llmChain_0-input-prompt-BasePromptTemplate\",\"data\":{\"label\":\"\"}},{\"source\":\"promptTemplate_1\",\"sourceHandle\":\"promptTemplate_1-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate\",\"target\":\"llmChain_1\",\"targetHandle\":\"llmChain_1-input-prompt-BasePromptTemplate\",\"type\":\"buttonedge\",\"id\":\"promptTemplate_1-promptTemplate_1-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate-llmChain_1-llmChain_1-input-prompt-BasePromptTemplate\",\"data\":{\"label\":\"\"}},{\"source\":\"openAI_2\",\"sourceHandle\":\"openAI_2-output-openAI-OpenAI|BaseLLM|BaseLanguageModel\",\"target\":\"llmChain_1\",\"targetHandle\":\"llmChain_1-input-model-BaseLanguageModel\",\"type\":\"buttonedge\",\"id\":\"openAI_2-openAI_2-output-openAI-OpenAI|BaseLLM|BaseLanguageModel-llmChain_1-llmChain_1-input-model-BaseLanguageModel\",\"data\":{\"label\":\"\"}},{\"source\":\"promptTemplate_2\",\"sourceHandle\":\"promptTemplate_2-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate\",\"target\":\"llmChain_2\",\"targetHandle\":\"llmChain_2-input-prompt-BasePromptTemplate\",\"type\":\"buttonedge\",\"id\":\"promptTemplate_2-promptTemplate_2-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate-llmChain_2-llmChain_2-input-prompt-BasePromptTemplate\"},{\"source\":\"llmChain_0\",\"sourceHandle\":\"llmChain_0-output-outputPrediction-string|json\",\"target\":\"ifElseFunction_0\",\"targetHandle\":\"ifElseFunction_0-input-functionInputVariables-json\",\"type\":\"buttonedge\",\"id\":\"llmChain_0-llmChain_0-output-outputPrediction-string|json-ifElseFunction_0-ifElseFunction_0-input-functionInputVariables-json\"},{\"source\":\"ifElseFunction_0\",\"sourceHandle\":\"ifElseFunction_0-output-returnFalse-string|number|boolean|json|array\",\"target\":\"promptTemplate_2\",\"targetHandle\":\"promptTemplate_2-input-promptValues-json\",\"type\":\"buttonedge\",\"id\":\"ifElseFunction_0-ifElseFunction_0-output-returnFalse-string|number|boolean|json|array-promptTemplate_2-promptTemplate_2-input-promptValues-json\"},{\"source\":\"ifElseFunction_0\",\"sourceHandle\":\"ifElseFunction_0-output-returnTrue-string|number|boolean|json|array\",\"target\":\"promptTemplate_1\",\"targetHandle\":\"promptTemplate_1-input-promptValues-json\",\"type\":\"buttonedge\",\"id\":\"ifElseFunction_0-ifElseFunction_0-output-returnTrue-string|number|boolean|json|array-promptTemplate_1-promptTemplate_1-input-promptValues-json\"},{\"source\":\"chatOpenAI_0\",\"sourceHandle\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"target\":\"llmChain_2\",\"targetHandle\":\"llmChain_2-input-model-BaseLanguageModel\",\"type\":\"buttonedge\",\"id\":\"chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-llmChain_2-llmChain_2-input-model-BaseLanguageModel\"}],\"viewport\":{\"x\":28.865878710549282,\"y\":139.93111241969265,\"zoom\":0.35243174341631983}}","isPublic":false,"name":"If Else Chain"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"27210","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/chatflows"},"timestamp":"2024-03-05 11:31:54"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"72","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 11:32:57"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"72","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 11:32:58"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"72","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 11:33:16"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 11:33:36"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73","package":"server","request":{"body":{"history":[],"question":"hi","socketIOClientId":"wG0kahHCMPjGVsNNAAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"72","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73"},"timestamp":"2024-03-05 11:42:30"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73","package":"server","request":{"body":{"history":[{"message":"hi","type":"userMessage"},{"message":"Error: OpenAI or Azure OpenAI API key not found","type":"apiMessage"}],"question":"hello","socketIOClientId":"wG0kahHCMPjGVsNNAAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"194","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73"},"timestamp":"2024-03-05 11:42:37"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73","package":"server","request":{"body":{"history":[{"message":"hi","type":"userMessage"},{"message":"Error: OpenAI or Azure OpenAI API key not found","type":"apiMessage"},{"message":"hello","type":"userMessage"},{"message":"Error: OpenAI or Azure OpenAI API key not found","type":"apiMessage"}],"question":"aretyuop[]\\","socketIOClientId":"wG0kahHCMPjGVsNNAAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"324","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73"},"timestamp":"2024-03-05 11:42:40"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 12:39:48"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 12:39:49"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 12:39:50"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 12:39:50"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 12:39:51"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 12:39:51"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 12:39:52"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 12:39:53"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 12:39:56"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"149","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 13:07:16"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 13:08:41"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"228","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:34:55"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if ($task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"229","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:35:24"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"228","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:35:30"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"appointment\")) {\n    return \"To schedule an appointment, please visit our patient portal or contact our office directly at [phone number].\";\n} else {\n    return \"I'm here to help! Could you please provide a bit more detail about your inquiry?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"300","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:35:40"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:36:02"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"228","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:36:14"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"228","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:37:17"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"228","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:37:49"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-config","package":"server","request":{"body":{"baseClasses":["IfElseFunction","Utilities"],"category":"Utilities","description":"Split flows based on If Else javascript functions","id":"ifElseFunction_0","inputAnchors":[],"inputParams":[{"acceptVariable":true,"description":"Input variables can be used in the function with prefix $. For example: $var","id":"ifElseFunction_0-input-functionInputVariables-json","label":"Input Variables","list":true,"name":"functionInputVariables","optional":true,"type":"json"},{"id":"ifElseFunction_0-input-functionName-string","label":"IfElse Name","name":"functionName","optional":true,"placeholder":"If Condition Match","type":"string"},{"default":"if (\"hello\" == \"hello\") {\n    return true;\n}","description":"Function must return a value","id":"ifElseFunction_0-input-ifFunction-code","label":"If Function","name":"ifFunction","rows":2,"type":"code"},{"default":"return false;","description":"Function must return a value","id":"ifElseFunction_0-input-elseFunction-code","label":"Else Function","name":"elseFunction","rows":2,"type":"code"}],"inputs":{"elseFunction":"if (task.includes(\"appointment\")) {\n    return \"To schedule an appointment, please visit our patient portal or contact our office directly at [phone number].\";\n} else {\n    return \"I'm here to help! Could you please provide a bit more detail about your inquiry?\";\n}","functionInputVariables":"{\"task\":\"{{llmChain_0.data.instance}}\"}","functionName":"If Condition Match","ifFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"label":"IfElse Function","name":"ifElseFunction","outputAnchors":[{"default":"returnTrue","label":"Output","name":"output","options":[{"id":"ifElseFunction_0-output-returnTrue-string|number|boolean|json|array","label":"True","name":"returnTrue","type":"string | number | boolean | json | array"},{"id":"ifElseFunction_0-output-returnFalse-string|number|boolean|json|array","label":"False","name":"returnFalse","type":"string | number | boolean | json | array"}],"type":"options"}],"outputs":{"output":"returnTrue"},"selected":true,"type":"IfElseFunction","version":1},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"2240","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-config"},"timestamp":"2024-03-05 15:38:21"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"appointment\")) {\n    return \"To schedule an appointment, please visit our patient portal or contact our office directly at [phone number].\";\n} else {\n    return \"I'm here to help! Could you please provide a bit more detail about your inquiry?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"300","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:40:41"}
{"level":"info","message":"üñä PUT /api/v1/chatflows/36f494a9-c6be-49ca-9521-3d211df74b73","package":"server","request":{"body":{"flowData":"{\"nodes\":[{\"width\":300,\"height\":513,\"id\":\"promptTemplate_0\",\"position\":{\"x\":792.9464838535649,\"y\":527.1718536712464},\"type\":\"customNode\",\"data\":{\"id\":\"promptTemplate_0\",\"label\":\"Prompt Template\",\"version\":1,\"name\":\"promptTemplate\",\"type\":\"PromptTemplate\",\"baseClasses\":[\"PromptTemplate\",\"BaseStringPromptTemplate\",\"BasePromptTemplate\"],\"category\":\"Prompts\",\"description\":\"Schema to represent a basic prompt for an LLM\",\"inputParams\":[{\"label\":\"Template\",\"name\":\"template\",\"type\":\"string\",\"rows\":4,\"placeholder\":\"What is a good name for a company that makes {product}?\",\"id\":\"promptTemplate_0-input-template-string\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"promptTemplate_0-input-promptValues-json\"}],\"inputAnchors\":[],\"inputs\":{\"template\":\"You are an AI who performs one task based on the following objective: {objective}.\\nRespond with how you would complete this task:\",\"promptValues\":\"{\\\"objective\\\":\\\"{{question}}\\\"}\"},\"outputAnchors\":[{\"id\":\"promptTemplate_0-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate\",\"name\":\"promptTemplate\",\"label\":\"PromptTemplate\",\"type\":\"PromptTemplate | BaseStringPromptTemplate | BasePromptTemplate\"}],\"outputs\":{},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":792.9464838535649,\"y\":527.1718536712464},\"dragging\":false},{\"width\":300,\"height\":513,\"id\":\"promptTemplate_1\",\"position\":{\"x\":1999.3914674817397,\"y\":-14.648035759690174},\"type\":\"customNode\",\"data\":{\"id\":\"promptTemplate_1\",\"label\":\"Prompt Template\",\"version\":1,\"name\":\"promptTemplate\",\"type\":\"PromptTemplate\",\"baseClasses\":[\"PromptTemplate\",\"BaseStringPromptTemplate\",\"BasePromptTemplate\"],\"category\":\"Prompts\",\"description\":\"Schema to represent a basic prompt for an LLM\",\"inputParams\":[{\"label\":\"Template\",\"name\":\"template\",\"type\":\"string\",\"rows\":4,\"placeholder\":\"What is a good name for a company that makes {product}?\",\"id\":\"promptTemplate_1-input-template-string\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"promptTemplate_1-input-promptValues-json\"}],\"inputAnchors\":[],\"inputs\":{\"template\":\"You are a task creation AI that uses the result of an execution agent to create new tasks with the following objective: {objective}.\\nThe last completed task has the result: {result}.\\nBased on the result, create new tasks to be completed by the AI system that do not overlap with result.\\nReturn the tasks as an array.\",\"promptValues\":\"{\\\"objective\\\":\\\"{{question}}\\\",\\\"result\\\":\\\"{{ifElseFunction_0.data.instance}}\\\"}\"},\"outputAnchors\":[{\"id\":\"promptTemplate_1-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate\",\"name\":\"promptTemplate\",\"label\":\"PromptTemplate\",\"type\":\"PromptTemplate | BaseStringPromptTemplate | BasePromptTemplate\"}],\"outputs\":{},\"selected\":false},\"positionAbsolute\":{\"x\":1999.3914674817397,\"y\":-14.648035759690174},\"selected\":false,\"dragging\":false},{\"width\":300,\"height\":576,\"id\":\"openAI_1\",\"position\":{\"x\":791.6102007244282,\"y\":-83.71386876566092},\"type\":\"customNode\",\"data\":{\"id\":\"openAI_1\",\"label\":\"OpenAI\",\"version\":3,\"name\":\"openAI\",\"type\":\"OpenAI\",\"baseClasses\":[\"OpenAI\",\"BaseLLM\",\"BaseLanguageModel\"],\"category\":\"LLMs\",\"description\":\"Wrapper around OpenAI large language models\",\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"openAI_1-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"options\",\"options\":[{\"label\":\"gpt-3.5-turbo-instruct\",\"name\":\"gpt-3.5-turbo-instruct\"},{\"label\":\"babbage-002\",\"name\":\"babbage-002\"},{\"label\":\"davinci-002\",\"name\":\"davinci-002\"}],\"default\":\"gpt-3.5-turbo-instruct\",\"optional\":true,\"id\":\"openAI_1-input-modelName-options\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"default\":0.7,\"optional\":true,\"id\":\"openAI_1-input-temperature-number\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_1-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_1-input-topP-number\"},{\"label\":\"Best Of\",\"name\":\"bestOf\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_1-input-bestOf-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_1-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_1-input-presencePenalty-number\"},{\"label\":\"Batch Size\",\"name\":\"batchSize\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_1-input-batchSize-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_1-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_1-input-basepath-string\"}],\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"openAI_1-input-cache-BaseCache\"}],\"inputs\":{\"modelName\":\"gpt-3.5-turbo-instruct\",\"temperature\":0.7,\"maxTokens\":\"\",\"topP\":\"\",\"bestOf\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"batchSize\":\"\",\"timeout\":\"\",\"basepath\":\"\"},\"outputAnchors\":[{\"id\":\"openAI_1-output-openAI-OpenAI|BaseLLM|BaseLanguageModel\",\"name\":\"openAI\",\"label\":\"OpenAI\",\"type\":\"OpenAI | BaseLLM | BaseLanguageModel\"}],\"outputs\":{},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":791.6102007244282,\"y\":-83.71386876566092},\"dragging\":false},{\"width\":300,\"height\":576,\"id\":\"openAI_2\",\"position\":{\"x\":2340.5995455075863,\"y\":-310.7609446553905},\"type\":\"customNode\",\"data\":{\"id\":\"openAI_2\",\"label\":\"OpenAI\",\"version\":3,\"name\":\"openAI\",\"type\":\"OpenAI\",\"baseClasses\":[\"OpenAI\",\"BaseLLM\",\"BaseLanguageModel\"],\"category\":\"LLMs\",\"description\":\"Wrapper around OpenAI large language models\",\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"openAI_2-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"options\",\"options\":[{\"label\":\"gpt-3.5-turbo-instruct\",\"name\":\"gpt-3.5-turbo-instruct\"},{\"label\":\"babbage-002\",\"name\":\"babbage-002\"},{\"label\":\"davinci-002\",\"name\":\"davinci-002\"}],\"default\":\"gpt-3.5-turbo-instruct\",\"optional\":true,\"id\":\"openAI_2-input-modelName-options\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"default\":0.7,\"optional\":true,\"id\":\"openAI_2-input-temperature-number\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_2-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_2-input-topP-number\"},{\"label\":\"Best Of\",\"name\":\"bestOf\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_2-input-bestOf-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_2-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_2-input-presencePenalty-number\"},{\"label\":\"Batch Size\",\"name\":\"batchSize\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_2-input-batchSize-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_2-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAI_2-input-basepath-string\"}],\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"openAI_2-input-cache-BaseCache\"}],\"inputs\":{\"modelName\":\"gpt-3.5-turbo-instruct\",\"temperature\":0.7,\"maxTokens\":\"\",\"topP\":\"\",\"bestOf\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"batchSize\":\"\",\"timeout\":\"\",\"basepath\":\"\"},\"outputAnchors\":[{\"id\":\"openAI_2-output-openAI-OpenAI|BaseLLM|BaseLanguageModel\",\"name\":\"openAI\",\"label\":\"OpenAI\",\"type\":\"OpenAI | BaseLLM | BaseLanguageModel\"}],\"outputs\":{},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":2340.5995455075863,\"y\":-310.7609446553905},\"dragging\":false},{\"width\":300,\"height\":508,\"id\":\"llmChain_0\",\"position\":{\"x\":1183.0899727188096,\"y\":385.0159960992951},\"type\":\"customNode\",\"data\":{\"id\":\"llmChain_0\",\"label\":\"LLM Chain\",\"version\":3,\"name\":\"llmChain\",\"type\":\"LLMChain\",\"baseClasses\":[\"LLMChain\",\"BaseChain\",\"Runnable\"],\"category\":\"Chains\",\"description\":\"Chain to run queries against LLMs\",\"inputParams\":[{\"label\":\"Chain Name\",\"name\":\"chainName\",\"type\":\"string\",\"placeholder\":\"Name Your Chain\",\"optional\":true,\"id\":\"llmChain_0-input-chainName-string\"}],\"inputAnchors\":[{\"label\":\"Language Model\",\"name\":\"model\",\"type\":\"BaseLanguageModel\",\"id\":\"llmChain_0-input-model-BaseLanguageModel\"},{\"label\":\"Prompt\",\"name\":\"prompt\",\"type\":\"BasePromptTemplate\",\"id\":\"llmChain_0-input-prompt-BasePromptTemplate\"},{\"label\":\"Output Parser\",\"name\":\"outputParser\",\"type\":\"BaseLLMOutputParser\",\"optional\":true,\"id\":\"llmChain_0-input-outputParser-BaseLLMOutputParser\"},{\"label\":\"Input Moderation\",\"description\":\"Detect text that could generate harmful output and prevent it from being sent to the language model\",\"name\":\"inputModeration\",\"type\":\"Moderation\",\"optional\":true,\"list\":true,\"id\":\"llmChain_0-input-inputModeration-Moderation\"}],\"inputs\":{\"model\":\"{{openAI_1.data.instance}}\",\"prompt\":\"{{promptTemplate_0.data.instance}}\",\"outputParser\":\"\",\"chainName\":\"FirstChain\",\"inputModeration\":\"\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"llmChain_0-output-llmChain-LLMChain|BaseChain|Runnable\",\"name\":\"llmChain\",\"label\":\"LLM Chain\",\"type\":\"LLMChain | BaseChain | Runnable\"},{\"id\":\"llmChain_0-output-outputPrediction-string|json\",\"name\":\"outputPrediction\",\"label\":\"Output Prediction\",\"type\":\"string | json\"}],\"default\":\"llmChain\"}],\"outputs\":{\"output\":\"outputPrediction\"},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":1183.0899727188096,\"y\":385.0159960992951},\"dragging\":false},{\"width\":300,\"height\":508,\"id\":\"llmChain_1\",\"position\":{\"x\":2773.675809586143,\"y\":114.39482869328754},\"type\":\"customNode\",\"data\":{\"id\":\"llmChain_1\",\"label\":\"LLM Chain\",\"version\":3,\"name\":\"llmChain\",\"type\":\"LLMChain\",\"baseClasses\":[\"LLMChain\",\"BaseChain\",\"Runnable\"],\"category\":\"Chains\",\"description\":\"Chain to run queries against LLMs\",\"inputParams\":[{\"label\":\"Chain Name\",\"name\":\"chainName\",\"type\":\"string\",\"placeholder\":\"Name Your Chain\",\"optional\":true,\"id\":\"llmChain_1-input-chainName-string\"}],\"inputAnchors\":[{\"label\":\"Language Model\",\"name\":\"model\",\"type\":\"BaseLanguageModel\",\"id\":\"llmChain_1-input-model-BaseLanguageModel\"},{\"label\":\"Prompt\",\"name\":\"prompt\",\"type\":\"BasePromptTemplate\",\"id\":\"llmChain_1-input-prompt-BasePromptTemplate\"},{\"label\":\"Output Parser\",\"name\":\"outputParser\",\"type\":\"BaseLLMOutputParser\",\"optional\":true,\"id\":\"llmChain_1-input-outputParser-BaseLLMOutputParser\"},{\"label\":\"Input Moderation\",\"description\":\"Detect text that could generate harmful output and prevent it from being sent to the language model\",\"name\":\"inputModeration\",\"type\":\"Moderation\",\"optional\":true,\"list\":true,\"id\":\"llmChain_1-input-inputModeration-Moderation\"}],\"inputs\":{\"model\":\"{{openAI_2.data.instance}}\",\"prompt\":\"{{promptTemplate_1.data.instance}}\",\"outputParser\":\"\",\"chainName\":\"LastChain\",\"inputModeration\":\"\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"llmChain_1-output-llmChain-LLMChain|BaseChain|Runnable\",\"name\":\"llmChain\",\"label\":\"LLM Chain\",\"type\":\"LLMChain | BaseChain | Runnable\"},{\"id\":\"llmChain_1-output-outputPrediction-string|json\",\"name\":\"outputPrediction\",\"label\":\"Output Prediction\",\"type\":\"string | json\"}],\"default\":\"llmChain\"}],\"outputs\":{\"output\":\"llmChain\"},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":2773.675809586143,\"y\":114.39482869328754},\"dragging\":false},{\"width\":300,\"height\":513,\"id\":\"promptTemplate_2\",\"position\":{\"x\":1992.5456174373144,\"y\":675.5277193898106},\"type\":\"customNode\",\"data\":{\"id\":\"promptTemplate_2\",\"label\":\"Prompt Template\",\"version\":1,\"name\":\"promptTemplate\",\"type\":\"PromptTemplate\",\"baseClasses\":[\"PromptTemplate\",\"BaseStringPromptTemplate\",\"BasePromptTemplate\"],\"category\":\"Prompts\",\"description\":\"Schema to represent a basic prompt for an LLM\",\"inputParams\":[{\"label\":\"Template\",\"name\":\"template\",\"type\":\"string\",\"rows\":4,\"placeholder\":\"What is a good name for a company that makes {product}?\",\"id\":\"promptTemplate_2-input-template-string\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"promptTemplate_2-input-promptValues-json\"}],\"inputAnchors\":[],\"inputs\":{\"template\":\"Politely say \\\"I'm not able to answer the query\\\"\",\"promptValues\":\"{\\\"objective\\\":\\\"{{question}}\\\",\\\"result\\\":\\\"\\\"}\"},\"outputAnchors\":[{\"id\":\"promptTemplate_2-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate\",\"name\":\"promptTemplate\",\"label\":\"PromptTemplate\",\"type\":\"PromptTemplate | BaseStringPromptTemplate | BasePromptTemplate\"}],\"outputs\":{},\"selected\":false},\"positionAbsolute\":{\"x\":1992.5456174373144,\"y\":675.5277193898106},\"selected\":false,\"dragging\":false},{\"width\":300,\"height\":508,\"id\":\"llmChain_2\",\"position\":{\"x\":2830.477603228176,\"y\":907.9116984679802},\"type\":\"customNode\",\"data\":{\"id\":\"llmChain_2\",\"label\":\"LLM Chain\",\"version\":3,\"name\":\"llmChain\",\"type\":\"LLMChain\",\"baseClasses\":[\"LLMChain\",\"BaseChain\",\"Runnable\"],\"category\":\"Chains\",\"description\":\"Chain to run queries against LLMs\",\"inputParams\":[{\"label\":\"Chain Name\",\"name\":\"chainName\",\"type\":\"string\",\"placeholder\":\"Name Your Chain\",\"optional\":true,\"id\":\"llmChain_2-input-chainName-string\"}],\"inputAnchors\":[{\"label\":\"Language Model\",\"name\":\"model\",\"type\":\"BaseLanguageModel\",\"id\":\"llmChain_2-input-model-BaseLanguageModel\"},{\"label\":\"Prompt\",\"name\":\"prompt\",\"type\":\"BasePromptTemplate\",\"id\":\"llmChain_2-input-prompt-BasePromptTemplate\"},{\"label\":\"Output Parser\",\"name\":\"outputParser\",\"type\":\"BaseLLMOutputParser\",\"optional\":true,\"id\":\"llmChain_2-input-outputParser-BaseLLMOutputParser\"},{\"label\":\"Input Moderation\",\"description\":\"Detect text that could generate harmful output and prevent it from being sent to the language model\",\"name\":\"inputModeration\",\"type\":\"Moderation\",\"optional\":true,\"list\":true,\"id\":\"llmChain_2-input-inputModeration-Moderation\"}],\"inputs\":{\"model\":\"{{chatOpenAI_0.data.instance}}\",\"prompt\":\"{{promptTemplate_2.data.instance}}\",\"outputParser\":\"\",\"chainName\":\"FallbackChain\",\"inputModeration\":\"\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"llmChain_2-output-llmChain-LLMChain|BaseChain|Runnable\",\"name\":\"llmChain\",\"label\":\"LLM Chain\",\"type\":\"LLMChain | BaseChain | Runnable\"},{\"id\":\"llmChain_2-output-outputPrediction-string|json\",\"name\":\"outputPrediction\",\"label\":\"Output Prediction\",\"type\":\"string | json\"}],\"default\":\"llmChain\"}],\"outputs\":{\"output\":\"llmChain\"},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":2830.477603228176,\"y\":907.9116984679802},\"dragging\":false},{\"width\":300,\"height\":757,\"id\":\"ifElseFunction_0\",\"position\":{\"x\":1607.6904485878842,\"y\":246.91258200890877},\"type\":\"customNode\",\"data\":{\"id\":\"ifElseFunction_0\",\"label\":\"IfElse Function\",\"version\":1,\"name\":\"ifElseFunction\",\"type\":\"IfElseFunction\",\"baseClasses\":[\"IfElseFunction\",\"Utilities\"],\"category\":\"Utilities\",\"description\":\"Split flows based on If Else javascript functions\",\"inputParams\":[{\"label\":\"Input Variables\",\"name\":\"functionInputVariables\",\"description\":\"Input variables can be used in the function with prefix $. For example: $var\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"ifElseFunction_0-input-functionInputVariables-json\"},{\"label\":\"IfElse Name\",\"name\":\"functionName\",\"type\":\"string\",\"optional\":true,\"placeholder\":\"If Condition Match\",\"id\":\"ifElseFunction_0-input-functionName-string\"},{\"label\":\"If Function\",\"name\":\"ifFunction\",\"description\":\"Function must return a value\",\"type\":\"code\",\"rows\":2,\"default\":\"if (\\\"hello\\\" == \\\"hello\\\") {\\n    return true;\\n}\",\"id\":\"ifElseFunction_0-input-ifFunction-code\"},{\"label\":\"Else Function\",\"name\":\"elseFunction\",\"description\":\"Function must return a value\",\"type\":\"code\",\"rows\":2,\"default\":\"return false;\",\"id\":\"ifElseFunction_0-input-elseFunction-code\"}],\"inputAnchors\":[],\"inputs\":{\"functionInputVariables\":\"{\\\"task\\\":\\\"{{llmChain_0.data.instance}}\\\"}\",\"functionName\":\"If Condition Match\",\"ifFunction\":\"if (task.includes(\\\"clinical trial\\\")) {\\n    return \\\"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\\\";\\n}\",\"elseFunction\":\"if (task.includes(\\\"appointment\\\")) {\\n    return \\\"To schedule an appointment, please visit our patient portal or contact our office directly at [phone number].\\\";\\n} else {\\n    return \\\"I'm here to help! Could you please provide a bit more detail about your inquiry?\\\";\\n}\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"ifElseFunction_0-output-returnTrue-string|number|boolean|json|array\",\"name\":\"returnTrue\",\"label\":\"True\",\"type\":\"string | number | boolean | json | array\"},{\"id\":\"ifElseFunction_0-output-returnFalse-string|number|boolean|json|array\",\"name\":\"returnFalse\",\"label\":\"False\",\"type\":\"string | number | boolean | json | array\"}],\"default\":\"returnTrue\"}],\"outputs\":{\"output\":\"returnTrue\"},\"selected\":false},\"selected\":true,\"positionAbsolute\":{\"x\":1607.6904485878842,\"y\":246.91258200890877},\"dragging\":false},{\"width\":300,\"height\":576,\"id\":\"chatOpenAI_0\",\"position\":{\"x\":2373.5711587130127,\"y\":487.8533802540226},\"type\":\"customNode\",\"data\":{\"id\":\"chatOpenAI_0\",\"label\":\"ChatOpenAI\",\"version\":3,\"name\":\"chatOpenAI\",\"type\":\"ChatOpenAI\",\"baseClasses\":[\"ChatOpenAI\",\"BaseChatModel\",\"BaseLanguageModel\",\"Runnable\"],\"category\":\"Chat Models\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"chatOpenAI_0-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"options\",\"options\":[{\"label\":\"gpt-4\",\"name\":\"gpt-4\"},{\"label\":\"gpt-4-turbo-preview\",\"name\":\"gpt-4-turbo-preview\"},{\"label\":\"gpt-4-0125-preview\",\"name\":\"gpt-4-0125-preview\"},{\"label\":\"gpt-4-1106-preview\",\"name\":\"gpt-4-1106-preview\"},{\"label\":\"gpt-4-vision-preview\",\"name\":\"gpt-4-vision-preview\"},{\"label\":\"gpt-4-0613\",\"name\":\"gpt-4-0613\"},{\"label\":\"gpt-4-32k\",\"name\":\"gpt-4-32k\"},{\"label\":\"gpt-4-32k-0613\",\"name\":\"gpt-4-32k-0613\"},{\"label\":\"gpt-3.5-turbo\",\"name\":\"gpt-3.5-turbo\"},{\"label\":\"gpt-3.5-turbo-1106\",\"name\":\"gpt-3.5-turbo-1106\"},{\"label\":\"gpt-3.5-turbo-0613\",\"name\":\"gpt-3.5-turbo-0613\"},{\"label\":\"gpt-3.5-turbo-16k\",\"name\":\"gpt-3.5-turbo-16k\"},{\"label\":\"gpt-3.5-turbo-16k-0613\",\"name\":\"gpt-3.5-turbo-16k-0613\"}],\"default\":\"gpt-3.5-turbo\",\"optional\":true,\"id\":\"chatOpenAI_0-input-modelName-options\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"step\":0.1,\"default\":0.9,\"optional\":true,\"id\":\"chatOpenAI_0-input-temperature-number\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-topP-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-presencePenalty-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-basepath-string\"},{\"label\":\"BaseOptions\",\"name\":\"baseOptions\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-baseOptions-json\"}],\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"chatOpenAI_0-input-cache-BaseCache\"}],\"inputs\":{\"cache\":\"\",\"modelName\":\"gpt-3.5-turbo\",\"temperature\":0.9,\"maxTokens\":\"\",\"topP\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"timeout\":\"\",\"basepath\":\"\",\"baseOptions\":\"\"},\"outputAnchors\":[{\"id\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"name\":\"chatOpenAI\",\"label\":\"ChatOpenAI\",\"type\":\"ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable\"}],\"outputs\":{},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":2373.5711587130127,\"y\":487.8533802540226},\"dragging\":false}],\"edges\":[{\"source\":\"openAI_1\",\"sourceHandle\":\"openAI_1-output-openAI-OpenAI|BaseLLM|BaseLanguageModel\",\"target\":\"llmChain_0\",\"targetHandle\":\"llmChain_0-input-model-BaseLanguageModel\",\"type\":\"buttonedge\",\"id\":\"openAI_1-openAI_1-output-openAI-OpenAI|BaseLLM|BaseLanguageModel-llmChain_0-llmChain_0-input-model-BaseLanguageModel\",\"data\":{\"label\":\"\"}},{\"source\":\"promptTemplate_0\",\"sourceHandle\":\"promptTemplate_0-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate\",\"target\":\"llmChain_0\",\"targetHandle\":\"llmChain_0-input-prompt-BasePromptTemplate\",\"type\":\"buttonedge\",\"id\":\"promptTemplate_0-promptTemplate_0-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate-llmChain_0-llmChain_0-input-prompt-BasePromptTemplate\",\"data\":{\"label\":\"\"}},{\"source\":\"promptTemplate_1\",\"sourceHandle\":\"promptTemplate_1-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate\",\"target\":\"llmChain_1\",\"targetHandle\":\"llmChain_1-input-prompt-BasePromptTemplate\",\"type\":\"buttonedge\",\"id\":\"promptTemplate_1-promptTemplate_1-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate-llmChain_1-llmChain_1-input-prompt-BasePromptTemplate\",\"data\":{\"label\":\"\"}},{\"source\":\"openAI_2\",\"sourceHandle\":\"openAI_2-output-openAI-OpenAI|BaseLLM|BaseLanguageModel\",\"target\":\"llmChain_1\",\"targetHandle\":\"llmChain_1-input-model-BaseLanguageModel\",\"type\":\"buttonedge\",\"id\":\"openAI_2-openAI_2-output-openAI-OpenAI|BaseLLM|BaseLanguageModel-llmChain_1-llmChain_1-input-model-BaseLanguageModel\",\"data\":{\"label\":\"\"}},{\"source\":\"promptTemplate_2\",\"sourceHandle\":\"promptTemplate_2-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate\",\"target\":\"llmChain_2\",\"targetHandle\":\"llmChain_2-input-prompt-BasePromptTemplate\",\"type\":\"buttonedge\",\"id\":\"promptTemplate_2-promptTemplate_2-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate-llmChain_2-llmChain_2-input-prompt-BasePromptTemplate\"},{\"source\":\"llmChain_0\",\"sourceHandle\":\"llmChain_0-output-outputPrediction-string|json\",\"target\":\"ifElseFunction_0\",\"targetHandle\":\"ifElseFunction_0-input-functionInputVariables-json\",\"type\":\"buttonedge\",\"id\":\"llmChain_0-llmChain_0-output-outputPrediction-string|json-ifElseFunction_0-ifElseFunction_0-input-functionInputVariables-json\"},{\"source\":\"ifElseFunction_0\",\"sourceHandle\":\"ifElseFunction_0-output-returnFalse-string|number|boolean|json|array\",\"target\":\"promptTemplate_2\",\"targetHandle\":\"promptTemplate_2-input-promptValues-json\",\"type\":\"buttonedge\",\"id\":\"ifElseFunction_0-ifElseFunction_0-output-returnFalse-string|number|boolean|json|array-promptTemplate_2-promptTemplate_2-input-promptValues-json\"},{\"source\":\"ifElseFunction_0\",\"sourceHandle\":\"ifElseFunction_0-output-returnTrue-string|number|boolean|json|array\",\"target\":\"promptTemplate_1\",\"targetHandle\":\"promptTemplate_1-input-promptValues-json\",\"type\":\"buttonedge\",\"id\":\"ifElseFunction_0-ifElseFunction_0-output-returnTrue-string|number|boolean|json|array-promptTemplate_1-promptTemplate_1-input-promptValues-json\"},{\"source\":\"chatOpenAI_0\",\"sourceHandle\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"target\":\"llmChain_2\",\"targetHandle\":\"llmChain_2-input-model-BaseLanguageModel\",\"type\":\"buttonedge\",\"id\":\"chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-llmChain_2-llmChain_2-input-model-BaseLanguageModel\"}],\"viewport\":{\"x\":-602.8225378933357,\"y\":-140.1095304401872,\"zoom\":0.70445526614898}}","name":"If Else Chain"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"27605","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/chatflows/36f494a9-c6be-49ca-9521-3d211df74b73"},"timestamp":"2024-03-05 15:42:49"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:46:30"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"228","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:47:36"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const task = input.task;\nif (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"254","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:49:49"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"228","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:50:45"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"228","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:53:12"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:54:34"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73","package":"server","request":{"body":{"history":[],"question":"21","socketIOClientId":"Ekloip3qgkAUBIspAAAF"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"72","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73"},"timestamp":"2024-03-05 15:54:40"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73","package":"server","request":{"body":{"history":[{"message":"21","type":"userMessage"},{"message":"Error: OpenAI or Azure OpenAI API key not found","type":"apiMessage"}],"question":"task","socketIOClientId":"Ekloip3qgkAUBIspAAAF"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"193","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73"},"timestamp":"2024-03-05 15:54:44"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73","package":"server","request":{"body":{"history":[{"message":"21","type":"userMessage"},{"message":"Error: OpenAI or Azure OpenAI API key not found","type":"apiMessage"},{"message":"task","type":"userMessage"},{"message":"Error: OpenAI or Azure OpenAI API key not found","type":"apiMessage"}],"question":"false","socketIOClientId":"Ekloip3qgkAUBIspAAAF"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"316","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73"},"timestamp":"2024-03-05 15:54:48"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const sqlQuery = $sqlQuery.trim();\n\nif (sqlQuery.includes(\"SELECT\") && sqlQuery.includes(\"WHERE\")) {\n    return sqlQuery;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"156","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:56:53"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const HOST = 'singlestore-host.com';\nconst USER = 'admin';\nconst PASSWORD = 'mypassword';\nconst DATABASE = 'mydb';\nconst TABLE = 'samples';\nconst mysql = require('mysql2/promise');\n\nlet result;\n\nfunction getSQLResult() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const singleStoreConnection = mysql.createPool({\n        host: HOST,\n        user: USER,\n        password: PASSWORD,\n        database: DATABASE,\n      });\n     \n      const [rows] = await singleStoreConnection.execute(\n        $sqlQuery\n      );\n  \n      result = JSON.stringify(rows)\n      \n      resolve();\n    } catch (e) {\n      console.error(e);\n      return reject(e);\n    }\n  });\n}\n\nasync function main() {\n    await getSQLResult();\n}\n\nawait main();\n\nreturn result;"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"823","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:57:41"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const sqlQuery = sqlQuery.trim();\n\nif (sqlQuery.includes(\"SELECT\") && sqlQuery.includes(\"WHERE\")) {\n    return sqlQuery;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"155","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:58:05"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const sqlQuery = $input.sqlQuery.trim();\n\nif (sqlQuery.includes(\"SELECT\") && sqlQuery.includes(\"WHERE\")) {\n    return sqlQuery;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"162","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:58:18"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const sqlQuery = $input.sqlQuery;\n\nif (sqlQuery.includes(\"SELECT\") && sqlQuery.includes(\"WHERE\")) {\n    return sqlQuery;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"155","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:58:26"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const sqlQuery = sqlQuery.trim();\n\nif (sqlQuery.includes(\"SELECT\") && sqlQuery.includes(\"WHERE\")) {\n    return sqlQuery;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"155","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:58:39"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const sqlQuery = $sqlQuery.trim();\n\nif (sqlQuery.includes(\"SELECT\") && sqlQuery.includes(\"WHERE\")) {\n    return sqlQuery;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"156","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 15:58:47"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if ($task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"229","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:00:34"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:02:47"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"hello\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"76","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:02:53"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"hello\") {\n    return $inputs.task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"83","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:05:27"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"hello\") {\n    return inputs.task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"82","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:05:31"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"hello\") {\n    return inputs.task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"82","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:05:32"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"hello\") {\n    return input.task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"81","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:05:35"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"hello\") {\n    return $input.task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"82","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:05:39"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"hello\") {\n    return $input.task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"82","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:05:40"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"hello\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"76","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:05:47"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"228","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:34:00"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"228","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:35:55"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"228","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:40:26"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"228","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:40:32"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"appointment\")) {\n    return \"To schedule an appointment, please visit our patient portal or contact our office directly at [phone number].\";\n} else {\n    return \"I'm here to help! Could you please provide a bit more detail about your inquiry?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"300","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:40:37"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"appointment\")) {\n    return \"To schedule an appointment, please visit our patient portal or contact our office directly at [phone number].\";\n} else {\n    return \"I'm here to help! Could you please provide a bit more detail about your inquiry?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"300","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:40:39"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const sqlQuery = $sqlQuery.trim();\n\nif (sqlQuery.includes(\"SELECT\") && sqlQuery.includes(\"WHERE\")) {\n    return sqlQuery;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"156","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:40:58"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const sqlQuery = $sqlQuery.trim();\n\nif (sqlQuery.includes(\"SELECT\") && sqlQuery.includes(\"WHERE\")) {\n    return sqlQuery;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"156","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:41:01"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const sqlQuery = $sqlQuery.trim();\n\nif (sqlQuery.includes(\"SELECT\") && sqlQuery.includes(\"WHERE\")) {\n    return sqlQuery;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"156","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:41:12"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/chatflows","package":"server","request":{"body":{"deployed":false,"flowData":"{\"nodes\":[{\"width\":300,\"height\":513,\"id\":\"promptTemplate_0\",\"position\":{\"x\":384.84394025989127,\"y\":61.21205260943492},\"type\":\"customNode\",\"data\":{\"id\":\"promptTemplate_0\",\"label\":\"Prompt Template\",\"version\":1,\"name\":\"promptTemplate\",\"type\":\"PromptTemplate\",\"baseClasses\":[\"PromptTemplate\",\"BaseStringPromptTemplate\",\"BasePromptTemplate\",\"Runnable\"],\"category\":\"Prompts\",\"description\":\"Schema to represent a basic prompt for an LLM\",\"inputParams\":[{\"label\":\"Template\",\"name\":\"template\",\"type\":\"string\",\"rows\":4,\"placeholder\":\"What is a good name for a company that makes {product}?\",\"id\":\"promptTemplate_0-input-template-string\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"promptTemplate_0-input-promptValues-json\"}],\"inputAnchors\":[],\"inputs\":{\"template\":\"Based on the provided SQL table schema and question below, return a SQL SELECT ALL query that would answer the user's question. For example: SELECT * FROM table WHERE id = '1'.\\n------------\\nSCHEMA: {schema}\\n------------\\nQUESTION: {question}\\n------------\\nSQL QUERY:\",\"promptValues\":\"{\\\"schema\\\":\\\"{{setVariable_0.data.instance}}\\\",\\\"question\\\":\\\"{{question}}\\\"}\"},\"outputAnchors\":[{\"id\":\"promptTemplate_0-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable\",\"name\":\"promptTemplate\",\"label\":\"PromptTemplate\",\"type\":\"PromptTemplate | BaseStringPromptTemplate | BasePromptTemplate | Runnable\"}],\"outputs\":{},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":384.84394025989127,\"y\":61.21205260943492},\"dragging\":false},{\"width\":300,\"height\":508,\"id\":\"llmChain_0\",\"position\":{\"x\":770.4559230968546,\"y\":-127.11351409346554},\"type\":\"customNode\",\"data\":{\"id\":\"llmChain_0\",\"label\":\"LLM Chain\",\"version\":3,\"name\":\"llmChain\",\"type\":\"LLMChain\",\"baseClasses\":[\"LLMChain\",\"BaseChain\",\"Runnable\"],\"category\":\"Chains\",\"description\":\"Chain to run queries against LLMs\",\"inputParams\":[{\"label\":\"Chain Name\",\"name\":\"chainName\",\"type\":\"string\",\"placeholder\":\"Name Your Chain\",\"optional\":true,\"id\":\"llmChain_0-input-chainName-string\"}],\"inputAnchors\":[{\"label\":\"Language Model\",\"name\":\"model\",\"type\":\"BaseLanguageModel\",\"id\":\"llmChain_0-input-model-BaseLanguageModel\"},{\"label\":\"Prompt\",\"name\":\"prompt\",\"type\":\"BasePromptTemplate\",\"id\":\"llmChain_0-input-prompt-BasePromptTemplate\"},{\"label\":\"Output Parser\",\"name\":\"outputParser\",\"type\":\"BaseLLMOutputParser\",\"optional\":true,\"id\":\"llmChain_0-input-outputParser-BaseLLMOutputParser\"},{\"label\":\"Input Moderation\",\"description\":\"Detect text that could generate harmful output and prevent it from being sent to the language model\",\"name\":\"inputModeration\",\"type\":\"Moderation\",\"optional\":true,\"list\":true,\"id\":\"llmChain_0-input-inputModeration-Moderation\"}],\"inputs\":{\"model\":\"{{chatOpenAI_0.data.instance}}\",\"prompt\":\"{{promptTemplate_0.data.instance}}\",\"outputParser\":\"\",\"inputModeration\":\"\",\"chainName\":\"SQL Query Chain\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"llmChain_0-output-llmChain-LLMChain|BaseChain|Runnable\",\"name\":\"llmChain\",\"label\":\"LLM Chain\",\"type\":\"LLMChain | BaseChain | Runnable\"},{\"id\":\"llmChain_0-output-outputPrediction-string|json\",\"name\":\"outputPrediction\",\"label\":\"Output Prediction\",\"type\":\"string | json\"}],\"default\":\"llmChain\"}],\"outputs\":{\"output\":\"outputPrediction\"},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":770.4559230968546,\"y\":-127.11351409346554},\"dragging\":false},{\"width\":300,\"height\":576,\"id\":\"chatOpenAI_0\",\"position\":{\"x\":372.72389181000057,\"y\":-561.0744498265477},\"type\":\"customNode\",\"data\":{\"id\":\"chatOpenAI_0\",\"label\":\"ChatOpenAI\",\"version\":3,\"name\":\"chatOpenAI\",\"type\":\"ChatOpenAI\",\"baseClasses\":[\"ChatOpenAI\",\"BaseChatModel\",\"BaseLanguageModel\",\"Runnable\"],\"category\":\"Chat Models\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"chatOpenAI_0-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"options\",\"options\":[{\"label\":\"gpt-4\",\"name\":\"gpt-4\"},{\"label\":\"gpt-4-turbo-preview\",\"name\":\"gpt-4-turbo-preview\"},{\"label\":\"gpt-4-0125-preview\",\"name\":\"gpt-4-0125-preview\"},{\"label\":\"gpt-4-1106-preview\",\"name\":\"gpt-4-1106-preview\"},{\"label\":\"gpt-4-vision-preview\",\"name\":\"gpt-4-vision-preview\"},{\"label\":\"gpt-4-0613\",\"name\":\"gpt-4-0613\"},{\"label\":\"gpt-4-32k\",\"name\":\"gpt-4-32k\"},{\"label\":\"gpt-4-32k-0613\",\"name\":\"gpt-4-32k-0613\"},{\"label\":\"gpt-3.5-turbo\",\"name\":\"gpt-3.5-turbo\"},{\"label\":\"gpt-3.5-turbo-1106\",\"name\":\"gpt-3.5-turbo-1106\"},{\"label\":\"gpt-3.5-turbo-0613\",\"name\":\"gpt-3.5-turbo-0613\"},{\"label\":\"gpt-3.5-turbo-16k\",\"name\":\"gpt-3.5-turbo-16k\"},{\"label\":\"gpt-3.5-turbo-16k-0613\",\"name\":\"gpt-3.5-turbo-16k-0613\"}],\"default\":\"gpt-3.5-turbo\",\"optional\":true,\"id\":\"chatOpenAI_0-input-modelName-options\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"step\":0.1,\"default\":0.9,\"optional\":true,\"id\":\"chatOpenAI_0-input-temperature-number\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-topP-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-presencePenalty-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-basepath-string\"},{\"label\":\"BaseOptions\",\"name\":\"baseOptions\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-baseOptions-json\"}],\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"chatOpenAI_0-input-cache-BaseCache\"}],\"inputs\":{\"cache\":\"\",\"modelName\":\"gpt-3.5-turbo-16k\",\"temperature\":\"0\",\"maxTokens\":\"\",\"topP\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"timeout\":\"\",\"basepath\":\"\",\"baseOptions\":\"\"},\"outputAnchors\":[{\"id\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"name\":\"chatOpenAI\",\"label\":\"ChatOpenAI\",\"type\":\"ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable\"}],\"outputs\":{},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":372.72389181000057,\"y\":-561.0744498265477},\"dragging\":false},{\"width\":300,\"height\":576,\"id\":\"chatOpenAI_1\",\"position\":{\"x\":2636.1598769864936,\"y\":-653.0025971757484},\"type\":\"customNode\",\"data\":{\"id\":\"chatOpenAI_1\",\"label\":\"ChatOpenAI\",\"version\":3,\"name\":\"chatOpenAI\",\"type\":\"ChatOpenAI\",\"baseClasses\":[\"ChatOpenAI\",\"BaseChatModel\",\"BaseLanguageModel\",\"Runnable\"],\"category\":\"Chat Models\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"chatOpenAI_1-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"options\",\"options\":[{\"label\":\"gpt-4\",\"name\":\"gpt-4\"},{\"label\":\"gpt-4-turbo-preview\",\"name\":\"gpt-4-turbo-preview\"},{\"label\":\"gpt-4-0125-preview\",\"name\":\"gpt-4-0125-preview\"},{\"label\":\"gpt-4-1106-preview\",\"name\":\"gpt-4-1106-preview\"},{\"label\":\"gpt-4-vision-preview\",\"name\":\"gpt-4-vision-preview\"},{\"label\":\"gpt-4-0613\",\"name\":\"gpt-4-0613\"},{\"label\":\"gpt-4-32k\",\"name\":\"gpt-4-32k\"},{\"label\":\"gpt-4-32k-0613\",\"name\":\"gpt-4-32k-0613\"},{\"label\":\"gpt-3.5-turbo\",\"name\":\"gpt-3.5-turbo\"},{\"label\":\"gpt-3.5-turbo-1106\",\"name\":\"gpt-3.5-turbo-1106\"},{\"label\":\"gpt-3.5-turbo-0613\",\"name\":\"gpt-3.5-turbo-0613\"},{\"label\":\"gpt-3.5-turbo-16k\",\"name\":\"gpt-3.5-turbo-16k\"},{\"label\":\"gpt-3.5-turbo-16k-0613\",\"name\":\"gpt-3.5-turbo-16k-0613\"}],\"default\":\"gpt-3.5-turbo\",\"optional\":true,\"id\":\"chatOpenAI_1-input-modelName-options\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"step\":0.1,\"default\":0.9,\"optional\":true,\"id\":\"chatOpenAI_1-input-temperature-number\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-topP-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-presencePenalty-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-basepath-string\"},{\"label\":\"BaseOptions\",\"name\":\"baseOptions\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-baseOptions-json\"}],\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"chatOpenAI_1-input-cache-BaseCache\"}],\"inputs\":{\"cache\":\"\",\"modelName\":\"gpt-3.5-turbo-16k\",\"temperature\":\"0\",\"maxTokens\":\"\",\"topP\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"timeout\":\"\",\"basepath\":\"\",\"baseOptions\":\"\"},\"outputAnchors\":[{\"id\":\"chatOpenAI_1-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"name\":\"chatOpenAI\",\"label\":\"ChatOpenAI\",\"type\":\"ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable\"}],\"outputs\":{},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":2636.1598769864936,\"y\":-653.0025971757484},\"dragging\":false},{\"width\":300,\"height\":508,\"id\":\"llmChain_1\",\"position\":{\"x\":3089.9937691022837,\"y\":-109.24001734925716},\"type\":\"customNode\",\"data\":{\"id\":\"llmChain_1\",\"label\":\"LLM Chain\",\"version\":3,\"name\":\"llmChain\",\"type\":\"LLMChain\",\"baseClasses\":[\"LLMChain\",\"BaseChain\",\"Runnable\"],\"category\":\"Chains\",\"description\":\"Chain to run queries against LLMs\",\"inputParams\":[{\"label\":\"Chain Name\",\"name\":\"chainName\",\"type\":\"string\",\"placeholder\":\"Name Your Chain\",\"optional\":true,\"id\":\"llmChain_1-input-chainName-string\"}],\"inputAnchors\":[{\"label\":\"Language Model\",\"name\":\"model\",\"type\":\"BaseLanguageModel\",\"id\":\"llmChain_1-input-model-BaseLanguageModel\"},{\"label\":\"Prompt\",\"name\":\"prompt\",\"type\":\"BasePromptTemplate\",\"id\":\"llmChain_1-input-prompt-BasePromptTemplate\"},{\"label\":\"Output Parser\",\"name\":\"outputParser\",\"type\":\"BaseLLMOutputParser\",\"optional\":true,\"id\":\"llmChain_1-input-outputParser-BaseLLMOutputParser\"},{\"label\":\"Input Moderation\",\"description\":\"Detect text that could generate harmful output and prevent it from being sent to the language model\",\"name\":\"inputModeration\",\"type\":\"Moderation\",\"optional\":true,\"list\":true,\"id\":\"llmChain_1-input-inputModeration-Moderation\"}],\"inputs\":{\"model\":\"{{chatOpenAI_1.data.instance}}\",\"prompt\":\"{{promptTemplate_1.data.instance}}\",\"outputParser\":\"\",\"inputModeration\":\"\",\"chainName\":\"Final Chain\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"llmChain_1-output-llmChain-LLMChain|BaseChain|Runnable\",\"name\":\"llmChain\",\"label\":\"LLM Chain\",\"type\":\"LLMChain | BaseChain | Runnable\"},{\"id\":\"llmChain_1-output-outputPrediction-string|json\",\"name\":\"outputPrediction\",\"label\":\"Output Prediction\",\"type\":\"string | json\"}],\"default\":\"llmChain\"}],\"outputs\":{\"output\":\"llmChain\"},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":3089.9937691022837,\"y\":-109.24001734925716},\"dragging\":false},{\"width\":300,\"height\":670,\"id\":\"customFunction_2\",\"position\":{\"x\":-395.18079694059173,\"y\":-222.8935573325382},\"type\":\"customNode\",\"data\":{\"id\":\"customFunction_2\",\"label\":\"Custom JS Function\",\"version\":1,\"name\":\"customFunction\",\"type\":\"CustomFunction\",\"baseClasses\":[\"CustomFunction\",\"Utilities\"],\"category\":\"Utilities\",\"description\":\"Execute custom javascript function\",\"inputParams\":[{\"label\":\"Input Variables\",\"name\":\"functionInputVariables\",\"description\":\"Input variables can be used in the function with prefix $. For example: $var\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"customFunction_2-input-functionInputVariables-json\"},{\"label\":\"Function Name\",\"name\":\"functionName\",\"type\":\"string\",\"placeholder\":\"My Function\",\"id\":\"customFunction_2-input-functionName-string\"},{\"label\":\"Javascript Function\",\"name\":\"javascriptFunction\",\"type\":\"code\",\"id\":\"customFunction_2-input-javascriptFunction-code\"}],\"inputAnchors\":[],\"inputs\":{\"functionInputVariables\":\"\",\"functionName\":\"Get SQL Schema Prompt\",\"javascriptFunction\":\"const HOST = 'singlestore-host.com';\\nconst USER = 'admin';\\nconst PASSWORD = 'mypassword';\\nconst DATABASE = 'mydb';\\nconst TABLE = 'samples';\\nconst mysql = require('mysql2/promise');\\n\\nlet sqlSchemaPrompt;\\n\\n/**\\n * Ideal prompt contains schema info and examples\\n * Follows best practices as specified form https://arxiv.org/abs/2204.00498\\n * =========================================\\n * CREATE TABLE samples (firstName varchar NOT NULL, lastName varchar)\\n * SELECT * FROM samples LIMIT 3\\n * firstName lastName\\n * Stephen Tyler\\n * Jack McGinnis\\n * Steven Repici\\n * =========================================\\n*/\\nfunction getSQLPrompt() {\\n  return new Promise(async (resolve, reject) => {\\n    try {\\n      const singleStoreConnection = mysql.createPool({\\n        host: HOST,\\n        user: USER,\\n        password: PASSWORD,\\n        database: DATABASE,\\n      });\\n  \\n      // Get schema info\\n      const [schemaInfo] = await singleStoreConnection.execute(\\n        `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name = \\\"${TABLE}\\\"`\\n      );\\n  \\n      const createColumns = [];\\n      const columnNames = [];\\n  \\n      for (const schemaData of schemaInfo) {\\n        columnNames.push(`${schemaData['COLUMN_NAME']}`);\\n        createColumns.push(`${schemaData['COLUMN_NAME']} ${schemaData['COLUMN_TYPE']} ${schemaData['IS_NULLABLE'] === 'NO' ? 'NOT NULL' : ''}`);\\n      }\\n  \\n      const sqlCreateTableQuery = `CREATE TABLE samples (${createColumns.join(', ')})`;\\n      const sqlSelectTableQuery = `SELECT * FROM samples LIMIT 3`;\\n  \\n      // Get first 3 rows\\n      const [rows] = await singleStoreConnection.execute(\\n          sqlSelectTableQuery,\\n      );\\n      \\n      const allValues = [];\\n      for (const row of rows) {\\n          const rowValues = [];\\n          for (const colName in row) {\\n              rowValues.push(row[colName]);\\n          }\\n          allValues.push(rowValues.join(' '));\\n      }\\n  \\n      sqlSchemaPrompt = sqlCreateTableQuery + '\\\\n' + sqlSelectTableQuery + '\\\\n' + columnNames.join(' ') + '\\\\n' + allValues.join('\\\\n');\\n      \\n      resolve();\\n    } catch (e) {\\n      console.error(e);\\n      return reject(e);\\n    }\\n  });\\n}\\n\\nasync function main() {\\n    await getSQLPrompt();\\n}\\n\\nawait main();\\n\\nreturn sqlSchemaPrompt;\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"customFunction_2-output-output-string|number|boolean|json|array\",\"name\":\"output\",\"label\":\"Output\",\"type\":\"string | number | boolean | json | array\"}],\"default\":\"output\"}],\"outputs\":{\"output\":\"output\"},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":-395.18079694059173,\"y\":-222.8935573325382},\"dragging\":false},{\"width\":300,\"height\":670,\"id\":\"customFunction_1\",\"position\":{\"x\":1887.4670208331604,\"y\":-275.95340782935716},\"type\":\"customNode\",\"data\":{\"id\":\"customFunction_1\",\"label\":\"Custom JS Function\",\"version\":1,\"name\":\"customFunction\",\"type\":\"CustomFunction\",\"baseClasses\":[\"CustomFunction\",\"Utilities\"],\"category\":\"Utilities\",\"description\":\"Execute custom javascript function\",\"inputParams\":[{\"label\":\"Input Variables\",\"name\":\"functionInputVariables\",\"description\":\"Input variables can be used in the function with prefix $. For example: $var\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"customFunction_1-input-functionInputVariables-json\"},{\"label\":\"Function Name\",\"name\":\"functionName\",\"type\":\"string\",\"placeholder\":\"My Function\",\"id\":\"customFunction_1-input-functionName-string\"},{\"label\":\"Javascript Function\",\"name\":\"javascriptFunction\",\"type\":\"code\",\"id\":\"customFunction_1-input-javascriptFunction-code\"}],\"inputAnchors\":[],\"inputs\":{\"functionInputVariables\":\"{\\\"sqlQuery\\\":\\\"{{setVariable_1.data.instance}}\\\"}\",\"functionName\":\"Run SQL Query\",\"javascriptFunction\":\"const HOST = 'singlestore-host.com';\\nconst USER = 'admin';\\nconst PASSWORD = 'mypassword';\\nconst DATABASE = 'mydb';\\nconst TABLE = 'samples';\\nconst mysql = require('mysql2/promise');\\n\\nlet result;\\n\\nfunction getSQLResult() {\\n  return new Promise(async (resolve, reject) => {\\n    try {\\n      const singleStoreConnection = mysql.createPool({\\n        host: HOST,\\n        user: USER,\\n        password: PASSWORD,\\n        database: DATABASE,\\n      });\\n     \\n      const [rows] = await singleStoreConnection.execute(\\n        $sqlQuery\\n      );\\n  \\n      result = JSON.stringify(rows)\\n      \\n      resolve();\\n    } catch (e) {\\n      console.error(e);\\n      return reject(e);\\n    }\\n  });\\n}\\n\\nasync function main() {\\n    await getSQLResult();\\n}\\n\\nawait main();\\n\\nreturn result;\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"customFunction_1-output-output-string|number|boolean|json|array\",\"name\":\"output\",\"label\":\"Output\",\"type\":\"string | number | boolean | json | array\"}],\"default\":\"output\"}],\"outputs\":{\"output\":\"output\"},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":1887.4670208331604,\"y\":-275.95340782935716},\"dragging\":false},{\"width\":300,\"height\":513,\"id\":\"promptTemplate_1\",\"position\":{\"x\":2638.3935631956588,\"y\":-18.55855423639423},\"type\":\"customNode\",\"data\":{\"id\":\"promptTemplate_1\",\"label\":\"Prompt Template\",\"version\":1,\"name\":\"promptTemplate\",\"type\":\"PromptTemplate\",\"baseClasses\":[\"PromptTemplate\",\"BaseStringPromptTemplate\",\"BasePromptTemplate\",\"Runnable\"],\"category\":\"Prompts\",\"description\":\"Schema to represent a basic prompt for an LLM\",\"inputParams\":[{\"label\":\"Template\",\"name\":\"template\",\"type\":\"string\",\"rows\":4,\"placeholder\":\"What is a good name for a company that makes {product}?\",\"id\":\"promptTemplate_1-input-template-string\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"promptTemplate_1-input-promptValues-json\"}],\"inputAnchors\":[],\"inputs\":{\"template\":\"Based on the table schema below, question, SQL query, and SQL response, write a natural language response, be details as possible:\\n------------\\nSCHEMA: {schema}\\n------------\\nQUESTION: {question}\\n------------\\nSQL QUERY: {sqlQuery}\\n------------\\nSQL RESPONSE: {sqlResponse}\\n------------\\nNATURAL LANGUAGE RESPONSE:\",\"promptValues\":\"{\\\"schema\\\":\\\"{{getVariable_0.data.instance}}\\\",\\\"question\\\":\\\"{{question}}\\\",\\\"sqlResponse\\\":\\\"{{customFunction_1.data.instance}}\\\",\\\"sqlQuery\\\":\\\"{{getVariable_1.data.instance}}\\\"}\"},\"outputAnchors\":[{\"id\":\"promptTemplate_1-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable\",\"name\":\"promptTemplate\",\"label\":\"PromptTemplate\",\"type\":\"PromptTemplate | BaseStringPromptTemplate | BasePromptTemplate | Runnable\"}],\"outputs\":{},\"selected\":false},\"selected\":false,\"dragging\":false,\"positionAbsolute\":{\"x\":2638.3935631956588,\"y\":-18.55855423639423}},{\"width\":300,\"height\":356,\"id\":\"setVariable_0\",\"position\":{\"x\":18.689175061831122,\"y\":-62.81166351070223},\"type\":\"customNode\",\"data\":{\"id\":\"setVariable_0\",\"label\":\"Set Variable\",\"version\":1,\"name\":\"setVariable\",\"type\":\"SetVariable\",\"baseClasses\":[\"SetVariable\",\"Utilities\"],\"category\":\"Utilities\",\"description\":\"Set variable which can be retrieved at a later stage. Variable is only available during runtime.\",\"inputParams\":[{\"label\":\"Variable Name\",\"name\":\"variableName\",\"type\":\"string\",\"placeholder\":\"var1\",\"id\":\"setVariable_0-input-variableName-string\"}],\"inputAnchors\":[{\"label\":\"Input\",\"name\":\"input\",\"type\":\"string | number | boolean | json | array\",\"optional\":true,\"list\":true,\"id\":\"setVariable_0-input-input-string | number | boolean | json | array\"}],\"inputs\":{\"input\":[\"{{customFunction_2.data.instance}}\"],\"variableName\":\"schemaPrompt\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"setVariable_0-output-output-string|number|boolean|json|array\",\"name\":\"output\",\"label\":\"Output\",\"type\":\"string | number | boolean | json | array\"}],\"default\":\"output\"}],\"outputs\":{\"output\":\"output\"},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":18.689175061831122,\"y\":-62.81166351070223},\"dragging\":false},{\"width\":300,\"height\":305,\"id\":\"getVariable_0\",\"position\":{\"x\":2248.4540716891547,\"y\":-47.21232652005119},\"type\":\"customNode\",\"data\":{\"id\":\"getVariable_0\",\"label\":\"Get Variable\",\"version\":1,\"name\":\"getVariable\",\"type\":\"GetVariable\",\"baseClasses\":[\"GetVariable\",\"Utilities\"],\"category\":\"Utilities\",\"description\":\"Get variable that was saved using Set Variable node\",\"inputParams\":[{\"label\":\"Variable Name\",\"name\":\"variableName\",\"type\":\"string\",\"placeholder\":\"var1\",\"id\":\"getVariable_0-input-variableName-string\"}],\"inputAnchors\":[],\"inputs\":{\"variableName\":\"schemaPrompt\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"getVariable_0-output-output-string|number|boolean|json|array\",\"name\":\"output\",\"label\":\"Output\",\"type\":\"string | number | boolean | json | array\"}],\"default\":\"output\"}],\"outputs\":{\"output\":\"output\"},\"selected\":false},\"positionAbsolute\":{\"x\":2248.4540716891547,\"y\":-47.21232652005119},\"selected\":false,\"dragging\":false},{\"width\":300,\"height\":305,\"id\":\"getVariable_1\",\"position\":{\"x\":2256.0258940322105,\"y\":437.4363694364632},\"type\":\"customNode\",\"data\":{\"id\":\"getVariable_1\",\"label\":\"Get Variable\",\"version\":1,\"name\":\"getVariable\",\"type\":\"GetVariable\",\"baseClasses\":[\"GetVariable\",\"Utilities\"],\"category\":\"Utilities\",\"description\":\"Get variable that was saved using Set Variable node\",\"inputParams\":[{\"label\":\"Variable Name\",\"name\":\"variableName\",\"type\":\"string\",\"placeholder\":\"var1\",\"id\":\"getVariable_1-input-variableName-string\"}],\"inputAnchors\":[],\"inputs\":{\"variableName\":\"sqlQuery\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"getVariable_1-output-output-string|number|boolean|json|array\",\"name\":\"output\",\"label\":\"Output\",\"type\":\"string | number | boolean | json | array\"}],\"default\":\"output\"}],\"outputs\":{\"output\":\"output\"},\"selected\":false},\"positionAbsolute\":{\"x\":2256.0258940322105,\"y\":437.4363694364632},\"selected\":false,\"dragging\":false},{\"width\":300,\"height\":356,\"id\":\"setVariable_1\",\"position\":{\"x\":1516.338224315744,\"y\":-133.6986023683283},\"type\":\"customNode\",\"data\":{\"id\":\"setVariable_1\",\"label\":\"Set Variable\",\"version\":1,\"name\":\"setVariable\",\"type\":\"SetVariable\",\"baseClasses\":[\"SetVariable\",\"Utilities\"],\"category\":\"Utilities\",\"description\":\"Set variable which can be retrieved at a later stage. Variable is only available during runtime.\",\"inputParams\":[{\"label\":\"Variable Name\",\"name\":\"variableName\",\"type\":\"string\",\"placeholder\":\"var1\",\"id\":\"setVariable_1-input-variableName-string\"}],\"inputAnchors\":[{\"label\":\"Input\",\"name\":\"input\",\"type\":\"string | number | boolean | json | array\",\"optional\":true,\"list\":true,\"id\":\"setVariable_1-input-input-string | number | boolean | json | array\"}],\"inputs\":{\"input\":[\"{{ifElseFunction_0.data.instance}}\"],\"variableName\":\"sqlQuery\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"setVariable_1-output-output-string|number|boolean|json|array\",\"name\":\"output\",\"label\":\"Output\",\"type\":\"string | number | boolean | json | array\"}],\"default\":\"output\"}],\"outputs\":{\"output\":\"output\"},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":1516.338224315744,\"y\":-133.6986023683283},\"dragging\":false},{\"width\":300,\"height\":757,\"id\":\"ifElseFunction_0\",\"position\":{\"x\":1147.8020838770517,\"y\":-237.39478763322148},\"type\":\"customNode\",\"data\":{\"id\":\"ifElseFunction_0\",\"label\":\"IfElse Function\",\"version\":1,\"name\":\"ifElseFunction\",\"type\":\"IfElseFunction\",\"baseClasses\":[\"IfElseFunction\",\"Utilities\"],\"category\":\"Utilities\",\"description\":\"Split flows based on If Else javascript functions\",\"inputParams\":[{\"label\":\"Input Variables\",\"name\":\"functionInputVariables\",\"description\":\"Input variables can be used in the function with prefix $. For example: $var\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"ifElseFunction_0-input-functionInputVariables-json\"},{\"label\":\"IfElse Name\",\"name\":\"functionName\",\"type\":\"string\",\"optional\":true,\"placeholder\":\"If Condition Match\",\"id\":\"ifElseFunction_0-input-functionName-string\"},{\"label\":\"If Function\",\"name\":\"ifFunction\",\"description\":\"Function must return a value\",\"type\":\"code\",\"rows\":2,\"default\":\"if (\\\"hello\\\" == \\\"hello\\\") {\\n    return true;\\n}\",\"id\":\"ifElseFunction_0-input-ifFunction-code\"},{\"label\":\"Else Function\",\"name\":\"elseFunction\",\"description\":\"Function must return a value\",\"type\":\"code\",\"rows\":2,\"default\":\"return false;\",\"id\":\"ifElseFunction_0-input-elseFunction-code\"}],\"inputAnchors\":[],\"inputs\":{\"functionInputVariables\":\"{\\\"sqlQuery\\\":\\\"{{llmChain_0.data.instance}}\\\"}\",\"functionName\":\"IF SQL Query contains SELECT and WHERE\",\"ifFunction\":\"const sqlQuery = $sqlQuery.trim();\\n\\nif (sqlQuery.includes(\\\"SELECT\\\") && sqlQuery.includes(\\\"WHERE\\\")) {\\n    return sqlQuery;\\n}\",\"elseFunction\":\"return $sqlQuery;\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"ifElseFunction_0-output-returnTrue-string|number|boolean|json|array\",\"name\":\"returnTrue\",\"label\":\"True\",\"type\":\"string | number | boolean | json | array\"},{\"id\":\"ifElseFunction_0-output-returnFalse-string|number|boolean|json|array\",\"name\":\"returnFalse\",\"label\":\"False\",\"type\":\"string | number | boolean | json | array\"}],\"default\":\"returnTrue\"}],\"outputs\":{\"output\":\"returnTrue\"},\"selected\":false},\"selected\":true,\"positionAbsolute\":{\"x\":1147.8020838770517,\"y\":-237.39478763322148},\"dragging\":false},{\"width\":300,\"height\":513,\"id\":\"promptTemplate_2\",\"position\":{\"x\":1530.0647779039386,\"y\":944.9904482583751},\"type\":\"customNode\",\"data\":{\"id\":\"promptTemplate_2\",\"label\":\"Prompt Template\",\"version\":1,\"name\":\"promptTemplate\",\"type\":\"PromptTemplate\",\"baseClasses\":[\"PromptTemplate\",\"BaseStringPromptTemplate\",\"BasePromptTemplate\",\"Runnable\"],\"category\":\"Prompts\",\"description\":\"Schema to represent a basic prompt for an LLM\",\"inputParams\":[{\"label\":\"Template\",\"name\":\"template\",\"type\":\"string\",\"rows\":4,\"placeholder\":\"What is a good name for a company that makes {product}?\",\"id\":\"promptTemplate_2-input-template-string\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"promptTemplate_2-input-promptValues-json\"}],\"inputAnchors\":[],\"inputs\":{\"template\":\"Politely say \\\"I'm not able to answer query\\\"\",\"promptValues\":\"{\\\"schema\\\":\\\"{{setVariable_0.data.instance}}\\\",\\\"question\\\":\\\"{{question}}\\\"}\"},\"outputAnchors\":[{\"id\":\"promptTemplate_2-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable\",\"name\":\"promptTemplate\",\"label\":\"PromptTemplate\",\"type\":\"PromptTemplate | BaseStringPromptTemplate | BasePromptTemplate | Runnable\"}],\"outputs\":{},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":1530.0647779039386,\"y\":944.9904482583751},\"dragging\":false},{\"width\":300,\"height\":576,\"id\":\"chatOpenAI_2\",\"position\":{\"x\":1537.0307928738125,\"y\":330.7727229610632},\"type\":\"customNode\",\"data\":{\"id\":\"chatOpenAI_2\",\"label\":\"ChatOpenAI\",\"version\":3,\"name\":\"chatOpenAI\",\"type\":\"ChatOpenAI\",\"baseClasses\":[\"ChatOpenAI\",\"BaseChatModel\",\"BaseLanguageModel\",\"Runnable\"],\"category\":\"Chat Models\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"chatOpenAI_2-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"options\",\"options\":[{\"label\":\"gpt-4\",\"name\":\"gpt-4\"},{\"label\":\"gpt-4-turbo-preview\",\"name\":\"gpt-4-turbo-preview\"},{\"label\":\"gpt-4-0125-preview\",\"name\":\"gpt-4-0125-preview\"},{\"label\":\"gpt-4-1106-preview\",\"name\":\"gpt-4-1106-preview\"},{\"label\":\"gpt-4-vision-preview\",\"name\":\"gpt-4-vision-preview\"},{\"label\":\"gpt-4-0613\",\"name\":\"gpt-4-0613\"},{\"label\":\"gpt-4-32k\",\"name\":\"gpt-4-32k\"},{\"label\":\"gpt-4-32k-0613\",\"name\":\"gpt-4-32k-0613\"},{\"label\":\"gpt-3.5-turbo\",\"name\":\"gpt-3.5-turbo\"},{\"label\":\"gpt-3.5-turbo-1106\",\"name\":\"gpt-3.5-turbo-1106\"},{\"label\":\"gpt-3.5-turbo-0613\",\"name\":\"gpt-3.5-turbo-0613\"},{\"label\":\"gpt-3.5-turbo-16k\",\"name\":\"gpt-3.5-turbo-16k\"},{\"label\":\"gpt-3.5-turbo-16k-0613\",\"name\":\"gpt-3.5-turbo-16k-0613\"}],\"default\":\"gpt-3.5-turbo\",\"optional\":true,\"id\":\"chatOpenAI_2-input-modelName-options\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"step\":0.1,\"default\":0.9,\"optional\":true,\"id\":\"chatOpenAI_2-input-temperature-number\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_2-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_2-input-topP-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_2-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_2-input-presencePenalty-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_2-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_2-input-basepath-string\"},{\"label\":\"BaseOptions\",\"name\":\"baseOptions\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_2-input-baseOptions-json\"}],\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"chatOpenAI_2-input-cache-BaseCache\"}],\"inputs\":{\"cache\":\"\",\"modelName\":\"gpt-3.5-turbo-16k\",\"temperature\":\"0.7\",\"maxTokens\":\"\",\"topP\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"timeout\":\"\",\"basepath\":\"\",\"baseOptions\":\"\"},\"outputAnchors\":[{\"id\":\"chatOpenAI_2-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"name\":\"chatOpenAI\",\"label\":\"ChatOpenAI\",\"type\":\"ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable\"}],\"outputs\":{},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":1537.0307928738125,\"y\":330.7727229610632},\"dragging\":false},{\"width\":300,\"height\":508,\"id\":\"llmChain_2\",\"position\":{\"x\":2077.2866807477812,\"y\":958.6594167386253},\"type\":\"customNode\",\"data\":{\"id\":\"llmChain_2\",\"label\":\"LLM Chain\",\"version\":3,\"name\":\"llmChain\",\"type\":\"LLMChain\",\"baseClasses\":[\"LLMChain\",\"BaseChain\",\"Runnable\"],\"category\":\"Chains\",\"description\":\"Chain to run queries against LLMs\",\"inputParams\":[{\"label\":\"Chain Name\",\"name\":\"chainName\",\"type\":\"string\",\"placeholder\":\"Name Your Chain\",\"optional\":true,\"id\":\"llmChain_2-input-chainName-string\"}],\"inputAnchors\":[{\"label\":\"Language Model\",\"name\":\"model\",\"type\":\"BaseLanguageModel\",\"id\":\"llmChain_2-input-model-BaseLanguageModel\"},{\"label\":\"Prompt\",\"name\":\"prompt\",\"type\":\"BasePromptTemplate\",\"id\":\"llmChain_2-input-prompt-BasePromptTemplate\"},{\"label\":\"Output Parser\",\"name\":\"outputParser\",\"type\":\"BaseLLMOutputParser\",\"optional\":true,\"id\":\"llmChain_2-input-outputParser-BaseLLMOutputParser\"},{\"label\":\"Input Moderation\",\"description\":\"Detect text that could generate harmful output and prevent it from being sent to the language model\",\"name\":\"inputModeration\",\"type\":\"Moderation\",\"optional\":true,\"list\":true,\"id\":\"llmChain_2-input-inputModeration-Moderation\"}],\"inputs\":{\"model\":\"{{chatOpenAI_2.data.instance}}\",\"prompt\":\"{{promptTemplate_2.data.instance}}\",\"outputParser\":\"\",\"inputModeration\":\"\",\"chainName\":\"Fallback Chain\"},\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"llmChain_2-output-llmChain-LLMChain|BaseChain|Runnable\",\"name\":\"llmChain\",\"label\":\"LLM Chain\",\"type\":\"LLMChain | BaseChain | Runnable\"},{\"id\":\"llmChain_2-output-outputPrediction-string|json\",\"name\":\"outputPrediction\",\"label\":\"Output Prediction\",\"type\":\"string | json\"}],\"default\":\"llmChain\"}],\"outputs\":{\"output\":\"llmChain\"},\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":2077.2866807477812,\"y\":958.6594167386253},\"dragging\":false}],\"edges\":[{\"source\":\"promptTemplate_0\",\"sourceHandle\":\"promptTemplate_0-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable\",\"target\":\"llmChain_0\",\"targetHandle\":\"llmChain_0-input-prompt-BasePromptTemplate\",\"type\":\"buttonedge\",\"id\":\"promptTemplate_0-promptTemplate_0-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable-llmChain_0-llmChain_0-input-prompt-BasePromptTemplate\",\"data\":{\"label\":\"\"}},{\"source\":\"chatOpenAI_0\",\"sourceHandle\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"target\":\"llmChain_0\",\"targetHandle\":\"llmChain_0-input-model-BaseLanguageModel\",\"type\":\"buttonedge\",\"id\":\"chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-llmChain_0-llmChain_0-input-model-BaseLanguageModel\",\"data\":{\"label\":\"\"}},{\"source\":\"chatOpenAI_1\",\"sourceHandle\":\"chatOpenAI_1-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"target\":\"llmChain_1\",\"targetHandle\":\"llmChain_1-input-model-BaseLanguageModel\",\"type\":\"buttonedge\",\"id\":\"chatOpenAI_1-chatOpenAI_1-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-llmChain_1-llmChain_1-input-model-BaseLanguageModel\",\"data\":{\"label\":\"\"}},{\"source\":\"customFunction_1\",\"sourceHandle\":\"customFunction_1-output-output-string|number|boolean|json|array\",\"target\":\"promptTemplate_1\",\"targetHandle\":\"promptTemplate_1-input-promptValues-json\",\"type\":\"buttonedge\",\"id\":\"customFunction_1-customFunction_1-output-output-string|number|boolean|json|array-promptTemplate_1-promptTemplate_1-input-promptValues-json\",\"data\":{\"label\":\"\"}},{\"source\":\"promptTemplate_1\",\"sourceHandle\":\"promptTemplate_1-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable\",\"target\":\"llmChain_1\",\"targetHandle\":\"llmChain_1-input-prompt-BasePromptTemplate\",\"type\":\"buttonedge\",\"id\":\"promptTemplate_1-promptTemplate_1-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable-llmChain_1-llmChain_1-input-prompt-BasePromptTemplate\",\"data\":{\"label\":\"\"}},{\"source\":\"customFunction_2\",\"sourceHandle\":\"customFunction_2-output-output-string|number|boolean|json|array\",\"target\":\"setVariable_0\",\"targetHandle\":\"setVariable_0-input-input-string | number | boolean | json | array\",\"type\":\"buttonedge\",\"id\":\"customFunction_2-customFunction_2-output-output-string|number|boolean|json|array-setVariable_0-setVariable_0-input-input-string | number | boolean | json | array\",\"data\":{\"label\":\"\"}},{\"source\":\"setVariable_0\",\"sourceHandle\":\"setVariable_0-output-output-string|number|boolean|json|array\",\"target\":\"promptTemplate_0\",\"targetHandle\":\"promptTemplate_0-input-promptValues-json\",\"type\":\"buttonedge\",\"id\":\"setVariable_0-setVariable_0-output-output-string|number|boolean|json|array-promptTemplate_0-promptTemplate_0-input-promptValues-json\",\"data\":{\"label\":\"\"}},{\"source\":\"getVariable_0\",\"sourceHandle\":\"getVariable_0-output-output-string|number|boolean|json|array\",\"target\":\"promptTemplate_1\",\"targetHandle\":\"promptTemplate_1-input-promptValues-json\",\"type\":\"buttonedge\",\"id\":\"getVariable_0-getVariable_0-output-output-string|number|boolean|json|array-promptTemplate_1-promptTemplate_1-input-promptValues-json\",\"data\":{\"label\":\"\"}},{\"source\":\"getVariable_1\",\"sourceHandle\":\"getVariable_1-output-output-string|number|boolean|json|array\",\"target\":\"promptTemplate_1\",\"targetHandle\":\"promptTemplate_1-input-promptValues-json\",\"type\":\"buttonedge\",\"id\":\"getVariable_1-getVariable_1-output-output-string|number|boolean|json|array-promptTemplate_1-promptTemplate_1-input-promptValues-json\",\"data\":{\"label\":\"\"}},{\"source\":\"setVariable_1\",\"sourceHandle\":\"setVariable_1-output-output-string|number|boolean|json|array\",\"target\":\"customFunction_1\",\"targetHandle\":\"customFunction_1-input-functionInputVariables-json\",\"type\":\"buttonedge\",\"id\":\"setVariable_1-setVariable_1-output-output-string|number|boolean|json|array-customFunction_1-customFunction_1-input-functionInputVariables-json\",\"data\":{\"label\":\"\"}},{\"source\":\"llmChain_0\",\"sourceHandle\":\"llmChain_0-output-outputPrediction-string|json\",\"target\":\"ifElseFunction_0\",\"targetHandle\":\"ifElseFunction_0-input-functionInputVariables-json\",\"type\":\"buttonedge\",\"id\":\"llmChain_0-llmChain_0-output-outputPrediction-string|json-ifElseFunction_0-ifElseFunction_0-input-functionInputVariables-json\"},{\"source\":\"ifElseFunction_0\",\"sourceHandle\":\"ifElseFunction_0-output-returnTrue-string|number|boolean|json|array\",\"target\":\"setVariable_1\",\"targetHandle\":\"setVariable_1-input-input-string | number | boolean | json | array\",\"type\":\"buttonedge\",\"id\":\"ifElseFunction_0-ifElseFunction_0-output-returnTrue-string|number|boolean|json|array-setVariable_1-setVariable_1-input-input-string | number | boolean | json | array\"},{\"source\":\"ifElseFunction_0\",\"sourceHandle\":\"ifElseFunction_0-output-returnFalse-string|number|boolean|json|array\",\"target\":\"promptTemplate_2\",\"targetHandle\":\"promptTemplate_2-input-promptValues-json\",\"type\":\"buttonedge\",\"id\":\"ifElseFunction_0-ifElseFunction_0-output-returnFalse-string|number|boolean|json|array-promptTemplate_2-promptTemplate_2-input-promptValues-json\"},{\"source\":\"chatOpenAI_2\",\"sourceHandle\":\"chatOpenAI_2-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"target\":\"llmChain_2\",\"targetHandle\":\"llmChain_2-input-model-BaseLanguageModel\",\"type\":\"buttonedge\",\"id\":\"chatOpenAI_2-chatOpenAI_2-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-llmChain_2-llmChain_2-input-model-BaseLanguageModel\"},{\"source\":\"promptTemplate_2\",\"sourceHandle\":\"promptTemplate_2-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable\",\"target\":\"llmChain_2\",\"targetHandle\":\"llmChain_2-input-prompt-BasePromptTemplate\",\"type\":\"buttonedge\",\"id\":\"promptTemplate_2-promptTemplate_2-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable-llmChain_2-llmChain_2-input-prompt-BasePromptTemplate\"}],\"viewport\":{\"x\":-210.19643307679132,\"y\":137.28870371314537,\"zoom\":0.6594892904072196}}","isPublic":false,"name":"SQL If Else"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"43569","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/chatflows"},"timestamp":"2024-03-05 16:41:26"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"228","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:41:35"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"228","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:41:37"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"21\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:41:56"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"hello\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"76","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:42:02"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"hello\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"76","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:42:03"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (\"hello\" == \"hello\") {\n    return $task;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"76","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:42:10"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const sqlQuery = $sqlQuery.trim();\n\nif (sqlQuery.includes(\"SELECT\") && sqlQuery.includes(\"WHERE\")) {\n    return sqlQuery;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"156","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:55:33"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const sqlQuery = $sqlQuery.trim();\n\nif (sqlQuery.includes(\"SELECT\") && sqlQuery.includes(\"WHERE\")) {\n    return sqlQuery;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"156","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:56:56"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const sqlQuery = $sqlQuery.trim();\n\nif (sqlQuery.includes(\"SELECT\") && sqlQuery.includes(\"WHERE\")) {\n    return sqlQuery;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"156","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-05 16:58:51"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"appointment\")) {\n    return \"To schedule an appointment, please visit our patient portal or contact our office directly at [phone number].\";\n} else {\n    return \"I'm here to help! Could you please provide a bit more detail about your inquiry?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"300","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-06 11:37:19"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73","package":"server","request":{"body":{"history":[],"question":"hi","socketIOClientId":"en32xbU1x1-HHRbuAAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"72","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73"},"timestamp":"2024-03-06 12:11:48"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const HOST = 'singlestore-host.com';\nconst USER = 'admin';\nconst PASSWORD = 'mypassword';\nconst DATABASE = 'mydb';\nconst TABLE = 'samples';\nconst mysql = require('mysql2/promise');\n\nlet result;\n\nfunction getSQLResult() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const singleStoreConnection = mysql.createPool({\n        host: HOST,\n        user: USER,\n        password: PASSWORD,\n        database: DATABASE,\n      });\n     \n      const [rows] = await singleStoreConnection.execute(\n        $sqlQuery\n      );\n  \n      result = JSON.stringify(rows)\n      \n      resolve();\n    } catch (e) {\n      console.error(e);\n      return reject(e);\n    }\n  });\n}\n\nasync function main() {\n    await getSQLResult();\n}\n\nawait main();\n\nreturn result;"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"823","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-06 12:30:58"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","package":"server","request":{"body":{"history":[],"question":"hi","socketIOClientId":"IalnvTGn1W91IM8ZAAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"72","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad"},"timestamp":"2024-03-06 12:58:02"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const HOST = 'singlestore-host.com';\nconst USER = 'admin';\nconst PASSWORD = 'mypassword';\nconst DATABASE = 'mydb';\nconst TABLE = 'samples';\nconst mysql = require('mysql2/promise');\n\nlet sqlSchemaPrompt;\n\n/**\n * Ideal prompt contains schema info and examples\n * Follows best practices as specified form https://arxiv.org/abs/2204.00498\n * =========================================\n * CREATE TABLE samples (firstName varchar NOT NULL, lastName varchar)\n * SELECT * FROM samples LIMIT 3\n * firstName lastName\n * Stephen Tyler\n * Jack McGinnis\n * Steven Repici\n * =========================================\n*/\nfunction getSQLPrompt() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const singleStoreConnection = mysql.createPool({\n        host: HOST,\n        user: USER,\n        password: PASSWORD,\n        database: DATABASE,\n      });\n  \n      // Get schema info\n      const [schemaInfo] = await singleStoreConnection.execute(\n        `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name = \"${TABLE}\"`\n      );\n  \n      const createColumns = [];\n      const columnNames = [];\n  \n      for (const schemaData of schemaInfo) {\n        columnNames.push(`${schemaData['COLUMN_NAME']}`);\n        createColumns.push(`${schemaData['COLUMN_NAME']} ${schemaData['COLUMN_TYPE']} ${schemaData['IS_NULLABLE'] === 'NO' ? 'NOT NULL' : ''}`);\n      }\n  \n      const sqlCreateTableQuery = `CREATE TABLE samples (${createColumns.join(', ')})`;\n      const sqlSelectTableQuery = `SELECT * FROM samples LIMIT 3`;\n  \n      // Get first 3 rows\n      const [rows] = await singleStoreConnection.execute(\n          sqlSelectTableQuery,\n      );\n      \n      const allValues = [];\n      for (const row of rows) {\n          const rowValues = [];\n          for (const colName in row) {\n              rowValues.push(row[colName]);\n          }\n          allValues.push(rowValues.join(' '));\n      }\n  \n      sqlSchemaPrompt = sqlCreateTableQuery + '\\n' + sqlSelectTableQuery + '\\n' + columnNames.join(' ') + '\\n' + allValues.join('\\n');\n      \n      resolve();\n    } catch (e) {\n      console.error(e);\n      return reject(e);\n    }\n  });\n}\n\nasync function main() {\n    await getSQLPrompt();\n}\n\nawait main();\n\nreturn sqlSchemaPrompt;"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"2334","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-06 12:58:46"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const sqlQuery = $sqlQuery.trim();\n\nif (sqlQuery.includes(\"SELECT\") && sqlQuery.includes(\"WHERE\")) {\n    return sqlQuery;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"156","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-06 13:01:19"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const HOST = 'singlestore-host.com';\nconst USER = 'admin';\nconst PASSWORD = 'mypassword';\nconst DATABASE = 'mydb';\nconst TABLE = 'samples';\nconst mysql = require('mysql2/promise');\n\nlet result;\n\nfunction getSQLResult() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const singleStoreConnection = mysql.createPool({\n        host: HOST,\n        user: USER,\n        password: PASSWORD,\n        database: DATABASE,\n      });\n     \n      const [rows] = await singleStoreConnection.execute(\n        $sqlQuery\n      );\n  \n      result = JSON.stringify(rows)\n      \n      resolve();\n    } catch (e) {\n      console.error(e);\n      return reject(e);\n    }\n  });\n}\n\nasync function main() {\n    await getSQLResult();\n}\n\nawait main();\n\nreturn result;"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"823","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-06 13:01:37"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const HOST = 'singlestore-host.com';\nconst USER = 'admin';\nconst PASSWORD = 'mypassword';\nconst DATABASE = 'mydb';\nconst TABLE = 'samples';\nconst mysql = require('mysql2/promise');\n\nlet result;\n\nfunction getSQLResult() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const singleStoreConnection = mysql.createPool({\n        host: HOST,\n        user: USER,\n        password: PASSWORD,\n        database: DATABASE,\n      });\n     \n      const [rows] = await singleStoreConnection.execute(\n        $sqlQuery\n      );\n  \n      result = JSON.stringify(rows)\n      \n      resolve();\n    } catch (e) {\n      console.error(e);\n      return reject(e);\n    }\n  });\n}\n\nasync function main() {\n    await getSQLResult();\n}\n\nawait main();\n\nreturn result;"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"823","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-06 16:01:24"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/adb42e33-095d-46b9-8a0c-4c8d1cf7f94d","package":"server","request":{"body":{"history":[],"question":"qasdfcv","socketIOClientId":"v5vJ4qpYE3_ABiG-AAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"77","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/adb42e33-095d-46b9-8a0c-4c8d1cf7f94d","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/adb42e33-095d-46b9-8a0c-4c8d1cf7f94d"},"timestamp":"2024-03-06 16:16:40"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const sqlQuery = $sqlQuery.trim();\n\nif (sqlQuery.includes(\"SELECT\") && sqlQuery.includes(\"WHERE\")) {\n    return sqlQuery;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"156","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-06 16:17:40"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/adb42e33-095d-46b9-8a0c-4c8d1cf7f94d","package":"server","request":{"body":{"history":[],"question":"WDASFEJHUHKYTGRWFEq","socketIOClientId":"D5bmfe0mQClukCV5AAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"89","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/adb42e33-095d-46b9-8a0c-4c8d1cf7f94d","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/adb42e33-095d-46b9-8a0c-4c8d1cf7f94d"},"timestamp":"2024-03-06 16:28:10"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/df6ce5b0-e397-471f-a0e4-feeedac2597b","package":"server","request":{"body":{"history":[],"question":"efghjuyrthergefdgchfewdf"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"52","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/df6ce5b0-e397-471f-a0e4-feeedac2597b","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/df6ce5b0-e397-471f-a0e4-feeedac2597b"},"timestamp":"2024-03-06 16:28:18"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-load-method/openAIAssistant","package":"server","request":{"body":{"baseClasses":["OpenAIAssistant"],"category":"Agents","description":"An agent that uses OpenAI Assistant API to pick the tool and args to call","filePath":"/usr/src/packages/node_modules/flowise-components/dist/nodes/agents/OpenAIAssistant/OpenAIAssistant.js","icon":"/usr/src/packages/node_modules/flowise-components/dist/nodes/agents/OpenAIAssistant/assistant.svg","id":"openAIAssistant_0","inputAnchors":[{"id":"openAIAssistant_0-input-tools-Tool","label":"Allowed Tools","list":true,"name":"tools","type":"Tool"},{"description":"Detect text that could generate harmful output and prevent it from being sent to the language model","id":"openAIAssistant_0-input-inputModeration-Moderation","label":"Input Moderation","list":true,"name":"inputModeration","optional":true,"type":"Moderation"}],"inputParams":[{"id":"openAIAssistant_0-input-selectedAssistant-asyncOptions","label":"Select Assistant","loadMethod":"listAssistants","name":"selectedAssistant","type":"asyncOptions"},{"additionalParams":true,"description":"Messages can contain text, images, or files. In some cases, you may want to prevent others from downloading the files. Learn more from OpenAI File Annotation <a target=\"_blank\" href=\"https://platform.openai.com/docs/assistants/how-it-works/managing-threads-and-messages\">docs</a>","id":"openAIAssistant_0-input-disableFileDownload-boolean","label":"Disable File Download","name":"disableFileDownload","optional":true,"type":"boolean"}],"inputs":{"disableFileDownload":true,"inputModeration":"","selectedAssistant":"37cab857-c7ca-4938-88e6-c0f29789f339","tools":["{{calculator_0.data.instance}}"]},"label":"OpenAI Assistant","loadMethod":"listAssistants","loadMethods":{},"memoryMethods":{},"name":"openAIAssistant","outputAnchors":[{"id":"openAIAssistant_0-output-openAIAssistant-OpenAIAssistant","label":"OpenAIAssistant","name":"openAIAssistant","type":"OpenAIAssistant"}],"outputs":{},"selected":false,"type":"OpenAIAssistant","version":3},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"1966","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/0ebb62bb-24f2-46aa-a808-d96bf0d06903","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-load-method/openAIAssistant"},"timestamp":"2024-03-06 16:28:24"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"chatId":"4f84ba1d-da96-4fc5-8244-d190f1cd71bd","history":[{"message":"What Is AMD?","type":"userMessage"},{"message":"Can you look retrieve the text file?","type":"userMessage"},{"message":"Please fetch Vision Relief U.txt","type":"userMessage"},{"message":"Can you tell if the text file is saved in Pinecone vector database?","type":"userMessage"},{"message":"AMD, or Advanced Micro Devices, is a semiconductor company that specializes in the design and manufacture of computer processors, graphics cards, and other technology products.","type":"apiMessage"},{"message":"Yes, I can retrieve the text file for you.","type":"apiMessage"},{"message":"Yes, I can fetch the text file named \"Vision Relief U.txt\" if it exists and I have access to it.","type":"apiMessage"},{"message":"I don't know.","type":"apiMessage"}],"question":"gukjguftsytghjhgkjjl","socketIOClientId":"n9nuj8H2YKKkMk--AAAH"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"897","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-06 16:28:32"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"chatId":"4f84ba1d-da96-4fc5-8244-d190f1cd71bd","history":[{"message":"What Is AMD?","type":"userMessage"},{"message":"Can you look retrieve the text file?","type":"userMessage"},{"message":"Please fetch Vision Relief U.txt","type":"userMessage"},{"message":"Can you tell if the text file is saved in Pinecone vector database?","type":"userMessage"},{"message":"AMD, or Advanced Micro Devices, is a semiconductor company that specializes in the design and manufacture of computer processors, graphics cards, and other technology products.","type":"apiMessage"},{"message":"Yes, I can retrieve the text file for you.","type":"apiMessage"},{"message":"Yes, I can fetch the text file named \"Vision Relief U.txt\" if it exists and I have access to it.","type":"apiMessage"},{"message":"I don't know.","type":"apiMessage"},{"message":"gukjguftsytghjhgkjjl","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"}],"question":"yufusdythtxdju","socketIOClientId":"n9nuj8H2YKKkMk--AAAH"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"1031","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-06 16:28:35"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","package":"server","request":{"body":{"history":[],"question":"sadzfxghjgfds","socketIOClientId":"REeYHrfiERc0TUxcAAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"83","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad"},"timestamp":"2024-03-06 16:37:57"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","package":"server","request":{"body":{"history":[{"message":"sadzfxghjgfds","type":"userMessage"},{"message":"Error: Error: getaddrinfo ENOTFOUND singlestore-host.com","type":"apiMessage"}],"question":"3srextdcfyguuawsd","socketIOClientId":"REeYHrfiERc0TUxcAAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"226","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad"},"timestamp":"2024-03-06 16:38:01"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/cf87f3c2-b5de-48b9-abb1-f22b17a30f52","package":"server","request":{"body":{"history":[],"question":"WSEDFGHJGFDSAFGHJHHBVFDSA","socketIOClientId":"5mB5G__tFeuF1AeJAAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"95","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/cf87f3c2-b5de-48b9-abb1-f22b17a30f52","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/cf87f3c2-b5de-48b9-abb1-f22b17a30f52"},"timestamp":"2024-03-06 16:38:46"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[],"question":"huf fhdjye fghfdjk df","socketIOClientId":"0rJbqRulqX6ZT_CEAAAF"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"91","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-06 16:39:30"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/753a3b41-1c58-473c-bc81-0f3a6af6bd33","package":"server","request":{"body":{"history":[],"question":"asdfghjhgfdsaASDFGHJK","socketIOClientId":"WggXxVUCr1svz0UfAAAH"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"91","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/753a3b41-1c58-473c-bc81-0f3a6af6bd33","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/753a3b41-1c58-473c-bc81-0f3a6af6bd33"},"timestamp":"2024-03-06 16:39:57"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/adb42e33-095d-46b9-8a0c-4c8d1cf7f94d","package":"server","request":{"body":{"history":[],"question":"wertdfyhj","socketIOClientId":"n1NzOqrCMLRDGtKnAAAJ"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"79","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/adb42e33-095d-46b9-8a0c-4c8d1cf7f94d","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/adb42e33-095d-46b9-8a0c-4c8d1cf7f94d"},"timestamp":"2024-03-06 16:51:57"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/adb42e33-095d-46b9-8a0c-4c8d1cf7f94d","package":"server","request":{"body":{"history":[],"question":"sdcvbnbv","socketIOClientId":"lrZ_yySr2BoLwHIHAAAL"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"78","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/adb42e33-095d-46b9-8a0c-4c8d1cf7f94d","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/adb42e33-095d-46b9-8a0c-4c8d1cf7f94d"},"timestamp":"2024-03-06 16:55:57"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/6e707773-c5b0-4278-acd2-3478f031cf69","package":"server","request":{"body":{"history":[],"question":"fdhsrgh anf dsncmnjkvfdaba bfg","socketIOClientId":"fUp2xGKvQ1mYjPsXAAAN"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"100","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/6e707773-c5b0-4278-acd2-3478f031cf69","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/6e707773-c5b0-4278-acd2-3478f031cf69"},"timestamp":"2024-03-06 16:56:06"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"sdfghjkjhg","socketIOClientId":"oeebN4wtaW-lw9D_AAAP"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"80","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-06 16:56:12"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[],"question":"pokjhgfd","socketIOClientId":"DAB-BudcALS5C1XRAAAR"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"78","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-06 17:03:55"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/1bd89d79-770a-4923-80c7-5970fef14e7f","package":"server","request":{"body":{"history":[],"question":"hi"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"30","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/1bd89d79-770a-4923-80c7-5970fef14e7f","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/1bd89d79-770a-4923-80c7-5970fef14e7f"},"timestamp":"2024-03-06 17:33:11"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"hjhmnblhuigfylfff","socketIOClientId":"a_0qNDy7waXftTVHAAAV"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"87","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-06 17:33:42"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"228","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-06 17:42:54"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"if (task.includes(\"clinical trial\")) {\n    return \"We have a range of clinical trials available. Could you specify the condition or treatment you are interested in, so I can assist you further?\";\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"228","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-06 17:42:55"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73","package":"server","request":{"body":{"history":[],"question":";","socketIOClientId":"jMmLqHbhdPNqCzDoAAAX"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"71","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73"},"timestamp":"2024-03-06 17:43:02"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"hi ","socketIOClientId":"sVW25QEkic9jI_V_AAAb"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-06 17:44:40"}
{"level":"info","message":"üñä PUT /api/v1/chatflows/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"name":"Test Chatflow"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"24","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/chatflows/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-06 17:45:26"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"Hi","socketIOClientId":"YAV_udjOgki9gLRnAAAd"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"72","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-06 17:45:41"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/f3b073ad-67ef-46be-9efc-d8b79121544f","package":"server","request":{"body":{"history":[],"question":"Where are we located?","socketIOClientId":"xuxvrhGOJnB3iPCEAAAf"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"91","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/f3b073ad-67ef-46be-9efc-d8b79121544f","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/f3b073ad-67ef-46be-9efc-d8b79121544f"},"timestamp":"2024-03-06 18:01:28"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-config","package":"server","request":{"body":{"baseClasses":["OpenAIEmbeddings","Embeddings"],"category":"Embeddings","credential":"023966ed-0c4f-4b0d-af8f-bbc26f2c4545","description":"OpenAI API to generate embeddings for a given text","filePath":"/usr/src/packages/node_modules/flowise-components/dist/nodes/embeddings/OpenAIEmbedding/OpenAIEmbedding.js","icon":"/usr/src/packages/node_modules/flowise-components/dist/nodes/embeddings/OpenAIEmbedding/openai.svg","id":"openAIEmbeddings_0","inputAnchors":[],"inputParams":[{"credentialNames":["openAIApi"],"id":"openAIEmbeddings_0-input-credential-credential","label":"Connect Credential","name":"credential","type":"credential"},{"additionalParams":true,"id":"openAIEmbeddings_0-input-stripNewLines-boolean","label":"Strip New Lines","name":"stripNewLines","optional":true,"type":"boolean"},{"additionalParams":true,"id":"openAIEmbeddings_0-input-batchSize-number","label":"Batch Size","name":"batchSize","optional":true,"type":"number"},{"additionalParams":true,"id":"openAIEmbeddings_0-input-timeout-number","label":"Timeout","name":"timeout","optional":true,"type":"number"},{"additionalParams":true,"id":"openAIEmbeddings_0-input-basepath-string","label":"BasePath","name":"basepath","optional":true,"type":"string"}],"inputs":{"basepath":"","batchSize":"","stripNewLines":"","timeout":""},"label":"OpenAI Embeddings","name":"openAIEmbeddings","outputAnchors":[{"id":"openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings","label":"OpenAIEmbeddings","name":"openAIEmbeddings","type":"OpenAIEmbeddings | Embeddings"}],"outputs":{},"selected":false,"type":"OpenAIEmbeddings","version":1},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"1613","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/6e707773-c5b0-4278-acd2-3478f031cf69","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-config"},"timestamp":"2024-03-07 15:31:33"}
{"level":"info","message":"üñä PUT /api/v1/chatflows/6e707773-c5b0-4278-acd2-3478f031cf69","package":"server","request":{"body":{"flowData":"{\"nodes\":[{\"width\":300,\"height\":481,\"id\":\"conversationalRetrievalQAChain_0\",\"position\":{\"x\":1069.4596399763632,\"y\":297.97067929325453},\"type\":\"customNode\",\"data\":{\"label\":\"Conversational Retrieval QA Chain\",\"name\":\"conversationalRetrievalQAChain\",\"version\":1,\"type\":\"ConversationalRetrievalQAChain\",\"icon\":\"/usr/src/packages/node_modules/flowise-components/dist/nodes/chains/ConversationalRetrievalQAChain/qa.svg\",\"category\":\"Chains\",\"description\":\"Document QA - built on RetrievalQAChain to provide a chat history component\",\"baseClasses\":[\"ConversationalRetrievalQAChain\",\"BaseChain\",\"Runnable\"],\"inputs\":{\"model\":\"{{chatOpenAI_0.data.instance}}\",\"vectorStoreRetriever\":\"{{pinecone_0.data.instance}}\",\"memory\":\"\",\"returnSourceDocuments\":\"\",\"systemMessagePrompt\":\"\",\"chainOption\":\"\"},\"filePath\":\"/usr/src/packages/node_modules/flowise-components/dist/nodes/chains/ConversationalRetrievalQAChain/ConversationalRetrievalQAChain.js\",\"inputAnchors\":[{\"label\":\"Language Model\",\"name\":\"model\",\"type\":\"BaseLanguageModel\",\"id\":\"conversationalRetrievalQAChain_0-input-model-BaseLanguageModel\"},{\"label\":\"Vector Store Retriever\",\"name\":\"vectorStoreRetriever\",\"type\":\"BaseRetriever\",\"id\":\"conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever\"},{\"label\":\"Memory\",\"name\":\"memory\",\"type\":\"BaseMemory\",\"optional\":true,\"description\":\"If left empty, a default BufferMemory will be used\",\"id\":\"conversationalRetrievalQAChain_0-input-memory-BaseMemory\"}],\"inputParams\":[{\"label\":\"Return Source Documents\",\"name\":\"returnSourceDocuments\",\"type\":\"boolean\",\"optional\":true,\"id\":\"conversationalRetrievalQAChain_0-input-returnSourceDocuments-boolean\"},{\"label\":\"System Message\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"additionalParams\":true,\"optional\":true,\"placeholder\":\"I want you to act as a document that I am having a conversation with. Your name is \\\"AI Assistant\\\". You will provide me with answers from the given info. If the answer is not included, say exactly \\\"Hmm, I am not sure.\\\" and stop after that. Refuse to answer any question not about the info. Never break character.\",\"id\":\"conversationalRetrievalQAChain_0-input-systemMessagePrompt-string\"},{\"label\":\"Chain Option\",\"name\":\"chainOption\",\"type\":\"options\",\"options\":[{\"label\":\"MapReduceDocumentsChain\",\"name\":\"map_reduce\",\"description\":\"Suitable for QA tasks over larger documents and can run the preprocessing step in parallel, reducing the running time\"},{\"label\":\"RefineDocumentsChain\",\"name\":\"refine\",\"description\":\"Suitable for QA tasks over a large number of documents.\"},{\"label\":\"StuffDocumentsChain\",\"name\":\"stuff\",\"description\":\"Suitable for QA tasks over a small number of documents.\"}],\"additionalParams\":true,\"optional\":true,\"id\":\"conversationalRetrievalQAChain_0-input-chainOption-options\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"conversationalRetrievalQAChain_0-output-conversationalRetrievalQAChain-ConversationalRetrievalQAChain|BaseChain|Runnable\",\"name\":\"conversationalRetrievalQAChain\",\"label\":\"ConversationalRetrievalQAChain\",\"type\":\"ConversationalRetrievalQAChain | BaseChain | Runnable\"}],\"id\":\"conversationalRetrievalQAChain_0\",\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":1069.4596399763632,\"y\":297.97067929325453},\"dragging\":false},{\"width\":300,\"height\":576,\"id\":\"chatOpenAI_0\",\"position\":{\"x\":534.517334383053,\"y\":81.6764091715194},\"type\":\"customNode\",\"data\":{\"label\":\"ChatOpenAI\",\"name\":\"chatOpenAI\",\"version\":2,\"type\":\"ChatOpenAI\",\"icon\":\"/usr/src/packages/node_modules/flowise-components/dist/nodes/chatmodels/ChatOpenAI/openai.svg\",\"category\":\"Chat Models\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"baseClasses\":[\"ChatOpenAI\",\"BaseChatModel\",\"BaseLanguageModel\",\"Runnable\"],\"credential\":\"023966ed-0c4f-4b0d-af8f-bbc26f2c4545\",\"inputs\":{\"cache\":\"\",\"modelName\":\"gpt-3.5-turbo\",\"temperature\":\"0.7\",\"maxTokens\":\"\",\"topP\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"timeout\":\"\",\"basepath\":\"\",\"baseOptions\":\"\"},\"filePath\":\"/usr/src/packages/node_modules/flowise-components/dist/nodes/chatmodels/ChatOpenAI/ChatOpenAI.js\",\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"chatOpenAI_0-input-cache-BaseCache\"}],\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"chatOpenAI_0-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"options\",\"options\":[{\"label\":\"gpt-4\",\"name\":\"gpt-4\"},{\"label\":\"gpt-4-1106-preview\",\"name\":\"gpt-4-1106-preview\"},{\"label\":\"gpt-4-vision-preview\",\"name\":\"gpt-4-vision-preview\"},{\"label\":\"gpt-4-0613\",\"name\":\"gpt-4-0613\"},{\"label\":\"gpt-4-32k\",\"name\":\"gpt-4-32k\"},{\"label\":\"gpt-4-32k-0613\",\"name\":\"gpt-4-32k-0613\"},{\"label\":\"gpt-3.5-turbo\",\"name\":\"gpt-3.5-turbo\"},{\"label\":\"gpt-3.5-turbo-1106\",\"name\":\"gpt-3.5-turbo-1106\"},{\"label\":\"gpt-3.5-turbo-0613\",\"name\":\"gpt-3.5-turbo-0613\"},{\"label\":\"gpt-3.5-turbo-16k\",\"name\":\"gpt-3.5-turbo-16k\"},{\"label\":\"gpt-3.5-turbo-16k-0613\",\"name\":\"gpt-3.5-turbo-16k-0613\"}],\"default\":\"gpt-3.5-turbo\",\"optional\":true,\"id\":\"chatOpenAI_0-input-modelName-options\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"step\":0.1,\"default\":0.9,\"optional\":true,\"id\":\"chatOpenAI_0-input-temperature-number\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-topP-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-presencePenalty-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-basepath-string\"},{\"label\":\"BaseOptions\",\"name\":\"baseOptions\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-baseOptions-json\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"name\":\"chatOpenAI\",\"label\":\"ChatOpenAI\",\"type\":\"ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable\"}],\"id\":\"chatOpenAI_0\",\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":534.517334383053,\"y\":81.6764091715194},\"dragging\":false},{\"width\":300,\"height\":439,\"id\":\"textFile_0\",\"position\":{\"x\":3.6057198106458657,\"y\":30.32344952609796},\"type\":\"customNode\",\"data\":{\"label\":\"Text File\",\"name\":\"textFile\",\"version\":3,\"type\":\"Document\",\"icon\":\"/usr/src/packages/node_modules/flowise-components/dist/nodes/documentloaders/Text/Txt.svg\",\"category\":\"Document Loaders\",\"description\":\"Load data from text files\",\"baseClasses\":[\"Document\"],\"inputs\":{\"txtFile\":\"data:text/plain;base64,,filename:Vision Relief U.txt\",\"textSplitter\":\"{{recursiveCharacterTextSplitter_0.data.instance}}\",\"metadata\":\"\"},\"outputs\":{\"output\":\"document\"},\"filePath\":\"/usr/src/packages/node_modules/flowise-components/dist/nodes/documentloaders/Text/Text.js\",\"inputAnchors\":[{\"label\":\"Text Splitter\",\"name\":\"textSplitter\",\"type\":\"TextSplitter\",\"optional\":true,\"id\":\"textFile_0-input-textSplitter-TextSplitter\"}],\"inputParams\":[{\"label\":\"Txt File\",\"name\":\"txtFile\",\"type\":\"file\",\"fileType\":\".txt, .html, .aspx, .asp, .cpp, .c, .cs, .css, .go, .h, .java, .js, .less, .ts, .php, .proto, .python, .py, .rst, .ruby, .rb, .rs, .scala, .sc, .scss, .sol, .sql, .swift, .markdown, .md, .tex, .ltx, .vb, .xml\",\"id\":\"textFile_0-input-txtFile-file\"},{\"label\":\"Metadata\",\"name\":\"metadata\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"textFile_0-input-metadata-json\"}],\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"textFile_0-output-document-Document\",\"name\":\"document\",\"label\":\"Document\",\"type\":\"Document\"},{\"id\":\"textFile_0-output-text-string|json\",\"name\":\"text\",\"label\":\"Text\",\"type\":\"string | json\"}],\"default\":\"document\"}],\"id\":\"textFile_0\",\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":3.6057198106458657,\"y\":30.32344952609796},\"dragging\":false},{\"width\":300,\"height\":430,\"id\":\"recursiveCharacterTextSplitter_0\",\"position\":{\"x\":-394.4239217520411,\"y\":71.51087910873053},\"type\":\"customNode\",\"data\":{\"label\":\"Recursive Character Text Splitter\",\"name\":\"recursiveCharacterTextSplitter\",\"version\":2,\"type\":\"RecursiveCharacterTextSplitter\",\"icon\":\"/usr/src/packages/node_modules/flowise-components/dist/nodes/textsplitters/RecursiveCharacterTextSplitter/textsplitter.svg\",\"category\":\"Text Splitters\",\"description\":\"Split documents recursively by different characters - starting with \\\"\\\\n\\\\n\\\", then \\\"\\\\n\\\", then \\\" \\\"\",\"baseClasses\":[\"RecursiveCharacterTextSplitter\",\"TextSplitter\",\"BaseDocumentTransformer\",\"Runnable\"],\"inputs\":{\"chunkSize\":\"200\",\"chunkOverlap\":\"20\",\"separators\":\"\"},\"filePath\":\"/usr/src/packages/node_modules/flowise-components/dist/nodes/textsplitters/RecursiveCharacterTextSplitter/RecursiveCharacterTextSplitter.js\",\"inputAnchors\":[],\"inputParams\":[{\"label\":\"Chunk Size\",\"name\":\"chunkSize\",\"type\":\"number\",\"default\":1000,\"optional\":true,\"id\":\"recursiveCharacterTextSplitter_0-input-chunkSize-number\"},{\"label\":\"Chunk Overlap\",\"name\":\"chunkOverlap\",\"type\":\"number\",\"optional\":true,\"id\":\"recursiveCharacterTextSplitter_0-input-chunkOverlap-number\"},{\"label\":\"Custom Separators\",\"name\":\"separators\",\"type\":\"string\",\"rows\":4,\"description\":\"Array of custom separators to determine when to split the text, will override the default separators\",\"placeholder\":\"[\\\"|\\\", \\\"##\\\", \\\">\\\", \\\"-\\\"]\",\"additionalParams\":true,\"optional\":true,\"id\":\"recursiveCharacterTextSplitter_0-input-separators-string\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"recursiveCharacterTextSplitter_0-output-recursiveCharacterTextSplitter-RecursiveCharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable\",\"name\":\"recursiveCharacterTextSplitter\",\"label\":\"RecursiveCharacterTextSplitter\",\"type\":\"RecursiveCharacterTextSplitter | TextSplitter | BaseDocumentTransformer | Runnable\"}],\"id\":\"recursiveCharacterTextSplitter_0\",\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":-394.4239217520411,\"y\":71.51087910873053},\"dragging\":false},{\"width\":300,\"height\":330,\"id\":\"openAIEmbeddings_0\",\"position\":{\"x\":-232.26697175623752,\"y\":601.4571495150616},\"type\":\"customNode\",\"data\":{\"label\":\"OpenAI Embeddings\",\"name\":\"openAIEmbeddings\",\"version\":1,\"type\":\"OpenAIEmbeddings\",\"icon\":\"/usr/src/packages/node_modules/flowise-components/dist/nodes/embeddings/OpenAIEmbedding/openai.svg\",\"category\":\"Embeddings\",\"description\":\"OpenAI API to generate embeddings for a given text\",\"baseClasses\":[\"OpenAIEmbeddings\",\"Embeddings\"],\"credential\":\"023966ed-0c4f-4b0d-af8f-bbc26f2c4545\",\"inputs\":{\"stripNewLines\":\"\",\"batchSize\":\"\",\"timeout\":\"\",\"basepath\":\"\"},\"filePath\":\"/usr/src/packages/node_modules/flowise-components/dist/nodes/embeddings/OpenAIEmbedding/OpenAIEmbedding.js\",\"inputAnchors\":[],\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"openAIEmbeddings_0-input-credential-credential\"},{\"label\":\"Strip New Lines\",\"name\":\"stripNewLines\",\"type\":\"boolean\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAIEmbeddings_0-input-stripNewLines-boolean\"},{\"label\":\"Batch Size\",\"name\":\"batchSize\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAIEmbeddings_0-input-batchSize-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAIEmbeddings_0-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"openAIEmbeddings_0-input-basepath-string\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings\",\"name\":\"openAIEmbeddings\",\"label\":\"OpenAIEmbeddings\",\"type\":\"OpenAIEmbeddings | Embeddings\"}],\"id\":\"openAIEmbeddings_0\",\"selected\":false},\"selected\":false,\"dragging\":false,\"positionAbsolute\":{\"x\":-232.26697175623752,\"y\":601.4571495150616}},{\"width\":300,\"height\":557,\"id\":\"pinecone_0\",\"position\":{\"x\":527.8262412266549,\"y\":744.8337728193051},\"type\":\"customNode\",\"data\":{\"vectorStoreMethods\":{},\"label\":\"Pinecone\",\"name\":\"pinecone\",\"version\":1,\"type\":\"Pinecone\",\"icon\":\"/usr/src/packages/node_modules/flowise-components/dist/nodes/vectorstores/Pinecone/pinecone.svg\",\"category\":\"Vector Stores\",\"description\":\"Upsert embedded data and perform similarity search upon query using Pinecone, a leading fully managed hosted vector database\",\"baseClasses\":[\"Pinecone\",\"VectorStoreRetriever\",\"BaseRetriever\"],\"badge\":\"NEW\",\"credential\":\"eb284d62-a0b3-4139-bf6a-3d4fb0cdc14c\",\"inputs\":{\"document\":[\"{{textFile_0.data.instance}}\"],\"embeddings\":\"{{openAIEmbeddings_0.data.instance}}\",\"pineconeIndex\":\"demo\",\"pineconeNamespace\":\"default\",\"pineconeMetadataFilter\":\"\",\"topK\":\"\"},\"outputs\":{\"output\":\"retriever\"},\"filePath\":\"/usr/src/packages/node_modules/flowise-components/dist/nodes/vectorstores/Pinecone/Pinecone.js\",\"inputAnchors\":[{\"label\":\"Document\",\"name\":\"document\",\"type\":\"Document\",\"list\":true,\"optional\":true,\"id\":\"pinecone_0-input-document-Document\"},{\"label\":\"Embeddings\",\"name\":\"embeddings\",\"type\":\"Embeddings\",\"id\":\"pinecone_0-input-embeddings-Embeddings\"}],\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"pineconeApi\"],\"id\":\"pinecone_0-input-credential-credential\"},{\"label\":\"Pinecone Index\",\"name\":\"pineconeIndex\",\"type\":\"string\",\"id\":\"pinecone_0-input-pineconeIndex-string\"},{\"label\":\"Pinecone Namespace\",\"name\":\"pineconeNamespace\",\"type\":\"string\",\"placeholder\":\"my-first-namespace\",\"additionalParams\":true,\"optional\":true,\"id\":\"pinecone_0-input-pineconeNamespace-string\"},{\"label\":\"Pinecone Metadata Filter\",\"name\":\"pineconeMetadataFilter\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"pinecone_0-input-pineconeMetadataFilter-json\"},{\"label\":\"Top K\",\"name\":\"topK\",\"description\":\"Number of top results to fetch. Default to 4\",\"placeholder\":\"4\",\"type\":\"number\",\"additionalParams\":true,\"optional\":true,\"id\":\"pinecone_0-input-topK-number\"}],\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"pinecone_0-output-retriever-Pinecone|VectorStoreRetriever|BaseRetriever\",\"name\":\"retriever\",\"label\":\"Pinecone Retriever\",\"type\":\"Pinecone | VectorStoreRetriever | BaseRetriever\"},{\"id\":\"pinecone_0-output-vectorStore-Pinecone|VectorStore\",\"name\":\"vectorStore\",\"label\":\"Pinecone Vector Store\",\"type\":\"Pinecone | VectorStore\"}],\"default\":\"retriever\"}],\"id\":\"pinecone_0\",\"selected\":false},\"selected\":false,\"positionAbsolute\":{\"x\":527.8262412266549,\"y\":744.8337728193051},\"dragging\":false}],\"edges\":[{\"source\":\"chatOpenAI_0\",\"sourceHandle\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"target\":\"conversationalRetrievalQAChain_0\",\"targetHandle\":\"conversationalRetrievalQAChain_0-input-model-BaseLanguageModel\",\"type\":\"buttonedge\",\"id\":\"chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-conversationalRetrievalQAChain_0-conversationalRetrievalQAChain_0-input-model-BaseLanguageModel\"},{\"source\":\"recursiveCharacterTextSplitter_0\",\"sourceHandle\":\"recursiveCharacterTextSplitter_0-output-recursiveCharacterTextSplitter-RecursiveCharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable\",\"target\":\"textFile_0\",\"targetHandle\":\"textFile_0-input-textSplitter-TextSplitter\",\"type\":\"buttonedge\",\"id\":\"recursiveCharacterTextSplitter_0-recursiveCharacterTextSplitter_0-output-recursiveCharacterTextSplitter-RecursiveCharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable-textFile_0-textFile_0-input-textSplitter-TextSplitter\"},{\"source\":\"textFile_0\",\"sourceHandle\":\"textFile_0-output-document-Document\",\"target\":\"pinecone_0\",\"targetHandle\":\"pinecone_0-input-document-Document\",\"type\":\"buttonedge\",\"id\":\"textFile_0-textFile_0-output-document-Document-pinecone_0-pinecone_0-input-document-Document\"},{\"source\":\"openAIEmbeddings_0\",\"sourceHandle\":\"openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings\",\"target\":\"pinecone_0\",\"targetHandle\":\"pinecone_0-input-embeddings-Embeddings\",\"type\":\"buttonedge\",\"id\":\"openAIEmbeddings_0-openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings-pinecone_0-pinecone_0-input-embeddings-Embeddings\"},{\"source\":\"pinecone_0\",\"sourceHandle\":\"pinecone_0-output-retriever-Pinecone|VectorStoreRetriever|BaseRetriever\",\"target\":\"conversationalRetrievalQAChain_0\",\"targetHandle\":\"conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever\",\"type\":\"buttonedge\",\"id\":\"pinecone_0-pinecone_0-output-retriever-Pinecone|VectorStoreRetriever|BaseRetriever-conversationalRetrievalQAChain_0-conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever\"}],\"viewport\":{\"x\":486.81314141201074,\"y\":15.904945462153648,\"zoom\":0.47831449500671724}}","name":"Client Demo"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"1210651","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/6e707773-c5b0-4278-acd2-3478f031cf69","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/chatflows/6e707773-c5b0-4278-acd2-3478f031cf69"},"timestamp":"2024-03-12 12:25:05"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73","package":"server","request":{"body":{"history":[],"question":"w","socketIOClientId":"-oOT0zNMy9aFIzF2AAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"71","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/36f494a9-c6be-49ca-9521-3d211df74b73","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/36f494a9-c6be-49ca-9521-3d211df74b73"},"timestamp":"2024-03-12 12:25:29"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-config","package":"server","request":{"body":{"baseClasses":["AgentExecutor","BaseChain","Runnable"],"category":"Agents","description":"An agent optimized for retrieval during conversation, answering questions based on past dialogue, all using OpenAI's Function Calling","filePath":"C:\\Users\\Nuri\\Desktop\\Client_Runiing\\node_modules\\flowise-components\\dist\\nodes\\agents\\ConversationalRetrievalAgent\\ConversationalRetrievalAgent.js","icon":"C:/Users/Nuri/Desktop/Client_Runiing/node_modules/flowise-components/dist/nodes/agents/ConversationalRetrievalAgent/agent.svg","id":"conversationalRetrievalAgent_0","inputAnchors":[{"id":"conversationalRetrievalAgent_0-input-tools-Tool","label":"Allowed Tools","list":true,"name":"tools","type":"Tool"},{"id":"conversationalRetrievalAgent_0-input-memory-BaseChatMemory","label":"Memory","name":"memory","type":"BaseChatMemory"},{"id":"conversationalRetrievalAgent_0-input-model-BaseChatModel","label":"OpenAI/Azure Chat Model","name":"model","type":"BaseChatModel"}],"inputParams":[{"additionalParams":true,"default":"Do your best to answer the questions. Feel free to use any tools available to look up relevant information, only if necessary.","id":"conversationalRetrievalAgent_0-input-systemMessage-string","label":"System Message","name":"systemMessage","optional":true,"rows":4,"type":"string"}],"inputs":{"memory":"","model":"","systemMessage":"Do your best to answer the questions. Feel free to use any tools available to look up relevant information, only if necessary.","tools":""},"label":"Conversational Retrieval Agent","name":"conversationalRetrievalAgent","outputAnchors":[{"description":"An agent optimized for retrieval during conversation, answering questions based on past dialogue, all using OpenAI's Function Calling","id":"conversationalRetrievalAgent_0-output-conversationalRetrievalAgent-AgentExecutor|BaseChain|Runnable","label":"AgentExecutor","name":"conversationalRetrievalAgent","type":"AgentExecutor | BaseChain | Runnable"}],"outputs":{},"selected":false,"type":"AgentExecutor","version":3},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"2027","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/df6ce5b0-e397-471f-a0e4-feeedac2597b","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-config"},"timestamp":"2024-03-12 12:59:18"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/vector/internal-upsert/adb42e33-095d-46b9-8a0c-4c8d1cf7f94d","package":"server","request":{"body":{"stopNodeId":"memoryVectorStore_0"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"36","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/adb42e33-095d-46b9-8a0c-4c8d1cf7f94d","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/vector/internal-upsert/adb42e33-095d-46b9-8a0c-4c8d1cf7f94d"},"timestamp":"2024-03-12 13:27:04"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-load-method/openAIAssistant","package":"server","request":{"body":{"baseClasses":["OpenAIAssistant"],"category":"Agents","description":"An agent that uses OpenAI Assistant API to pick the tool and args to call","filePath":"/usr/src/packages/node_modules/flowise-components/dist/nodes/agents/OpenAIAssistant/OpenAIAssistant.js","icon":"/usr/src/packages/node_modules/flowise-components/dist/nodes/agents/OpenAIAssistant/assistant.svg","id":"openAIAssistant_0","inputAnchors":[{"id":"openAIAssistant_0-input-tools-Tool","label":"Allowed Tools","list":true,"name":"tools","type":"Tool"},{"description":"Detect text that could generate harmful output and prevent it from being sent to the language model","id":"openAIAssistant_0-input-inputModeration-Moderation","label":"Input Moderation","list":true,"name":"inputModeration","optional":true,"type":"Moderation"}],"inputParams":[{"id":"openAIAssistant_0-input-selectedAssistant-asyncOptions","label":"Select Assistant","loadMethod":"listAssistants","name":"selectedAssistant","type":"asyncOptions"},{"additionalParams":true,"description":"Messages can contain text, images, or files. In some cases, you may want to prevent others from downloading the files. Learn more from OpenAI File Annotation <a target=\"_blank\" href=\"https://platform.openai.com/docs/assistants/how-it-works/managing-threads-and-messages\">docs</a>","id":"openAIAssistant_0-input-disableFileDownload-boolean","label":"Disable File Download","name":"disableFileDownload","optional":true,"type":"boolean"}],"inputs":{"disableFileDownload":true,"inputModeration":"","selectedAssistant":"37cab857-c7ca-4938-88e6-c0f29789f339","tools":["{{calculator_0.data.instance}}"]},"label":"OpenAI Assistant","loadMethod":"listAssistants","loadMethods":{},"memoryMethods":{},"name":"openAIAssistant","outputAnchors":[{"id":"openAIAssistant_0-output-openAIAssistant-OpenAIAssistant","label":"OpenAIAssistant","name":"openAIAssistant","type":"OpenAIAssistant"}],"outputs":{},"selected":false,"type":"OpenAIAssistant","version":3},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"1966","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/0ebb62bb-24f2-46aa-a808-d96bf0d06903","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-load-method/openAIAssistant"},"timestamp":"2024-03-12 13:27:22"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const sqlQuery = $sqlQuery.trim();\n\nif (sqlQuery.includes(\"SELECT\") && sqlQuery.includes(\"WHERE\")) {\n    return sqlQuery;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"156","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-12 19:09:26"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"Hi, what is the update?","socketIOClientId":"-fERfAh5TjYB5heMAAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"93","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-12 19:16:00"}
{"level":"info","message":"üñä PUT /api/v1/chatflows/1911b87f-b526-44da-bc9d-03a3cff9de99","package":"server","request":{"body":{"isPublic":true},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"17","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/1911b87f-b526-44da-bc9d-03a3cff9de99","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/chatflows/1911b87f-b526-44da-bc9d-03a3cff9de99"},"timestamp":"2024-03-13 10:48:30"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[],"question":"wfeghjhgfdsa","socketIOClientId":"rCUnmDJIrUNGPfB8AAAF"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"82","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-13 10:50:22"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/prediction/1911b87f-b526-44da-bc9d-03a3cff9de99","package":"server","request":{"body":{"chatId":"2444ae59-d7cf-4eaf-8d42-69c5046a15a9","history":[],"overrideConfig":{},"question":"Hi there"},"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"104","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/chatbot/1911b87f-b526-44da-bc9d-03a3cff9de99","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/prediction/1911b87f-b526-44da-bc9d-03a3cff9de99"},"timestamp":"2024-03-13 12:05:56"}
{"level":"info","message":"üñä PUT /api/v1/chatflows/6e707773-c5b0-4278-acd2-3478f031cf69","package":"server","request":{"body":{"isPublic":true},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"17","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/6e707773-c5b0-4278-acd2-3478f031cf69","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/chatflows/6e707773-c5b0-4278-acd2-3478f031cf69"},"timestamp":"2024-03-13 12:10:47"}
{"level":"info","message":"üñä PUT /api/v1/chatflows/6e707773-c5b0-4278-acd2-3478f031cf69","package":"server","request":{"body":{"chatbotConfig":"{\"botMessage\":{\"showAvatar\":false,\"backgroundColor\":\"#f7f8ff\",\"textColor\":\"#303235\"},\"userMessage\":{\"showAvatar\":false,\"backgroundColor\":\"#cc9ff5\",\"textColor\":\"#ffffff\"},\"textInput\":{\"backgroundColor\":\"#ffffff\",\"textColor\":\"#303235\",\"sendButtonColor\":\"#3B81F6\"},\"overrideConfig\":{},\"backgroundColor\":\"#ffffff\",\"fontSize\":16,\"poweredByTextColor\":\"#303235\"}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"425","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/6e707773-c5b0-4278-acd2-3478f031cf69","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/chatflows/6e707773-c5b0-4278-acd2-3478f031cf69"},"timestamp":"2024-03-13 12:11:02"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[],"question":"fytghuijo","socketIOClientId":"GofBAkXkQem56_cbAAAH"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"79","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-13 13:14:56"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"SADFGHJK","socketIOClientId":"6a8THCgu3Uah8aBsAAAJ"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"78","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-13 13:15:10"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"ETRGHGHG","socketIOClientId":"Ar4FHk7Rftl0yZH6AAAL"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"78","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-13 13:15:47"}
{"level":"info","message":"üñä PUT /api/v1/chatflows/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"isPublic":true},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"17","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/chatflows/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-13 13:23:41"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b","package":"server","request":{"body":{"history":[],"question":"FDGSJKDG","socketIOClientId":"n-Z2Eso5GWcmei57AAAF"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"78","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d940915c-37d9-44d1-8a6d-5556adbd096b","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d940915c-37d9-44d1-8a6d-5556adbd096b"},"timestamp":"2024-03-13 13:36:53"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"ETFHGJEDFGH","socketIOClientId":"vltQj8TUCvLh4YQPAAAH"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"81","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-13 13:37:03"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"chatId":"6a737c3b-3769-4946-ba02-2b75b5bf8531","history":[],"overrideConfig":{},"question":"YT","socketIOClientId":"tjV3hVoGV4rEmzEnAAAJ"},"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"140","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/chatbot/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-13 13:37:24"}
{"level":"info","message":"üñä PUT /api/v1/chatflows/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"chatbotConfig":"{\"botMessage\":{\"showAvatar\":true,\"backgroundColor\":\"#e084b4\",\"textColor\":\"#303235\"},\"userMessage\":{\"showAvatar\":true,\"backgroundColor\":\"#77bfaf\",\"textColor\":\"#ffffff\"},\"textInput\":{\"backgroundColor\":\"#77bfaf\",\"textColor\":\"#303235\",\"sendButtonColor\":\"#e084b4\"},\"overrideConfig\":{},\"backgroundColor\":\"#e084b4\",\"fontSize\":16,\"poweredByTextColor\":\"#303235\"}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"423","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/chatflows/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-13 13:38:45"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"chatId":"6a737c3b-3769-4946-ba02-2b75b5bf8531","history":[{"message":"YT","type":"userMessage"},{"message":"Error: Error: Credentials could not be decrypted.","type":"apiMessage"}],"overrideConfig":{},"question":"G","socketIOClientId":"Vay0v9E-QT984Da8AAAL"},"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"260","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/chatbot/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-13 13:38:53"}
{"level":"info","message":"üñä PUT /api/v1/chatflows/f3b073ad-67ef-46be-9efc-d8b79121544f","package":"server","request":{"body":{"isPublic":true},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"17","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/f3b073ad-67ef-46be-9efc-d8b79121544f","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/chatflows/f3b073ad-67ef-46be-9efc-d8b79121544f"},"timestamp":"2024-03-13 16:14:43"}
{"level":"info","message":"üñä PUT /api/v1/chatflows/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"isPublic":true},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"17","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"PUT","params":{},"query":{},"url":"/api/v1/chatflows/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-13 16:24:50"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"fgchjkl;","socketIOClientId":"XQSbV_yqbq9iAIS6AAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"78","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-13 16:55:48"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d","package":"server","request":{"body":{"chatId":"4f84ba1d-da96-4fc5-8244-d190f1cd71bd","history":[{"id":"00e7bf1f-46e6-4587-ac11-689b7a8d9664","message":"What Is AMD?","type":"userMessage"},{"id":"5c752bd4-586d-4a0b-9005-9aaafca602bf","message":"Can you look retrieve the text file?","type":"userMessage"},{"id":"e2f9d400-b023-418a-87de-f2d4c7704c43","message":"Please fetch Vision Relief U.txt","type":"userMessage"},{"id":"7c46591e-0a1d-4755-9628-a0ca254bb670","message":"Can you tell if the text file is saved in Pinecone vector database?","type":"userMessage"},{"id":"699972bb-3129-430e-8b95-16ddd565ee90","message":"AMD, or Advanced Micro Devices, is a semiconductor company that specializes in the design and manufacture of computer processors, graphics cards, and other technology products.","type":"apiMessage"},{"id":"a739a595-92aa-405b-b5cc-41229e26db59","message":"Yes, I can retrieve the text file for you.","type":"apiMessage"},{"id":"4c703579-c958-43de-9719-36ed01d86e7b","message":"Yes, I can fetch the text file named \"Vision Relief U.txt\" if it exists and I have access to it.","type":"apiMessage"},{"id":"9adc4247-737e-47fd-9080-cc17a9f5b872","message":"I don't know.","type":"apiMessage"}],"question":"wdf","socketIOClientId":"CiVzYeDeQvmO23PlAAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en;q=0.9","connection":"keep-alive","content-length":"1232","content-type":"application/json","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/23a2610e-edca-496c-9745-4f8bd0f59c8d","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/23a2610e-edca-496c-9745-4f8bd0f59c8d"},"timestamp":"2024-03-13 17:37:27"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/node-custom-function","package":"server","request":{"body":{"javascriptFunction":"const sqlQuery = $sqlQuery.trim();\n\nif (sqlQuery.includes(\"SELECT\") && sqlQuery.includes(\"WHERE\")) {\n    return sqlQuery;\n}"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"156","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/node-custom-function"},"timestamp":"2024-03-13 18:11:26"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","package":"server","request":{"body":{"history":[],"question":"hi","socketIOClientId":"Ioy308yoo2IJjP23AAAB"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"72","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/4c12ef2e-c234-4b1b-b3ca-f20ed9e37bad"},"timestamp":"2024-03-13 18:11:33"}
{"level":"info","message":"‚¨ÜÔ∏è POST /api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698","package":"server","request":{"body":{"history":[],"question":"hih","socketIOClientId":"lH6TFyFL6xlkSwS_AAAD"},"headers":{"accept":"application/json, text/plain, */*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-GB,en-US;q=0.9,en;q=0.8","connection":"keep-alive","content-length":"73","content-type":"application/json","cookie":"_legacy_auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true; auth0.L4cF0g9S3ltOvYZMN8WLeJJeQrQQtqOY.is.authenticated=true","host":"localhost:3000","origin":"http://localhost:3000","referer":"http://localhost:3000/canvas/d71eeecf-b1e6-4bad-87f7-dd55768e1698","sec-ch-ua":"\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"},"method":"POST","params":{},"query":{},"url":"/api/v1/internal-prediction/d71eeecf-b1e6-4bad-87f7-dd55768e1698"},"timestamp":"2024-03-13 18:11:46"}
